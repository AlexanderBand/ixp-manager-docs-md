{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to IXP Manager\n\n\n\n\nThis documentation relates to IXP Manager \n= v4. For v3, please see \nthe older documentation here\n.\n\n\nIXP Manager\n is a full stack management system for Internet eXchange Points (IXPs) which includes an administration and customer portal; provides end to end provisioning; and both teaches and implements best practice.\n\n\nINEX\n are pleased to release \nIXP Manager\n under an open source license (the GNU Public License V2) which we hope will benefit the wider IXP community, and especially new and small IXPs looking to expand.\n\n\nAdditional information: \nhttp://www.ixpmanager.org/\n\n\nOther Links\n\n\n\n\nIXP Manager Website\n\n\nDocumentation\n (this site!) including:\n\n\nInstallation \noverview\n,\n\nby automated script\n,\n\nmanually\n,\nand \nupgrading from v3\n.\n\n\nUpgrade Instructions\n\n\n\n\n\n\nReleases\n\n\nList of Users\n (contact us if you are missing!)\n\n\nHow to Get Help\n\n\nCommercial Support\n\n\nPresentations \n Talks\n\n\nSponsors and Sponsorship\n\n\nFollow \n@ixpmanager\n on Twitter\n\n\n\n\nDocumentation\n\n\nFrom v4 onwards, our documentation is now hosted on this site.\n\n\nFor a period, some older v3 documentation may still be useful. You can find that on the \nwiki\n.\n\n\nAbout IXP Manager\n\n\nFor detailed information, see: https://www.ixpmanager.org/\n\n\nIXP Manager is primarily a web application with associated scripts and utilities which will allow IXPs to manage new customers, provision new connections / services and monitor traffic usage. It also has a self contained customer portal allowing IXP members to view their IXP traffic statistics and a unique tool called My Peering Manager enabling IXP members to request, manage and track peerings with other members.\n\n\nINEX\n is an Internet eXchange Point and Ireland's IP peering hub. It is a neutral, industry-owned Association, founded in 1996, that provides IP peering facilities for its members. INEX membership is open to all organisations that can benefit from peering their IP traffic.\n\n\nSee: https://www.inex.ie/\n\n\nAuthors:\n\n\n\n\nBarry O'Donovan\n / \n@barryo79\n\n\nNick Hilliard\n\n\nContact us via: operations (at) inex.ie\n\n\n\n\nSince the end of 2016, IXP Manager has a new full time developer: \nYann Robin\n.\n\n\nWe are also grateful \nfor all the individuals who have contributing code\n, issues, mailing list help and feature requests.\n\n\nCopyright (C) 2009-2017 Internet Neutral Exchange Association Company Limited By Guarantee.\nAll Rights Reserved.\n\n\nSponsors\n\n\nIXP Manager is extremely grateful to its \nexisting sponsors\n and continues to seek sponsors for on going development. If you are interested, please \nsee out call for sponsorship\n.\n\n\nLicense\n\n\nIXP Manager is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version v2.0 of the License.\n\n\nIXP Manager is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.\n\n\nYou should have received a copy of the GNU General Public License v2.0 along with IXP Manager.  If not, see:\n\n\nhttp://www.gnu.org/licenses/gpl-2.0.html\n\n\nDocumentation License\n\n\nThis documentation is licensed under a \nCreative Commons Attribution-ShareAlike 4.0 International License\n.", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-ixp-manager", 
            "text": "This documentation relates to IXP Manager  = v4. For v3, please see  the older documentation here .  IXP Manager  is a full stack management system for Internet eXchange Points (IXPs) which includes an administration and customer portal; provides end to end provisioning; and both teaches and implements best practice.  INEX  are pleased to release  IXP Manager  under an open source license (the GNU Public License V2) which we hope will benefit the wider IXP community, and especially new and small IXPs looking to expand.  Additional information:  http://www.ixpmanager.org/", 
            "title": "Welcome to IXP Manager"
        }, 
        {
            "location": "/#other-links", 
            "text": "IXP Manager Website  Documentation  (this site!) including:  Installation  overview , by automated script , manually ,\nand  upgrading from v3 .  Upgrade Instructions    Releases  List of Users  (contact us if you are missing!)  How to Get Help  Commercial Support  Presentations   Talks  Sponsors and Sponsorship  Follow  @ixpmanager  on Twitter", 
            "title": "Other Links"
        }, 
        {
            "location": "/#documentation", 
            "text": "From v4 onwards, our documentation is now hosted on this site.  For a period, some older v3 documentation may still be useful. You can find that on the  wiki .", 
            "title": "Documentation"
        }, 
        {
            "location": "/#about-ixp-manager", 
            "text": "For detailed information, see: https://www.ixpmanager.org/  IXP Manager is primarily a web application with associated scripts and utilities which will allow IXPs to manage new customers, provision new connections / services and monitor traffic usage. It also has a self contained customer portal allowing IXP members to view their IXP traffic statistics and a unique tool called My Peering Manager enabling IXP members to request, manage and track peerings with other members.  INEX  is an Internet eXchange Point and Ireland's IP peering hub. It is a neutral, industry-owned Association, founded in 1996, that provides IP peering facilities for its members. INEX membership is open to all organisations that can benefit from peering their IP traffic.  See: https://www.inex.ie/  Authors:   Barry O'Donovan  /  @barryo79  Nick Hilliard  Contact us via: operations (at) inex.ie   Since the end of 2016, IXP Manager has a new full time developer:  Yann Robin .  We are also grateful  for all the individuals who have contributing code , issues, mailing list help and feature requests.  Copyright (C) 2009-2017 Internet Neutral Exchange Association Company Limited By Guarantee.\nAll Rights Reserved.", 
            "title": "About IXP Manager"
        }, 
        {
            "location": "/#sponsors", 
            "text": "IXP Manager is extremely grateful to its  existing sponsors  and continues to seek sponsors for on going development. If you are interested, please  see out call for sponsorship .", 
            "title": "Sponsors"
        }, 
        {
            "location": "/#license", 
            "text": "IXP Manager is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version v2.0 of the License.  IXP Manager is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License v2.0 along with IXP Manager.  If not, see:  http://www.gnu.org/licenses/gpl-2.0.html", 
            "title": "License"
        }, 
        {
            "location": "/#documentation-license", 
            "text": "This documentation is licensed under a  Creative Commons Attribution-ShareAlike 4.0 International License .", 
            "title": "Documentation License"
        }, 
        {
            "location": "/install/", 
            "text": "Installation\n\n\nWe've tried out best to make installing IXP Manager as easy as possible via the install script(s) we provide. These scripts are opinionated about what version of Linux is used and how IXP Manager is installed. It's targeted at people who don't have a huge amount of system administration skills or want to take a quick look to evaluate the product.\n\n\nIf you want to install on your own preferred platform or with your own tweaks, we provide detailed instructions below also but we only offer whatever support you'll find on the \npublic mailing list\n.\n\n\nThe installation of IXP Manager doesn't end when you have the web interface up and running (which is mostly what we cover in this section and the installation script) - that's really just the beginning. Completing the installation is about all the features that work around and via IXP Manager such as route server configurations, graphing, peer to peer graphs via sflow, etc. Each of these require different amounts of effort and are covered in their individual feature pages.", 
            "title": "Introduction"
        }, 
        {
            "location": "/install/#installation", 
            "text": "We've tried out best to make installing IXP Manager as easy as possible via the install script(s) we provide. These scripts are opinionated about what version of Linux is used and how IXP Manager is installed. It's targeted at people who don't have a huge amount of system administration skills or want to take a quick look to evaluate the product.  If you want to install on your own preferred platform or with your own tweaks, we provide detailed instructions below also but we only offer whatever support you'll find on the  public mailing list .  The installation of IXP Manager doesn't end when you have the web interface up and running (which is mostly what we cover in this section and the installation script) - that's really just the beginning. Completing the installation is about all the features that work around and via IXP Manager such as route server configurations, graphing, peer to peer graphs via sflow, etc. Each of these require different amounts of effort and are covered in their individual feature pages.", 
            "title": "Installation"
        }, 
        {
            "location": "/install/automated-script/", 
            "text": "Automated Installation Script\n\n\nThe available installation script(s) can be found at: \nhttps://github.com/inex/IXP-Manager/tree/master/tools/installers\n.\n\n\nEven if you choose not to use these, the scripts under the above link show the accurate and complete installation process and should be used as a reference guide.", 
            "title": "Automated Script"
        }, 
        {
            "location": "/install/automated-script/#automated-installation-script", 
            "text": "The available installation script(s) can be found at:  https://github.com/inex/IXP-Manager/tree/master/tools/installers .  Even if you choose not to use these, the scripts under the above link show the accurate and complete installation process and should be used as a reference guide.", 
            "title": "Automated Installation Script"
        }, 
        {
            "location": "/install/maint-mode/", 
            "text": "Maintenance Mode\n\n\nWhile most updates of \nIXP Manager\n are quick, some may be more involved with schema updates or complicated migration steps. In these cases it's useful and advisable to put \nIXP Manager\n in maintenance mode.\n\n\nMaintenance mode is now handled by Laravel's built in tool for this. You can review \ntheir own documentation for this\n which us copied here.\n\n\nWhen your application is in maintenance mode, a custom view will be displayed for all requests into your application. This makes it easy to \"disable\" your application while it is updating or when you are performing maintenance. A maintenance mode check is included in the default middleware stack for your application. If the application is in maintenance mode, a \nMaintenanceModeException\n will be thrown with a status code of 503.\n\n\nTo enable maintenance mode, simply execute the down Artisan command:\n\n\nphp artisan down\n\n\n\n\n\nYou may also provide message and retry options to the down command. The message value may be used to display or log a custom message, while the retry value will be set as the Retry-After HTTP header's value::\n\n\nphp artisan down --message=\nUpgrading Database\n --retry=60\n\n\n\n\n\nTo disable maintenance mode, use the up command::\n\n\nphp artisan up", 
            "title": "Maintenance Mode"
        }, 
        {
            "location": "/install/maint-mode/#maintenance-mode", 
            "text": "While most updates of  IXP Manager  are quick, some may be more involved with schema updates or complicated migration steps. In these cases it's useful and advisable to put  IXP Manager  in maintenance mode.  Maintenance mode is now handled by Laravel's built in tool for this. You can review  their own documentation for this  which us copied here.  When your application is in maintenance mode, a custom view will be displayed for all requests into your application. This makes it easy to \"disable\" your application while it is updating or when you are performing maintenance. A maintenance mode check is included in the default middleware stack for your application. If the application is in maintenance mode, a  MaintenanceModeException  will be thrown with a status code of 503.  To enable maintenance mode, simply execute the down Artisan command:  php artisan down  You may also provide message and retry options to the down command. The message value may be used to display or log a custom message, while the retry value will be set as the Retry-After HTTP header's value::  php artisan down --message= Upgrading Database  --retry=60  To disable maintenance mode, use the up command::  php artisan up", 
            "title": "Maintenance Mode"
        }, 
        {
            "location": "/install/manually/", 
            "text": "Requirements\n\n\nIXP Manager tries to stay current in terms of technology. Typically, this means some element of framework refresh(es) every couple of years and other more incremental package upgrades with minor version upgrades. As well as the obvious reasons for this, there is also the requirement to prevent developer apathy - insisting on legacy frameworks and packages that have been EOL'd provides a major stumbling block for bringing on new developers and contributors.\n\n\nThe current requirements for the web application are:\n\n\n\n\na Linux / BSD host.\n\n\nMariaDB / MySQL version 5.5.4 or later.\n\n\nApache / Nginx / etc.\n\n\nPHP \n= 7.0. \nNote that IXP Manager will not run on older versions of PHP.\n\n\nMemcached - optional but highly recommended.\n\n\n\n\nTo complete the installation using the included config/scripts, you will also need to have installed:\n\n\n\n\ngit - distributed revision control system (e.g.: \napt-get install git\n)\n\n\nmemcache extension module for PHP (e.g.: \napt-get install php-memcached\n)\n\n\nSNMP extension module for PHP (e.g.: \napt-get install php7.0-snmp\n)\n\n\nphp7.0-mbstring - may be built into the PHP core\n\n\nphp7.0-xml\n\n\nphp7.0-intl\n\n\nphp7.0-mysql\n\n\nphp7.0-mcrypt\n\n\nphp-rrd\n\n\n\n\nFor completeness, the IXP Manager installation script for Ubuntu 16.04 LTS installs:\n\n\napt-get install apache2 php7.0 php7.0-intl php7.0-mysql php-rrd php7.0-cgi php7.0-cli  \n\\\n\n    php7.0-snmp php7.0-curl php7.0-mcrypt php-memcached libapache2-mod-php7.0          \n\\\n\n    mysql-server mysql-client php-mysql memcached snmp nodejs nodejs-legacy npm        \n\\\n\n    php7.0-mbstring php7.0-xml php-gettext php-gd bgpq3 php-memcache unzip php-zip git\n\n\n\n\n\nGet the IXP Manager Source\n\n\nThe code for IXP Manager is maintained on GitHub and the canonical repository is \ninex/IXP-Manager\n.\n\n\nLog into the server where you wish to install IXP Manager. Move to the directory where you wish to store the source (our examples use \n/srv/ixpmanager\n which we refer to as \n$IXPROOT\n). Note that it \nshould not\n be checked out into any web exposed directory (e.g. do not checkout to \n/var/www\n).\n\n\nIXPROOT\n=\n/srv/ixpmanager\n\ncd\n /srv\ngit clone https://github.com/inex/IXP-Manager.git ixpmanager\n\ncd\n \n$IXPROOT\n   \n# /srv/ixpmanager\n\ngit checkout master\nchown -R www-data: \n$IXPROOT\n\n\n\n\n\n\nInstall Composer and Bower\n\n\nIXP Manager uses \nComposer\n to manage its PHP dependencies. First, download a copy of the composer.phar. Once you have the PHAR archive, you can either keep it in your local project directory or move to \n/usr/local/bin\n to use it globally on your system.\n\n\nThe installation script for Ubuntu 16.04 LTS installs these via:\n\n\ncd\n \n$IXPROOT\n\n\nEXPECTED_SIGNATURE\n=\n$(\nwget https://composer.github.io/installer.sig -O - -q\n)\n\nphp -r \ncopy(\nhttps://getcomposer.org/installer\n, \ncomposer-setup.php\n);\n\n\nACTUAL_SIGNATURE\n=\n$(\nphp -r \necho hash_file(\nSHA384\n, \ncomposer-setup.php\n);\n)\n\n\n\nif\n \n[\n \n$EXPECTED_SIGNATURE\n \n=\n \n$ACTUAL_SIGNATURE\n \n]\n;\n \nthen\n\n    sudo -u www-data bash -c \nHOME=\n$IXPROOT\n \n cd \n$IXPROOT\n \n php composer-setup.php --quiet\n\n    rm \n$IXPROOT\n/composer-setup.php\n    \n# optional:\n\n    mv composer.phar /usr/local/bin/composer\n\nelse\n\n    \necho\n -e \n\\n\\nERROR: Invalid installer signature for composer installation\n\n    rm \n$IXPROOT\n/composer-setup.php\n    \nexit \n1\n\nfi\n\n\n\n\n\n\nand:\n\n\nnpm install -g bower\n\n\n\n\n\nInitial Setup and Dependancies\n\n\nDependencies\n\n\nInstall the required PHP libraries and frontend CSS/JS packages:\n\n\ncd\n \n$IXPROOT\n\ncomposer install\nbower install\ncp .env.example .env\nphp artisan key:generate\n\n\n\n\n\nDatabase Setup\n\n\nUse whatever means you like to create a database and user for IXP Manager. For example:\n\n\nCREATE\n \nDATABASE\n \n`ixp`\n \nCHARACTER\n \nSET\n \n=\n \nutf8mb4\n \nCOLLATE\n \n=\n \nutf8mb4_unicode_ci\n;\n\n\nGRANT\n \nALL\n \nON\n \n`ixp`\n.\n*\n \nTO\n \n`ixp`\n@\n`localhost`\n \nIDENTIFIED\n \nBY\n \npick a password!\n;\n\n\nFLUSH\n \nPRIVILEGES\n;\n\n\n\n\n\n\nThen edit \n$IXPROOT/.env\n and set the database options:\n\n\nDB_HOST=localhost\nDB_DATABASE=ixp\nDB_USERNAME=ixp\nDB_PASSWORD=password\n\n\n\n\n\nNow create the database schema:\n\n\nphp artisan doctrine:schema:create\n\n\n\n\n\nSome older scripts still rely on MySQL view tables. Create these with:\n\n\nmysql -u ixp -p ixp \n \n$IXPROOT\n/tools/sql/views.sql\n\n\n\n\n\nConfiguration\n\n\nEdit \n$IXPROOT/.env\n and review and set/change all parameters. Hopefully this is mostly documented or clear but please start a discussion on the mailing list if you have difficultly and we'll update this and the example file's documentation as appropriate.\n\n\nInitial Database Objects\n\n\nUsing the settings you edited in \n.env\n we'll create some database objects. [Yes, a setup wizard needs to be built!].\n\n\nFirst let's create the password for the admin user. The following will create a secure random password and hash it with bcrypt:\n\n\nUSERNAME\n=\nadmin\n\nUSEREMAIL\n=\nyour@email.address\n\nIXPM_ADMIN_PW\n=\n$(\n openssl rand -base64 \n12\n \n)\n\n\nADMIN_PW_SALT\n=\n$(\n openssl rand -base64 \n16\n \n)\n\n\nHASH_PW\n=\n$(\n php -r \necho escapeshellarg( crypt( \n${\nIXPM_ADMIN_PW\n}\n, sprintf( \n\\$2a\\$%02d\\$%s\n, 10, substr( \n${\nADMIN_PW_SALT\n}\n, 0, 22 ) ) ) );\n \n)\n\n\necho \nYour password is: \n$IXPM_ADMIN_PW\n\n\n\n\n\n\nThe following is taken from the IXP Manager installation script:\n\n\nmysql\n \n-\nu\n \nroot\n \n-p${MYSQL_ROOT_PW}\n \n$\nDBNAME\n \nEND_SQL\n\n\nINSERT\n \nINTO\n \nixp\n \n(\n \nname\n,\n \nshortname\n,\n \naddress1\n,\n \ncountry\n \n)\n\n    \nVALUES\n \n(\n \n${IXPNAME}\n,\n \n${IXPSNAME}\n,\n \n${IXPCITY}\n,\n \n${IXPCOUNTRY}\n \n);\n\n\nSET\n \n@\nixpid\n \n=\n \nLAST_INSERT_ID\n();\n\n\n\nINSERT\n \nINTO\n \ninfrastructure\n \n(\n \nixp_id\n,\n \nname\n,\n \nshortname\n,\n \nisPrimary\n \n)\n\n    \nVALUES\n \n(\n \n@\nixpid\n,\n \nInfrastructure #1\n,\n \n#1\n,\n \n1\n \n);\n\n\nSET\n \n@\ninfraid\n \n=\n \nLAST_INSERT_ID\n();\n\n\n\nINSERT\n \nINTO\n \ncompany_registration_detail\n \n(\n \nregisteredName\n \n)\n \nVALUES\n \n(\n \n${IXPNAME}\n \n);\n\n\nSET\n \n@\ncrdid\n \n=\n \nLAST_INSERT_ID\n();\n\n\n\nINSERT\n \nINTO\n \ncompany_billing_detail\n \n(\n \nbillingContactName\n,\n \ninvoiceMethod\n,\n \nbillingFrequency\n \n)\n\n    \nVALUES\n \n(\n \n${NAME}\n,\n \nEMAIL\n,\n \nNOBILLING\n \n);\n\n\nSET\n \n@\ncbdid\n \n=\n \nLAST_INSERT_ID\n();\n\n\n\nINSERT\n \nINTO\n \ncust\n \n(\n \nname\n,\n \nshortname\n,\n \ntype\n,\n \nabbreviatedName\n,\n \nautsys\n,\n \nmaxprefixes\n,\n \npeeringemail\n,\n \nnocphone\n,\n \nnoc24hphone\n,\n\n        \nnocemail\n,\n \nnochours\n,\n \nnocwww\n,\n \npeeringpolicy\n,\n \ncorpwww\n,\n \ndatejoin\n,\n \nstatus\n,\n \nactivepeeringmatrix\n,\n \nisReseller\n,\n\n        \ncompany_registered_detail_id\n,\n \ncompany_billing_details_id\n \n)\n\n    \nVALUES\n \n(\n \n${IXPNAME}\n,\n \n${IXPSNAME}\n,\n \n3\n,\n \n${IXPSNAME}\n,\n \n${IXPASN}\n,\n \n100\n,\n \n${IXPPEEREMAIL}\n,\n \n${IXPNOCPHONE}\n,\n\n        \n${IXPNOCPHONE}\n,\n \n${IXPNOCEMAIL}\n,\n \n24x7\n,\n \n,\n \nmandatory\n,\n \n${IXPWWW}\n,\n \nNOW\n(),\n \n1\n,\n \n1\n,\n \n0\n,\n \n@\ncrdid\n,\n \n@\ncbdid\n \n);\n\n\nSET\n \n@\ncustid\n \n=\n \nLAST_INSERT_ID\n();\n\n\n\nINSERT\n \nINTO\n \ncustomer_to_ixp\n \n(\n \ncustomer_id\n,\n \nixp_id\n \n)\n \nVALUES\n \n(\n \n@\ncustid\n,\n \n@\nixpid\n \n);\n\n\n\nINSERT\n \nINTO\n \nuser\n \n(\n \ncustid\n,\n \nusername\n,\n \npassword\n,\n \nemail\n,\n \nprivs\n,\n \ndisabled\n,\n \ncreated\n \n)\n\n    \nVALUES\n \n(\n \n@\ncustid\n,\n \n${USERNAME}\n,\n \n${\nHASH_PW\n}\n,\n \n${USEREMAIL}\n,\n \n3\n,\n \n0\n,\n \nNOW\n()\n \n);\n\n\nSET\n \n@\nuserid\n \n=\n \nLAST_INSERT_ID\n();\n\n\n\nINSERT\n \nINTO\n \ncontact\n \n(\n \ncustid\n,\n \nname\n,\n \nemail\n,\n \ncreated\n,\n \nuser_id\n \n)\n \nVALUES\n \n(\n \n@\ncustid\n,\n \n${NAME}\n,\n \n${USEREMAIL}\n,\n \nNOW\n(),\n \n@\nuserid\n \n);\n\n\nEND_SQL\n\n\n\n\n\n\nAnd finally seed the database:\n\n\ncd\n \n$IXPROOT\n\nphp artisan db:seed --class\n=\nIRRDBs\nphp artisan db:seed --class\n=\nVendors\nphp artisan db:seed --class\n=\nContactGroups\n\n\n\n\n\nFile Permissions\n\n\nThe web server needs write access to some directories:\n\n\ncd\n \n$IXPROOT\n\nchown -R www-data: var/ storage/ bootstrap/cache/ database/Proxies/\nchmod -R u+rwX var/ storage/ bootstrap/cache/ database/Proxies/\n\n\n\n\n\nSetting Up Apache\n\n\nHere is a sample virtual hosts file for IXP Manager (replace \n{$IXPROOT}\n as appropriate!):\n\n\nVirtualHost\n \n*:80\n\n    \nServerAdmin\n webmaster@localhost\n    \nDocumentRoot\n ${IXPROOT}/public\n    \nDirectory\n \n${IXPROOT}/public\n\n        \nOptions\n FollowSymLinks\n        \nAllowOverride\n \nNone\n\n        \nRequire\n \nall\n granted\n        \nRewriteEngine\n \nOn\n\n        \nRewriteCond\n %{REQUEST_FILENAME} -s [OR]\n        \nRewriteCond\n %{REQUEST_FILENAME} -l [OR]\n        \nRewriteCond\n %{REQUEST_FILENAME} -d\n        \nRewriteRule\n ^.*$ - [NC,L]\n        \nRewriteRule\n ^.*$ \n/index.php\n [NC,L]\n    \n/Directory\n\n    \nErrorLog\n \\${APACHE_LOG_DIR}/error.log\n    \nCustomLog\n \\${APACHE_LOG_DIR}/access.log combined\n\n/VirtualHost\n\n\n\n\n\n\nYou also need to enable rewrite:\n\n\na2enmod rewrite\nservice apache2 restart\n\n\n\n\n\nCongratulations!\n\n\nYour new IXP Manager installation should be accessible via your server's IP address using the username (\n$USERNAME\n) and password (\n$IXPM_ADMIN_PW\n) you set above.\n\n\nIf you plan to use this in production, you should:\n\n\n\n\nsecure your server with an iptables firewall\n\n\ninstall an SSL certificate and redirect HTTP access to HTTPS\n\n\ncomplete the installation of the many features of IXP Manager such as route server generation, member stats, peer to peer graphs, etc.\n\n\nPLEASE TELL US! We'd like to add you to the users list at http://www.ixpmanager.org/users.php - just drop us an email to \noperations \nat\n inex \ndot\n ie\n.", 
            "title": "Manual Installation"
        }, 
        {
            "location": "/install/manually/#requirements", 
            "text": "IXP Manager tries to stay current in terms of technology. Typically, this means some element of framework refresh(es) every couple of years and other more incremental package upgrades with minor version upgrades. As well as the obvious reasons for this, there is also the requirement to prevent developer apathy - insisting on legacy frameworks and packages that have been EOL'd provides a major stumbling block for bringing on new developers and contributors.  The current requirements for the web application are:   a Linux / BSD host.  MariaDB / MySQL version 5.5.4 or later.  Apache / Nginx / etc.  PHP  = 7.0.  Note that IXP Manager will not run on older versions of PHP.  Memcached - optional but highly recommended.   To complete the installation using the included config/scripts, you will also need to have installed:   git - distributed revision control system (e.g.:  apt-get install git )  memcache extension module for PHP (e.g.:  apt-get install php-memcached )  SNMP extension module for PHP (e.g.:  apt-get install php7.0-snmp )  php7.0-mbstring - may be built into the PHP core  php7.0-xml  php7.0-intl  php7.0-mysql  php7.0-mcrypt  php-rrd   For completeness, the IXP Manager installation script for Ubuntu 16.04 LTS installs:  apt-get install apache2 php7.0 php7.0-intl php7.0-mysql php-rrd php7.0-cgi php7.0-cli   \\ \n    php7.0-snmp php7.0-curl php7.0-mcrypt php-memcached libapache2-mod-php7.0           \\ \n    mysql-server mysql-client php-mysql memcached snmp nodejs nodejs-legacy npm         \\ \n    php7.0-mbstring php7.0-xml php-gettext php-gd bgpq3 php-memcache unzip php-zip git", 
            "title": "Requirements"
        }, 
        {
            "location": "/install/manually/#get-the-ixp-manager-source", 
            "text": "The code for IXP Manager is maintained on GitHub and the canonical repository is  inex/IXP-Manager .  Log into the server where you wish to install IXP Manager. Move to the directory where you wish to store the source (our examples use  /srv/ixpmanager  which we refer to as  $IXPROOT ). Note that it  should not  be checked out into any web exposed directory (e.g. do not checkout to  /var/www ).  IXPROOT = /srv/ixpmanager cd  /srv\ngit clone https://github.com/inex/IXP-Manager.git ixpmanager cd   $IXPROOT     # /srv/ixpmanager \ngit checkout master\nchown -R www-data:  $IXPROOT", 
            "title": "Get the IXP Manager Source"
        }, 
        {
            "location": "/install/manually/#install-composer-and-bower", 
            "text": "IXP Manager uses  Composer  to manage its PHP dependencies. First, download a copy of the composer.phar. Once you have the PHAR archive, you can either keep it in your local project directory or move to  /usr/local/bin  to use it globally on your system.  The installation script for Ubuntu 16.04 LTS installs these via:  cd   $IXPROOT  EXPECTED_SIGNATURE = $( wget https://composer.github.io/installer.sig -O - -q ) \nphp -r  copy( https://getcomposer.org/installer ,  composer-setup.php );  ACTUAL_SIGNATURE = $( php -r  echo hash_file( SHA384 ,  composer-setup.php ); )  if   [   $EXPECTED_SIGNATURE   =   $ACTUAL_SIGNATURE   ] ;   then \n    sudo -u www-data bash -c  HOME= $IXPROOT    cd  $IXPROOT    php composer-setup.php --quiet \n    rm  $IXPROOT /composer-setup.php\n     # optional: \n    mv composer.phar /usr/local/bin/composer else \n     echo  -e  \\n\\nERROR: Invalid installer signature for composer installation \n    rm  $IXPROOT /composer-setup.php\n     exit  1 fi   and:  npm install -g bower", 
            "title": "Install Composer and Bower"
        }, 
        {
            "location": "/install/manually/#initial-setup-and-dependancies", 
            "text": "", 
            "title": "Initial Setup and Dependancies"
        }, 
        {
            "location": "/install/manually/#dependencies", 
            "text": "Install the required PHP libraries and frontend CSS/JS packages:  cd   $IXPROOT \ncomposer install\nbower install\ncp .env.example .env\nphp artisan key:generate", 
            "title": "Dependencies"
        }, 
        {
            "location": "/install/manually/#database-setup", 
            "text": "Use whatever means you like to create a database and user for IXP Manager. For example:  CREATE   DATABASE   `ixp`   CHARACTER   SET   =   utf8mb4   COLLATE   =   utf8mb4_unicode_ci ;  GRANT   ALL   ON   `ixp` . *   TO   `ixp` @ `localhost`   IDENTIFIED   BY   pick a password! ;  FLUSH   PRIVILEGES ;   Then edit  $IXPROOT/.env  and set the database options:  DB_HOST=localhost\nDB_DATABASE=ixp\nDB_USERNAME=ixp\nDB_PASSWORD=password  Now create the database schema:  php artisan doctrine:schema:create  Some older scripts still rely on MySQL view tables. Create these with:  mysql -u ixp -p ixp    $IXPROOT /tools/sql/views.sql", 
            "title": "Database Setup"
        }, 
        {
            "location": "/install/manually/#configuration", 
            "text": "Edit  $IXPROOT/.env  and review and set/change all parameters. Hopefully this is mostly documented or clear but please start a discussion on the mailing list if you have difficultly and we'll update this and the example file's documentation as appropriate.", 
            "title": "Configuration"
        }, 
        {
            "location": "/install/manually/#initial-database-objects", 
            "text": "Using the settings you edited in  .env  we'll create some database objects. [Yes, a setup wizard needs to be built!].  First let's create the password for the admin user. The following will create a secure random password and hash it with bcrypt:  USERNAME = admin USEREMAIL = your@email.address IXPM_ADMIN_PW = $(  openssl rand -base64  12   )  ADMIN_PW_SALT = $(  openssl rand -base64  16   )  HASH_PW = $(  php -r  echo escapeshellarg( crypt(  ${ IXPM_ADMIN_PW } , sprintf(  \\$2a\\$%02d\\$%s , 10, substr(  ${ ADMIN_PW_SALT } , 0, 22 ) ) ) );   )  echo  Your password is:  $IXPM_ADMIN_PW   The following is taken from the IXP Manager installation script:  mysql   - u   root   -p${MYSQL_ROOT_PW}   $ DBNAME   END_SQL  INSERT   INTO   ixp   (   name ,   shortname ,   address1 ,   country   ) \n     VALUES   (   ${IXPNAME} ,   ${IXPSNAME} ,   ${IXPCITY} ,   ${IXPCOUNTRY}   );  SET   @ ixpid   =   LAST_INSERT_ID ();  INSERT   INTO   infrastructure   (   ixp_id ,   name ,   shortname ,   isPrimary   ) \n     VALUES   (   @ ixpid ,   Infrastructure #1 ,   #1 ,   1   );  SET   @ infraid   =   LAST_INSERT_ID ();  INSERT   INTO   company_registration_detail   (   registeredName   )   VALUES   (   ${IXPNAME}   );  SET   @ crdid   =   LAST_INSERT_ID ();  INSERT   INTO   company_billing_detail   (   billingContactName ,   invoiceMethod ,   billingFrequency   ) \n     VALUES   (   ${NAME} ,   EMAIL ,   NOBILLING   );  SET   @ cbdid   =   LAST_INSERT_ID ();  INSERT   INTO   cust   (   name ,   shortname ,   type ,   abbreviatedName ,   autsys ,   maxprefixes ,   peeringemail ,   nocphone ,   noc24hphone , \n         nocemail ,   nochours ,   nocwww ,   peeringpolicy ,   corpwww ,   datejoin ,   status ,   activepeeringmatrix ,   isReseller , \n         company_registered_detail_id ,   company_billing_details_id   ) \n     VALUES   (   ${IXPNAME} ,   ${IXPSNAME} ,   3 ,   ${IXPSNAME} ,   ${IXPASN} ,   100 ,   ${IXPPEEREMAIL} ,   ${IXPNOCPHONE} , \n         ${IXPNOCPHONE} ,   ${IXPNOCEMAIL} ,   24x7 ,   ,   mandatory ,   ${IXPWWW} ,   NOW (),   1 ,   1 ,   0 ,   @ crdid ,   @ cbdid   );  SET   @ custid   =   LAST_INSERT_ID ();  INSERT   INTO   customer_to_ixp   (   customer_id ,   ixp_id   )   VALUES   (   @ custid ,   @ ixpid   );  INSERT   INTO   user   (   custid ,   username ,   password ,   email ,   privs ,   disabled ,   created   ) \n     VALUES   (   @ custid ,   ${USERNAME} ,   ${ HASH_PW } ,   ${USEREMAIL} ,   3 ,   0 ,   NOW ()   );  SET   @ userid   =   LAST_INSERT_ID ();  INSERT   INTO   contact   (   custid ,   name ,   email ,   created ,   user_id   )   VALUES   (   @ custid ,   ${NAME} ,   ${USEREMAIL} ,   NOW (),   @ userid   );  END_SQL   And finally seed the database:  cd   $IXPROOT \nphp artisan db:seed --class = IRRDBs\nphp artisan db:seed --class = Vendors\nphp artisan db:seed --class = ContactGroups", 
            "title": "Initial Database Objects"
        }, 
        {
            "location": "/install/manually/#file-permissions", 
            "text": "The web server needs write access to some directories:  cd   $IXPROOT \nchown -R www-data: var/ storage/ bootstrap/cache/ database/Proxies/\nchmod -R u+rwX var/ storage/ bootstrap/cache/ database/Proxies/", 
            "title": "File Permissions"
        }, 
        {
            "location": "/install/manually/#setting-up-apache", 
            "text": "Here is a sample virtual hosts file for IXP Manager (replace  {$IXPROOT}  as appropriate!):  VirtualHost   *:80 \n     ServerAdmin  webmaster@localhost\n     DocumentRoot  ${IXPROOT}/public\n     Directory   ${IXPROOT}/public \n         Options  FollowSymLinks\n         AllowOverride   None \n         Require   all  granted\n         RewriteEngine   On \n         RewriteCond  %{REQUEST_FILENAME} -s [OR]\n         RewriteCond  %{REQUEST_FILENAME} -l [OR]\n         RewriteCond  %{REQUEST_FILENAME} -d\n         RewriteRule  ^.*$ - [NC,L]\n         RewriteRule  ^.*$  /index.php  [NC,L]\n     /Directory \n     ErrorLog  \\${APACHE_LOG_DIR}/error.log\n     CustomLog  \\${APACHE_LOG_DIR}/access.log combined /VirtualHost   You also need to enable rewrite:  a2enmod rewrite\nservice apache2 restart", 
            "title": "Setting Up Apache"
        }, 
        {
            "location": "/install/manually/#congratulations", 
            "text": "Your new IXP Manager installation should be accessible via your server's IP address using the username ( $USERNAME ) and password ( $IXPM_ADMIN_PW ) you set above.  If you plan to use this in production, you should:   secure your server with an iptables firewall  install an SSL certificate and redirect HTTP access to HTTPS  complete the installation of the many features of IXP Manager such as route server generation, member stats, peer to peer graphs, etc.  PLEASE TELL US! We'd like to add you to the users list at http://www.ixpmanager.org/users.php - just drop us an email to  operations  at  inex  dot  ie .", 
            "title": "Congratulations!"
        }, 
        {
            "location": "/install/upgrading/", 
            "text": "Upgrading IXP Manager\n\n\n\n\nThese upgrade instructions relate to upgrading when you are already using IXP Manager v4.x.\n\n\n\n\nThe upgrade process for IXP Manager is currently a manual task. Especially database schema updates.\n\n\nThe release notes for each version may contain specific upgrade instructions including schema changes.\n\n\nIn the below, we assume the following installation directory - alter this to suit your own situation:\n\n\nIXPROOT=/srv/ixpmanager\n\n\n\n\n\nThe general process is:\n\n\n\n\n\n\nEnable maintenance mode:\n\n\ncd\n \n$IXPROOT\n\n./artisan down\n\n\n\n\n\n\n\n\n\nUsing Git, checkout the next version up from yours. For IXP Manager v4, this essentially means pulling from \nmaster\n.\n\n\n# move to the directory where you have installed IXP Manager\n\n\ncd\n \n$IXPROOT\n\n\n# you should be in the master branch (if not: git checkout master)\n\n\n# pull the latest code\n\ngit pull\n\n\n\n\n\n\n\n\n\nInstall latest required libraries from composer (see notes below):\n\n\ncomposer install\n\n\n\n\n\n\n\n\n\nInstall latest frontend dependencies (see notes below):\n\n\n# if asked to chose a jquery version, chose the latest / highest version offered\n\nbower install\n\n\n\n\n\n\n\n\n\nRestart Memcached. Do not forget / skip this step!\n\n\nsystemctl restart memcached.service\n\n\n\n\n\n\n\n\n\nUpdate the database schema:\n\n\n# review / sanity check first:\n\n./artisan doctrine:schema:update --sql\n\n# If in doubt, take a mysqldump of your database first.\n\n\n# migrate:\n\n./artisan doctrine:schema:update --force\n\n\n\n\n\n\n\n\n\nRestart Memcached (yes, again). Do not forget / skip this step!\n\n\nsystemctl restart memcached.service\n\n\n\n\n\n\n\n\n\nDisable maintenance mode:\n\n\n./artisan up\n\n\n\n\n\n\n\n\n\nUpdating Bower Dependancies\n\n\nIt is not advisable to run bower are root but how you run it will depend on your own installation.\n\n\nIf you installed IXP Manager via the \ninstallation scripts\n, then it will have changed ownership on directories that the web server does not need to write to to root.\n\n\nThe following options would work on Ubuntu (as root):\n\n\n# set this to your IXP Manager installation directory\n\n\nIXPHOME\n=\n/srv/ixpmanager\n\n\n# update bower\n\nsudo -u www-data bash -c \nHOME=\n${\nIXPHOME\n}\n/storage \n cd \n${\nIXPHOME\n}\n \n bower --config.interactive=false -f update\n\n\n\n\n\n\nThe above command is structured as it is because typically the \nwww-data\n user has a nologin shell specified.\n\n\nYour mileage may vary on this and we're happy to accept pull requests with other options.\n\n\nUpdating Composer Dependancies\n\n\nThis is similar to the bower section above so please read that if you have not already.\n\n\nThe following options would work on Ubuntu (as root):\n\n\n# set this to your IXP Manager installation directory\n\n\nIXPHOME\n=\n/srv/ixpmanager\n\n\n# update bower\n\nsudo -u www-data bash -c \nHOME=\n${\nIXPHOME\n}\n/storage \n cd \n${\nIXPHOME\n}\n \n composer install\n\n\n\n\n\n\nCorrecting Database Issues / Verifying Your Schema\n\n\nBecause of the manual process of database updates, it is possible your database schema may fall out of sync.\n\n\nIf you are having issues, first and foremost, restart Memcached. Doctrine2 caches entities and schema information in Memcached so, after an upgrade, you must restart Memcached.\n\n\nYou can verify and update your schema using the \nartisan\n script. The first action should be validation - here is a working example with no database issues:\n\n\n./artisan doctrine:schema:validate\n\nValidating for default entity manager...\n[Mapping]  OK - The mapping files are correct.\n[Database] OK - The database schema is in sync with the mapping files.\n\n\n\n\n\nIf there are issues, you can use the following to show what SQL commands are required to bring your schema into line:\n\n\n./artisan doctrine:schema:update --sql\n\n\n\n\n\nAnd you can let Doctrine make the changes for you via:\n\n\n./artisan doctrine:schema:update --force\n\n\n\n\n\nDoctrine2 maintains the entities, proxies and repository classes. Ideally you should never need to do the following on a production installation - as we maintain these files with Git - but if you're developing / testing IXP Manager, you may need to.\n\n\nThe process for updating these files with schema changes / updates is:\n\n\ncd $IXPROOT\n/etc/init.d/memcached restart    # (or as appropriate for your system)\n./artisan doctrine:generate:entities database\n./artisan doctrine:generate:proxies\n\n\n\n\n\nSome older scripts also rely on MySQL view tables that may be missing. You can safely run this to (re)create them:\n\n\nmysql -u ixp -p ixp \n \n$IXPROOT\n/tools/sql/views.sql", 
            "title": "Upgrading"
        }, 
        {
            "location": "/install/upgrading/#upgrading-ixp-manager", 
            "text": "These upgrade instructions relate to upgrading when you are already using IXP Manager v4.x.   The upgrade process for IXP Manager is currently a manual task. Especially database schema updates.  The release notes for each version may contain specific upgrade instructions including schema changes.  In the below, we assume the following installation directory - alter this to suit your own situation:  IXPROOT=/srv/ixpmanager  The general process is:    Enable maintenance mode:  cd   $IXPROOT \n./artisan down    Using Git, checkout the next version up from yours. For IXP Manager v4, this essentially means pulling from  master .  # move to the directory where you have installed IXP Manager  cd   $IXPROOT  # you should be in the master branch (if not: git checkout master)  # pull the latest code \ngit pull    Install latest required libraries from composer (see notes below):  composer install    Install latest frontend dependencies (see notes below):  # if asked to chose a jquery version, chose the latest / highest version offered \nbower install    Restart Memcached. Do not forget / skip this step!  systemctl restart memcached.service    Update the database schema:  # review / sanity check first: \n./artisan doctrine:schema:update --sql # If in doubt, take a mysqldump of your database first.  # migrate: \n./artisan doctrine:schema:update --force    Restart Memcached (yes, again). Do not forget / skip this step!  systemctl restart memcached.service    Disable maintenance mode:  ./artisan up", 
            "title": "Upgrading IXP Manager"
        }, 
        {
            "location": "/install/upgrading/#updating-bower-dependancies", 
            "text": "It is not advisable to run bower are root but how you run it will depend on your own installation.  If you installed IXP Manager via the  installation scripts , then it will have changed ownership on directories that the web server does not need to write to to root.  The following options would work on Ubuntu (as root):  # set this to your IXP Manager installation directory  IXPHOME = /srv/ixpmanager # update bower \nsudo -u www-data bash -c  HOME= ${ IXPHOME } /storage   cd  ${ IXPHOME }    bower --config.interactive=false -f update   The above command is structured as it is because typically the  www-data  user has a nologin shell specified.  Your mileage may vary on this and we're happy to accept pull requests with other options.", 
            "title": "Updating Bower Dependancies"
        }, 
        {
            "location": "/install/upgrading/#updating-composer-dependancies", 
            "text": "This is similar to the bower section above so please read that if you have not already.  The following options would work on Ubuntu (as root):  # set this to your IXP Manager installation directory  IXPHOME = /srv/ixpmanager # update bower \nsudo -u www-data bash -c  HOME= ${ IXPHOME } /storage   cd  ${ IXPHOME }    composer install", 
            "title": "Updating Composer Dependancies"
        }, 
        {
            "location": "/install/upgrading/#correcting-database-issues-verifying-your-schema", 
            "text": "Because of the manual process of database updates, it is possible your database schema may fall out of sync.  If you are having issues, first and foremost, restart Memcached. Doctrine2 caches entities and schema information in Memcached so, after an upgrade, you must restart Memcached.  You can verify and update your schema using the  artisan  script. The first action should be validation - here is a working example with no database issues:  ./artisan doctrine:schema:validate\n\nValidating for default entity manager...\n[Mapping]  OK - The mapping files are correct.\n[Database] OK - The database schema is in sync with the mapping files.  If there are issues, you can use the following to show what SQL commands are required to bring your schema into line:  ./artisan doctrine:schema:update --sql  And you can let Doctrine make the changes for you via:  ./artisan doctrine:schema:update --force  Doctrine2 maintains the entities, proxies and repository classes. Ideally you should never need to do the following on a production installation - as we maintain these files with Git - but if you're developing / testing IXP Manager, you may need to.  The process for updating these files with schema changes / updates is:  cd $IXPROOT\n/etc/init.d/memcached restart    # (or as appropriate for your system)\n./artisan doctrine:generate:entities database\n./artisan doctrine:generate:proxies  Some older scripts also rely on MySQL view tables that may be missing. You can safely run this to (re)create them:  mysql -u ixp -p ixp    $IXPROOT /tools/sql/views.sql", 
            "title": "Correcting Database Issues / Verifying Your Schema"
        }, 
        {
            "location": "/install/upgrade-v3/", 
            "text": "Upgrade From v3\n\n\nDue to the significant changes between IXP Manager v3 and v4, there is no in place upgrade process. The advised way to handle this is to install v4 in parallel and then switch over (by adjusting your DNS or Apache configuration for example) to the new v4 directory/server.\n\n\nThis documentation was compiled while performing an upgrade on three separate IXP Manager installations.\n\n\nBefore you proceed, please check the requirements listed in \nthe official installation instructions\n.\n\n\nIf you need help, please \ncontact us via the public mailing list\n.\n\n\nIf you find that this guide is insufficient, please \ncontribute back to this documentation\n.\n\n\nOverview\n\n\nThe upgrade process is quite involved and, depending how many IXP Manager features you use, may take the best part of a day.\n\n\nThe general steps are:\n\n\n\n\nDuplicate the Database (see below)\n\n\nInstall IXP Manager v4 (see below)\n\n\nInitial configuration tasks (see below)\n\n\nMRTG Graphing Migration (including peer to peer changes) (see below)\n\n\nRoute collector / servers / AS112 configuration has changed - \nsee here\n\n\nDNS / ARPA export has changed - \nsee here\n\n\nExamine the new layer2 addresses feature and consideration migration - \nsee here\n\n\nIf you are using Bird, set up looking glasses - \nsee here\n\n\nSet up you cross connect / patch panel management - \nsee here\n\n\nRead up on \nthe new skinning features\n and see if you need to update / duplicate any skinned files.\n\n\n\n\nYou will note from the above that a number of features have been deprecated in favor of doing it in new ways. Our advice is to keep both v3 and v4 live in parallel and then migrate services piece meal. That way your route server configuration can continue pulling from v3 until you have set-up the v4 method. Just ensure that people do not make customer changes in either IXP Manager during this period (or, if they do, do it in both!).\n\n\nDeprecations / Removed Features\n\n\nAs of IXP Manager v4 (certainly \n=v4.5), the following are no longer available:\n\n\n\n\nv3 methods for generating route collector. configuration\n - \nsee here for the v4 method\n.\n\n\nv3 methods for generating route server configuration\n - \nsee here for the v4 method\n.\n\n\nv3 methods for generating AS112 BGP configuration\n - \nsee here for the v4 method\n.\n\n\nv3 method for IRRDB updates\n - \nsee here for the v4 method\n.\n\n\nTACACS+ and RADIUS templates - see old details \nhere for TACACS+\n and \nhere for RADIUS\n.\n\n\nv3 method for DNS/ARPA generation\n - \nsee here for the v4 method\n.\n\n\n\n\nDuplicating the Database\n\n\nAs we're installing in parallel, we want to duplicate the database.\n\n\nWhen granting permissions on the new database, use your existing IXP Manager database credentials for ease of configuration.\n\n\nmysql -u root -pXXX -e \nCREATE DATABASE ixp4 CHARACTER SET = \nutf8mb4\n COLLATE = \nutf8mb4_unicode_ci\n;\n\n\nmysqldump -u root -pXXX ixp \n|\n mysql -u root -pXXX ixp4\n\nmysql -u root -pXXX -e \nGRANT ALL ON ixp4.* TO `ixp`@`localhost` IDENTIFIED BY \nYYY\n;\n\n\n\n# and test:\n\nmysql -u ixp -pYYY -h localhost ixp4\n\n\n\n\n\nInstall IXP Manager\n\n\nThis is very much a tl;dr version of \nthe official installation instructions\n which you should review if you need additional help.\n\n\nThe code for IXP Manager is maintained on GitHub and the canonical repository is \ninex/IXP-Manager\n.\n\n\nLog into the server where you wish to install IXP Manager and move to the directory where you wish to install (we use \n/srv/ixpmanager\n here as an example and which will be referred to as \n$IXPROOT\n below).\n\n\nNote that it should not be checked out into any web exposed directory (e.g. do not checkout to \n/var/www\n).\n\n\nIXPROOT\n=\n/srv/ixpmanager\n\n\n# get the source / application\n\ngit clone https://github.com/inex/IXP-Manager.git \n$IXPROOT\n\n\ncd\n \n$IXPROOT\n\n\n\n# Using https://getcomposer.org/\n\ncomposer.phar install\n\n\n# Using https://bower.io/\n\nbower install\n\n\n# Start with the example configuration and edit.\n\n\n# Read the official documentation for help.\n\n\n# Ensure you configure the database.\n\n\n# More notes on this follow below.\n\ncp .env.example .env\nphp artisan key:generate\njoe .env\n\n\n# File system permissions\n\nchown -R www-data: var/ storage/ bootstrap/cache database/Proxies\n\n\n\n\n\nInitial Configuration Tasks\n\n\nNew Local Settings / Configuration (Laravel)\n\n\nIXP Manager v4 uses a new PHP framework (Zend Framework swapped for Laravel). As such, all the older configuration options (from \napplication/configs/application.ini\n) need to be ported to \n.env\n.\n\n\nThe \nphp dotenv\n file (\n.env\n) is where all the new configuration options go. These in turn are used by the configuration files under \nconfig/\n.\n\n\nNB: Where possible, place local changes into \n.env\n rather than changing the config files as these files are under version control. See \nLaravel's documentation on this\n and email the mailing list for help.\n\n\nOnce you have worked your way through \n.env\n, move into the \n$IXPROOT/config\n directory and - as appropriate for your own installation - examine each config file that ends in \n.dist\n. If you use / need any features in these files, copy then such as:\n\n\ncd\n \n$IXPROOT\n/config\ncp xxxx.php.dist xxxx.php\n\n\n\n\n\nThen edit the resultant \n.php\n file (or, better, where \nconfig()\n options exist, add them to \n.env\n).\n\n\nThese \n.dist\n files represent v3 funtionality that has not yet been fully ported to v4/Laravel.\n\n\nUpdate the Database Schema\n\n\nThere's about 50 schema changed between the end of v3 and v4.4.\n\n\nView the required changes with:\n\n\n./artisan doctrine:schema:update --sql\n\n\n\n\n\nAnd apply with:\n\n\n./artisan doctrine:schema:update --force\n\n\n\n Note that this may take a few minutes if you have a lot of data such as BGP session data.\n\n\nStage One Complete\n\n\nYou should be able to point Apache / your web server at the new IXP Manager installation and log in.\n\n\nMRTG Graphing Migration\n\n\nWe've implemented a new graphing backend called \nGrapher\n. One of the changes is that the graphing directory structure and file-naming conventions have changed. Primarily, we've replaced non-static handles (such as database fields like \ncustomer.shortname\n, \nphysicalinterface.monitorindex\n and \nswitcher.name\n with immutable primary keys).\n\n\nAs such, you need to both rename the statistics directory structure and regenerate the configuration.\n\n\nIt is strongly recommended you copy your existing files and do this in parallel or, at least keep a backup.\n Also, stop the MRTG daemon before starting.\n\n\nPerforming the Migration\n\n\nFirst, you'll need to update your local configuration in \n.env\n by setting something like:\n\n\nGRAPHER_BACKENDS=\nmrtg\n\nGRAPHER_BACKEND_MRTG_LOGDIR=\n/path/to/new/mrtg/data\n\nGRAPHER_BACKEND_MRTG_WORKDIR=\n/path/to/new/mrtg/data\n\nGRAPHER_CACHE_ENABLED=true\n\n\n\n\n\nSee the \nGrapher\n documentation for full details of what these mean.\n\n\nYou'll then need to migrate all your MRTG files to the new naming scheme. Run the commands below twice. Once to verify the output and a second time piped to sh (\n| sh\n) to actually execute the commands.\n\n\n# set a variable for what will become the \nold\n files for convenience\n\n\nOLDMRTG\n=\n/srv/old-mrtg\n\n\n# position ourselves in the IXP Manager root directory\n\n\ncd\n \n$IXPROOT\n\n\n\n# stop mrtg\n\nservice mrtg stop  \n# or as appropriate for your platform\n\n\n\n# Migrate IXP graphs.\n\n\n#\n\n\n# In v3 of IXP Manager, the name of this was set by a database\n\n\n# parameter in the IXP table called \naggregate graph name\n.\n\n\n# You will be able to spot it in the old MRTG files where the\n\n\n# old IXP file is named something like: \nixp_peering-XXXXX-bits.log\n.\n\n\n# The \nXXXXXX\n bit is the aggregate name you need to replace in the below:\n\nphp artisan grapher:backend:mrtg:upgrade mv -L \n$OLDMRTG\n -X --agg-name\n=\nXXXXXX\nphp artisan grapher:backend:mrtg:upgrade mv -L \n$OLDMRTG\n -X --agg-name\n=\nXXXXXX \n|\n sh\n\n\n# Migrate infrastructure graphs.\n\n\n#\n\n\n# In v3 of IXP Manager, the name of this was set by a database\n\n\n# parameter in the infrastructure table called \naggregate graph name\n.\n\n\n# You will be able to spot it in the old MRTG files where the\n\n\n# old IXP file is named something like: \nixp_peering-XXXXX-bits.log\n.\n\n\n# The \nXXXXXX\n bit is the aggregate name you need to replace in the below:\n\nphp artisan grapher:backend:mrtg:upgrade mv -L \n$OLDMRTG\n -I\nphp artisan grapher:backend:mrtg:upgrade mv -L \n$OLDMRTG\n -I \n|\n sh\n\n\n# Migrate switch graphs\n\nphp artisan grapher:backend:mrtg:upgrade mv -L \n$OLDMRTG\n -S\nphp artisan grapher:backend:mrtg:upgrade mv -L \n$OLDMRTG\n -S \n|\n sh\n\n\n# Migrate trunk graphs and configuration.\n\n\n# If you had not configured trunk graphs you can skip this. We are\n\n\n# planning to (very soon - Q2/3 2017) fully integrate this into IXP\n\n\n# Manager.\n\nphp artisan grapher:backend:mrtg:upgrade mv -L \n$OLDMRTG\n -T\nphp artisan grapher:backend:mrtg:upgrade mv -L \n$OLDMRTG\n -T \n|\n sh\nphp artisan grapher:backend:mrtg:upgrade migrate-trunk-config\n\n\n# Create member directories\n\nphp artisan grapher:backend:mrtg:upgrade mkdir -L \n$OLDMRTG\n -M\nphp artisan grapher:backend:mrtg:upgrade mkdir -L \n$OLDMRTG\n -M \n|\n sh\n\n\n# Migrate member physical interface graphs\n\nphp artisan grapher:backend:mrtg:upgrade mv -L \n$OLDMRTG\n -P\nphp artisan grapher:backend:mrtg:upgrade mv -L \n$OLDMRTG\n -P \n|\n sh\n\n\n# Migrate member LAG graphs\n\nphp artisan grapher:backend:mrtg:upgrade mv -L \n$OLDMRTG\n -Q\nphp artisan grapher:backend:mrtg:upgrade mv -L \n$OLDMRTG\n -Q \n|\n sh\n\n\n# Migrate member aggregate graphs\n\nphp artisan grapher:backend:mrtg:upgrade mv -L \n$OLDMRTG\n -C\nphp artisan grapher:backend:mrtg:upgrade mv -L \n$OLDMRTG\n -C \n|\n sh\n\n\n# Regenerate mrtg configuration\n\nphp artisan grapher:generate-configuration -B mrtg \n path/to/mrtg.conf\n\n\n# Start mrtg\n\nservice mrtg start  \n# or as appropriate for your platform\n\n\n\n\n\n\nPeer to Peer / sflow Changes\n\n\nThe previous version of IXP Manager used a script called \nsflow-graph.php\n which was installed on the sflow server to create graphs on demand. IXP Manager v4 does not use this but pulls the required RRD files directly.\n\n\nIf you have this on the same server or can expose it using NFS for example, then set the path accordingly in \n.env\n:\n\n\nGRAPHER_BACKEND_SFLOW_ROOT=\n/srv/ixpmatrix\n\n\n\n\n\n\nIf you have implemented this via a web server on the sflow server (as we typically do at INEX), then you need to expose the RRD data directory to IXP Manager using an Apache config such as:\n\n\nAlias /grapher-sflow /srv/ixpmatrix\n\n\nDirectory \n/srv/ixpmatrix\n\n    Options None\n    AllowOverride None\n    \nRequireAny\n\n            Require ip 192.0.2.0/24\n            Require ip 2001:db8::/32\n    \n/RequireAny\n\n\n/Directory\n\n\n\n\n\n\nand update \n.env\n for this with something like:\n\n\nGRAPHER_BACKEND_SFLOW_ROOT=\nhttp://www.example.com/grapher-sflow", 
            "title": "Upgrade From v3"
        }, 
        {
            "location": "/install/upgrade-v3/#upgrade-from-v3", 
            "text": "Due to the significant changes between IXP Manager v3 and v4, there is no in place upgrade process. The advised way to handle this is to install v4 in parallel and then switch over (by adjusting your DNS or Apache configuration for example) to the new v4 directory/server.  This documentation was compiled while performing an upgrade on three separate IXP Manager installations.  Before you proceed, please check the requirements listed in  the official installation instructions .  If you need help, please  contact us via the public mailing list .  If you find that this guide is insufficient, please  contribute back to this documentation .", 
            "title": "Upgrade From v3"
        }, 
        {
            "location": "/install/upgrade-v3/#overview", 
            "text": "The upgrade process is quite involved and, depending how many IXP Manager features you use, may take the best part of a day.  The general steps are:   Duplicate the Database (see below)  Install IXP Manager v4 (see below)  Initial configuration tasks (see below)  MRTG Graphing Migration (including peer to peer changes) (see below)  Route collector / servers / AS112 configuration has changed -  see here  DNS / ARPA export has changed -  see here  Examine the new layer2 addresses feature and consideration migration -  see here  If you are using Bird, set up looking glasses -  see here  Set up you cross connect / patch panel management -  see here  Read up on  the new skinning features  and see if you need to update / duplicate any skinned files.   You will note from the above that a number of features have been deprecated in favor of doing it in new ways. Our advice is to keep both v3 and v4 live in parallel and then migrate services piece meal. That way your route server configuration can continue pulling from v3 until you have set-up the v4 method. Just ensure that people do not make customer changes in either IXP Manager during this period (or, if they do, do it in both!).", 
            "title": "Overview"
        }, 
        {
            "location": "/install/upgrade-v3/#deprecations-removed-features", 
            "text": "As of IXP Manager v4 (certainly  =v4.5), the following are no longer available:   v3 methods for generating route collector. configuration  -  see here for the v4 method .  v3 methods for generating route server configuration  -  see here for the v4 method .  v3 methods for generating AS112 BGP configuration  -  see here for the v4 method .  v3 method for IRRDB updates  -  see here for the v4 method .  TACACS+ and RADIUS templates - see old details  here for TACACS+  and  here for RADIUS .  v3 method for DNS/ARPA generation  -  see here for the v4 method .", 
            "title": "Deprecations / Removed Features"
        }, 
        {
            "location": "/install/upgrade-v3/#duplicating-the-database", 
            "text": "As we're installing in parallel, we want to duplicate the database.  When granting permissions on the new database, use your existing IXP Manager database credentials for ease of configuration.  mysql -u root -pXXX -e  CREATE DATABASE ixp4 CHARACTER SET =  utf8mb4  COLLATE =  utf8mb4_unicode_ci ; \n\nmysqldump -u root -pXXX ixp  |  mysql -u root -pXXX ixp4\n\nmysql -u root -pXXX -e  GRANT ALL ON ixp4.* TO `ixp`@`localhost` IDENTIFIED BY  YYY ;  # and test: \nmysql -u ixp -pYYY -h localhost ixp4", 
            "title": "Duplicating the Database"
        }, 
        {
            "location": "/install/upgrade-v3/#install-ixp-manager", 
            "text": "This is very much a tl;dr version of  the official installation instructions  which you should review if you need additional help.  The code for IXP Manager is maintained on GitHub and the canonical repository is  inex/IXP-Manager .  Log into the server where you wish to install IXP Manager and move to the directory where you wish to install (we use  /srv/ixpmanager  here as an example and which will be referred to as  $IXPROOT  below).  Note that it should not be checked out into any web exposed directory (e.g. do not checkout to  /var/www ).  IXPROOT = /srv/ixpmanager # get the source / application \ngit clone https://github.com/inex/IXP-Manager.git  $IXPROOT  cd   $IXPROOT  # Using https://getcomposer.org/ \ncomposer.phar install # Using https://bower.io/ \nbower install # Start with the example configuration and edit.  # Read the official documentation for help.  # Ensure you configure the database.  # More notes on this follow below. \ncp .env.example .env\nphp artisan key:generate\njoe .env # File system permissions \nchown -R www-data: var/ storage/ bootstrap/cache database/Proxies", 
            "title": "Install IXP Manager"
        }, 
        {
            "location": "/install/upgrade-v3/#initial-configuration-tasks", 
            "text": "", 
            "title": "Initial Configuration Tasks"
        }, 
        {
            "location": "/install/upgrade-v3/#new-local-settings-configuration-laravel", 
            "text": "IXP Manager v4 uses a new PHP framework (Zend Framework swapped for Laravel). As such, all the older configuration options (from  application/configs/application.ini ) need to be ported to  .env .  The  php dotenv  file ( .env ) is where all the new configuration options go. These in turn are used by the configuration files under  config/ .  NB: Where possible, place local changes into  .env  rather than changing the config files as these files are under version control. See  Laravel's documentation on this  and email the mailing list for help.  Once you have worked your way through  .env , move into the  $IXPROOT/config  directory and - as appropriate for your own installation - examine each config file that ends in  .dist . If you use / need any features in these files, copy then such as:  cd   $IXPROOT /config\ncp xxxx.php.dist xxxx.php  Then edit the resultant  .php  file (or, better, where  config()  options exist, add them to  .env ).  These  .dist  files represent v3 funtionality that has not yet been fully ported to v4/Laravel.", 
            "title": "New Local Settings / Configuration (Laravel)"
        }, 
        {
            "location": "/install/upgrade-v3/#update-the-database-schema", 
            "text": "There's about 50 schema changed between the end of v3 and v4.4.  View the required changes with:  ./artisan doctrine:schema:update --sql  And apply with:  ./artisan doctrine:schema:update --force \n\n Note that this may take a few minutes if you have a lot of data such as BGP session data.", 
            "title": "Update the Database Schema"
        }, 
        {
            "location": "/install/upgrade-v3/#stage-one-complete", 
            "text": "You should be able to point Apache / your web server at the new IXP Manager installation and log in.", 
            "title": "Stage One Complete"
        }, 
        {
            "location": "/install/upgrade-v3/#mrtg-graphing-migration", 
            "text": "We've implemented a new graphing backend called  Grapher . One of the changes is that the graphing directory structure and file-naming conventions have changed. Primarily, we've replaced non-static handles (such as database fields like  customer.shortname ,  physicalinterface.monitorindex  and  switcher.name  with immutable primary keys).  As such, you need to both rename the statistics directory structure and regenerate the configuration.  It is strongly recommended you copy your existing files and do this in parallel or, at least keep a backup.  Also, stop the MRTG daemon before starting.", 
            "title": "MRTG Graphing Migration"
        }, 
        {
            "location": "/install/upgrade-v3/#performing-the-migration", 
            "text": "First, you'll need to update your local configuration in  .env  by setting something like:  GRAPHER_BACKENDS= mrtg \nGRAPHER_BACKEND_MRTG_LOGDIR= /path/to/new/mrtg/data \nGRAPHER_BACKEND_MRTG_WORKDIR= /path/to/new/mrtg/data \nGRAPHER_CACHE_ENABLED=true  See the  Grapher  documentation for full details of what these mean.  You'll then need to migrate all your MRTG files to the new naming scheme. Run the commands below twice. Once to verify the output and a second time piped to sh ( | sh ) to actually execute the commands.  # set a variable for what will become the  old  files for convenience  OLDMRTG = /srv/old-mrtg # position ourselves in the IXP Manager root directory  cd   $IXPROOT  # stop mrtg \nservice mrtg stop   # or as appropriate for your platform  # Migrate IXP graphs.  #  # In v3 of IXP Manager, the name of this was set by a database  # parameter in the IXP table called  aggregate graph name .  # You will be able to spot it in the old MRTG files where the  # old IXP file is named something like:  ixp_peering-XXXXX-bits.log .  # The  XXXXXX  bit is the aggregate name you need to replace in the below: \nphp artisan grapher:backend:mrtg:upgrade mv -L  $OLDMRTG  -X --agg-name = XXXXXX\nphp artisan grapher:backend:mrtg:upgrade mv -L  $OLDMRTG  -X --agg-name = XXXXXX  |  sh # Migrate infrastructure graphs.  #  # In v3 of IXP Manager, the name of this was set by a database  # parameter in the infrastructure table called  aggregate graph name .  # You will be able to spot it in the old MRTG files where the  # old IXP file is named something like:  ixp_peering-XXXXX-bits.log .  # The  XXXXXX  bit is the aggregate name you need to replace in the below: \nphp artisan grapher:backend:mrtg:upgrade mv -L  $OLDMRTG  -I\nphp artisan grapher:backend:mrtg:upgrade mv -L  $OLDMRTG  -I  |  sh # Migrate switch graphs \nphp artisan grapher:backend:mrtg:upgrade mv -L  $OLDMRTG  -S\nphp artisan grapher:backend:mrtg:upgrade mv -L  $OLDMRTG  -S  |  sh # Migrate trunk graphs and configuration.  # If you had not configured trunk graphs you can skip this. We are  # planning to (very soon - Q2/3 2017) fully integrate this into IXP  # Manager. \nphp artisan grapher:backend:mrtg:upgrade mv -L  $OLDMRTG  -T\nphp artisan grapher:backend:mrtg:upgrade mv -L  $OLDMRTG  -T  |  sh\nphp artisan grapher:backend:mrtg:upgrade migrate-trunk-config # Create member directories \nphp artisan grapher:backend:mrtg:upgrade mkdir -L  $OLDMRTG  -M\nphp artisan grapher:backend:mrtg:upgrade mkdir -L  $OLDMRTG  -M  |  sh # Migrate member physical interface graphs \nphp artisan grapher:backend:mrtg:upgrade mv -L  $OLDMRTG  -P\nphp artisan grapher:backend:mrtg:upgrade mv -L  $OLDMRTG  -P  |  sh # Migrate member LAG graphs \nphp artisan grapher:backend:mrtg:upgrade mv -L  $OLDMRTG  -Q\nphp artisan grapher:backend:mrtg:upgrade mv -L  $OLDMRTG  -Q  |  sh # Migrate member aggregate graphs \nphp artisan grapher:backend:mrtg:upgrade mv -L  $OLDMRTG  -C\nphp artisan grapher:backend:mrtg:upgrade mv -L  $OLDMRTG  -C  |  sh # Regenerate mrtg configuration \nphp artisan grapher:generate-configuration -B mrtg   path/to/mrtg.conf # Start mrtg \nservice mrtg start   # or as appropriate for your platform", 
            "title": "Performing the Migration"
        }, 
        {
            "location": "/install/upgrade-v3/#peer-to-peer-sflow-changes", 
            "text": "The previous version of IXP Manager used a script called  sflow-graph.php  which was installed on the sflow server to create graphs on demand. IXP Manager v4 does not use this but pulls the required RRD files directly.  If you have this on the same server or can expose it using NFS for example, then set the path accordingly in  .env :  GRAPHER_BACKEND_SFLOW_ROOT= /srv/ixpmatrix   If you have implemented this via a web server on the sflow server (as we typically do at INEX), then you need to expose the RRD data directory to IXP Manager using an Apache config such as:  Alias /grapher-sflow /srv/ixpmatrix Directory  /srv/ixpmatrix \n    Options None\n    AllowOverride None\n     RequireAny \n            Require ip 192.0.2.0/24\n            Require ip 2001:db8::/32\n     /RequireAny  /Directory   and update  .env  for this with something like:  GRAPHER_BACKEND_SFLOW_ROOT= http://www.example.com/grapher-sflow", 
            "title": "Peer to Peer / sflow Changes"
        }, 
        {
            "location": "/features/api/", 
            "text": "API\n\n\nIXP Manager\n has a number of API endpoints which are documented in the appropriate places throughout the documentation.\n\n\nPlease find details below about authenticating for API access to secured functions.\n\n\nCreating an API Key\n\n\nWhen logged into \nIXP Manager\n, create an API as follows:\n\n\n\n\nSelect \nMy Account\n on the right hand side of the top menu.\n\n\nSelect \nAPI Keys\n from the \nMy Account\n menu.\n\n\nClick the plus / addition icon on the top right of the resultant \nAPI Keys\n page.\n\n\n\n\nTreat your API key as a password and do not copy the below URLs into public websites and other public forums.\n\n\nAPI Authentication\n\n\nThere are two ways to use your API key to authenticate to IXP Manager.\n\n\nYou can test these using the API test endpoint at \napi/v4/test\n. For example:\n\n\nhttps://ixp.example.com/api/v4/test\n\n\n\n\n\nThe plaintext response will also indicate if you are authenticated or not (which can be via existing session or API key).\n\n\n1. HTTP Header Parameter\n\n\nYou can pass your API key in the HTTP request as a request header parameter called \nX-IXP-Manager-API-Key\n. For example:\n\n\ncurl -X GET -H \nX-IXP-Manager-API-Key: my-api-key\n https://ixp.example.com/api/v4/test\n\n\n\n\n\n2. As a URL Parameter\n\n\nThis is a legacy method that is still supported. You can tack your key on as follows:\n\n\nhttps://ixp.example.com/api/v4/test?apikey=my-api-key", 
            "title": "API"
        }, 
        {
            "location": "/features/api/#api", 
            "text": "IXP Manager  has a number of API endpoints which are documented in the appropriate places throughout the documentation.  Please find details below about authenticating for API access to secured functions.", 
            "title": "API"
        }, 
        {
            "location": "/features/api/#creating-an-api-key", 
            "text": "When logged into  IXP Manager , create an API as follows:   Select  My Account  on the right hand side of the top menu.  Select  API Keys  from the  My Account  menu.  Click the plus / addition icon on the top right of the resultant  API Keys  page.   Treat your API key as a password and do not copy the below URLs into public websites and other public forums.", 
            "title": "Creating an API Key"
        }, 
        {
            "location": "/features/api/#api-authentication", 
            "text": "There are two ways to use your API key to authenticate to IXP Manager.  You can test these using the API test endpoint at  api/v4/test . For example:  https://ixp.example.com/api/v4/test  The plaintext response will also indicate if you are authenticated or not (which can be via existing session or API key).", 
            "title": "API Authentication"
        }, 
        {
            "location": "/features/api/#1-http-header-parameter", 
            "text": "You can pass your API key in the HTTP request as a request header parameter called  X-IXP-Manager-API-Key . For example:  curl -X GET -H  X-IXP-Manager-API-Key: my-api-key  https://ixp.example.com/api/v4/test", 
            "title": "1. HTTP Header Parameter"
        }, 
        {
            "location": "/features/api/#2-as-a-url-parameter", 
            "text": "This is a legacy method that is still supported. You can tack your key on as follows:  https://ixp.example.com/api/v4/test?apikey=my-api-key", 
            "title": "2. As a URL Parameter"
        }, 
        {
            "location": "/features/as112/", 
            "text": "AS112 Service\n\n\n\n\nPrerequisite Reading:\n Ensure you first familiarize yourself with \nthe generic documentation on managing and generating router configurations here\n.\n\n\n\n\nAS112\n is a service which provides anycast reverse DNS lookup for several prefixes, namely:\n\n\n\n\n10.0.0.0/8\n\n\n192.168.0.0/16\n\n\n172.16.0.0/12\n\n\n169.254.0.0/16\n\n\n\n\nBecause these IP addresses are widely used for private networking, many end-user systems are configured to perform reverse DNS lookups for these address ranges.  DNS lookups for these ranges should always be null-answered quickly, in order to make sure that DNS retransmits don\u2019t occur (thereby overloading local DNS resolvers), and to prevent end-user systems from hanging due to DNS lookups.\n\n\nAS112 services are provided around the world by a group of volunteers and, very often, by IXP operators for the benefit of their members.\n\n\nINEX\n has always provided an AS112 service to our members on all peering LANs and so it is an integral part of \nIXP Manager\n. You can read all about INEX's implementation at https://www.inex.ie/technical/as112-service/ including graphs for the service. Feel free to use our test and examples from that page for your own IXP.\n\n\nBuilding an AS112 Service\n\n\nYou can find instructions for building an AS112 service in \nrfc7534\n. You should also add AS112 redirection using DNAME functionality as per \nrfc7535\n.\n\n\nYou will also find a lot more information and how-tos on the official website at: \nhttps://www.as112.net/\n.\n\n\nFollow these instructions in every way to build the AS112 service on a (virtual) machine with an appropriate DNS server - \nexcept skip the installation and configuration of the BGP daemon\n. When using IXP Manager, you will need to use Bird for this and IXP Manager will create the configuration.\n\n\nManaging Your AS112 Service from IXP Manager\n\n\nAS112 is disabled by default in IXP Manager. This really just means UI elements are hidden. To enable these, set the following in your \n.env\n file:\n\n\nIXP_AS112_UI_ACTIVE=true\n\n\n\n\n\nThis will add UI elements including:\n\n\n\n\nan \nAS112 Client\n checkbox on VLAN interface forms. Checking this toggles a database field to indicate if the customer's VLAN interface should have the AS112 service enabled.\n\n\nan indication as to whether the user has AS112 services enabled on various overview screens.\n\n\n\n\nEnabling the AS112 service simply indicates if a BGP peering session should be created in the AS112 BGP configuration when downloading the AS112 router's BGP configuration from IXP Manager.\n\n\nCreating the Pro-Bono AS112 Customer\n\n\nYou need to add the AS112 service as a pro-bono member of your IXP in IXP Manager. Here's INEX's example:\n\n\n\n\nYou then need to create an interface for the AS112 service on each peering LAN where the service will be offered. Here again is INEX's example from our peering LAN1 in Dublin:\n\n\n\n\nNote that historically INEX has not used MD5 on our AS112 service. This is because the service dates from over 20 years ago at INEX when MD5 support was not available. There is no reason not to use MD5 on the service if you wish.\n\n\nGenerating the Bird Configuration\n\n\nPlease see the \nrouter configuration generation\n for this.\n\n\nFor your AS112 server, we have a \nsample script(s)\n for pulling and updating the configuration from IXP Manager. We typically put this in an hourly cron.\n\n\nOther Notes\n\n\nAt INEX, we typically have our AS112 service peer with our route servers.\n\n\nThis will happen automatically if you check the \nRoute Server Client\n on the AS112 VLAN interface configuration (see above screen shot) and also check the \nAS112 Client\n checkbox on the VLAN interfaces of your route servers in IXP Manager. \nNote that in the same way as you create an AS112 \npro-bono\n customer, you should also have a dedicated route server \ninternal\n customer.", 
            "title": "AS112"
        }, 
        {
            "location": "/features/as112/#as112-service", 
            "text": "Prerequisite Reading:  Ensure you first familiarize yourself with  the generic documentation on managing and generating router configurations here .   AS112  is a service which provides anycast reverse DNS lookup for several prefixes, namely:   10.0.0.0/8  192.168.0.0/16  172.16.0.0/12  169.254.0.0/16   Because these IP addresses are widely used for private networking, many end-user systems are configured to perform reverse DNS lookups for these address ranges.  DNS lookups for these ranges should always be null-answered quickly, in order to make sure that DNS retransmits don\u2019t occur (thereby overloading local DNS resolvers), and to prevent end-user systems from hanging due to DNS lookups.  AS112 services are provided around the world by a group of volunteers and, very often, by IXP operators for the benefit of their members.  INEX  has always provided an AS112 service to our members on all peering LANs and so it is an integral part of  IXP Manager . You can read all about INEX's implementation at https://www.inex.ie/technical/as112-service/ including graphs for the service. Feel free to use our test and examples from that page for your own IXP.", 
            "title": "AS112 Service"
        }, 
        {
            "location": "/features/as112/#building-an-as112-service", 
            "text": "You can find instructions for building an AS112 service in  rfc7534 . You should also add AS112 redirection using DNAME functionality as per  rfc7535 .  You will also find a lot more information and how-tos on the official website at:  https://www.as112.net/ .  Follow these instructions in every way to build the AS112 service on a (virtual) machine with an appropriate DNS server -  except skip the installation and configuration of the BGP daemon . When using IXP Manager, you will need to use Bird for this and IXP Manager will create the configuration.", 
            "title": "Building an AS112 Service"
        }, 
        {
            "location": "/features/as112/#managing-your-as112-service-from-ixp-manager", 
            "text": "AS112 is disabled by default in IXP Manager. This really just means UI elements are hidden. To enable these, set the following in your  .env  file:  IXP_AS112_UI_ACTIVE=true  This will add UI elements including:   an  AS112 Client  checkbox on VLAN interface forms. Checking this toggles a database field to indicate if the customer's VLAN interface should have the AS112 service enabled.  an indication as to whether the user has AS112 services enabled on various overview screens.   Enabling the AS112 service simply indicates if a BGP peering session should be created in the AS112 BGP configuration when downloading the AS112 router's BGP configuration from IXP Manager.", 
            "title": "Managing Your AS112 Service from IXP Manager"
        }, 
        {
            "location": "/features/as112/#creating-the-pro-bono-as112-customer", 
            "text": "You need to add the AS112 service as a pro-bono member of your IXP in IXP Manager. Here's INEX's example:   You then need to create an interface for the AS112 service on each peering LAN where the service will be offered. Here again is INEX's example from our peering LAN1 in Dublin:   Note that historically INEX has not used MD5 on our AS112 service. This is because the service dates from over 20 years ago at INEX when MD5 support was not available. There is no reason not to use MD5 on the service if you wish.", 
            "title": "Creating the Pro-Bono AS112 Customer"
        }, 
        {
            "location": "/features/as112/#generating-the-bird-configuration", 
            "text": "Please see the  router configuration generation  for this.  For your AS112 server, we have a  sample script(s)  for pulling and updating the configuration from IXP Manager. We typically put this in an hourly cron.", 
            "title": "Generating the Bird Configuration"
        }, 
        {
            "location": "/features/as112/#other-notes", 
            "text": "At INEX, we typically have our AS112 service peer with our route servers.  This will happen automatically if you check the  Route Server Client  on the AS112 VLAN interface configuration (see above screen shot) and also check the  AS112 Client  checkbox on the VLAN interfaces of your route servers in IXP Manager.  Note that in the same way as you create an AS112  pro-bono  customer, you should also have a dedicated route server  internal  customer.", 
            "title": "Other Notes"
        }, 
        {
            "location": "/features/contact-groups/", 
            "text": "Contact Groups\n\n\nContacts can now be assigned to multiple arbitrary groups.\n\n\nActivating the Configuration\n\n\nYour database will already be set-up via the database seeds during installation.\n\n\nTo activate this feature, you just need to create the configuration file. From the root directory of IXP Manager just::\n\n\ncp config/contact_group.php.dist config/contact_group.php\n\n\n\n\n\nCreating / Editing / Deleting Groups\n\n\nA group is defined by:\n\n\n\n\na name (e.g. beer);\n\n\na type (e.g. Likes); and\n\n\na description (e.g. Contacts in this group like to drink beer).\n\n\n\n\nYou define the group types in \nconfig/contact_group.php\n.\n\n\nIn these examples, \nROLE\n will be entered in the database column and \nRole\n will be displayed in the interface.\n\n\nGroups can then be added / edited / deleted via \nhttps://www.example/com/ixp-manager/contact-group\n. This can be reached by clicking \nContacts\n and then \nContact Groups\n in the left menu.\n\n\nAssigning Contacts to Groups\n\n\nAssigning contacts to groups is done in the contact add / edit page.\n\n\nExporting Contact Groups\n\n\nContact groups can be exported using the \nixptool.php\n command, for example::\n\nbin/ixptool.php -a cli.cli-export-group -p type=ROLE,format=csv,cid=1\n\n\n\n\n\nwhere the possible comma separated parameters are:\n\n\n\n\ntype=XXX\n: Contact group type (e.g. ROLE); or\n\n\n\n\nname=XXX\n: Contact group name (e.g. beer).\n\n\n\n\n\n\nformat=XXX\n: Output format - one of json (default) or csv\n\n\n\n\nsn\n: Customer shortname to limit results to; or\n\n\ncid\n: Customer id to limit results to.\n\n\n\n\nSpecial Group: \nRoles\n\n\nThe default sample configuration file (\nconfig/contact_group.php\n) and the database seeds create a \nROLE\n group type populated with groups \nAdmin\n, \nBilling\n, \nTechnical\n and \nMarketing\n. There is a dedicated form element when editing contacts for any groups defined in the Role type.\n\n\nIf the role type is removed from the configuration, the form element for the contact's roles will not be shown.", 
            "title": "Contact Groups"
        }, 
        {
            "location": "/features/contact-groups/#contact-groups", 
            "text": "Contacts can now be assigned to multiple arbitrary groups.", 
            "title": "Contact Groups"
        }, 
        {
            "location": "/features/contact-groups/#activating-the-configuration", 
            "text": "Your database will already be set-up via the database seeds during installation.  To activate this feature, you just need to create the configuration file. From the root directory of IXP Manager just::  cp config/contact_group.php.dist config/contact_group.php", 
            "title": "Activating the Configuration"
        }, 
        {
            "location": "/features/contact-groups/#creating-editing-deleting-groups", 
            "text": "A group is defined by:   a name (e.g. beer);  a type (e.g. Likes); and  a description (e.g. Contacts in this group like to drink beer).   You define the group types in  config/contact_group.php .  In these examples,  ROLE  will be entered in the database column and  Role  will be displayed in the interface.  Groups can then be added / edited / deleted via  https://www.example/com/ixp-manager/contact-group . This can be reached by clicking  Contacts  and then  Contact Groups  in the left menu.", 
            "title": "Creating / Editing / Deleting Groups"
        }, 
        {
            "location": "/features/contact-groups/#assigning-contacts-to-groups", 
            "text": "Assigning contacts to groups is done in the contact add / edit page.", 
            "title": "Assigning Contacts to Groups"
        }, 
        {
            "location": "/features/contact-groups/#exporting-contact-groups", 
            "text": "Contact groups can be exported using the  ixptool.php  command, for example:: bin/ixptool.php -a cli.cli-export-group -p type=ROLE,format=csv,cid=1   where the possible comma separated parameters are:   type=XXX : Contact group type (e.g. ROLE); or   name=XXX : Contact group name (e.g. beer).    format=XXX : Output format - one of json (default) or csv   sn : Customer shortname to limit results to; or  cid : Customer id to limit results to.", 
            "title": "Exporting Contact Groups"
        }, 
        {
            "location": "/features/contact-groups/#special-group-roles", 
            "text": "The default sample configuration file ( config/contact_group.php ) and the database seeds create a  ROLE  group type populated with groups  Admin ,  Billing ,  Technical  and  Marketing . There is a dedicated form element when editing contacts for any groups defined in the Role type.  If the role type is removed from the configuration, the form element for the contact's roles will not be shown.", 
            "title": "Special Group: Roles"
        }, 
        {
            "location": "/features/patch-panels/", 
            "text": "Patch Panels / Cross Connects\n\n\nOne of the more difficult things for an IXP to manage is the sheer volume of patch panels / cross connects they need to manage. We have approached the issue a number of times in IXP Manger but abandoned the attempt every time. Typically our original solutions were over-engineered where all we really needed was something which could replace a spreadsheet per panel.\n\n\nWe believe we have now developed a feature complete and useful means of managing patch panels and associated cross connects.\n\n\nFeatures\n\n\n\n\nAdd / edit patch panels  (which includes cable and connector types).\n\n\nList associated patch panel ports which includes:\n\n\ntheir state (such as available / prewired, awaiting cross connect, connected, awaiting cease, reserved, broken).\n\n\nassociated customer and/or switchport.\n\n\nco-location provider's circuit reference.\n\n\ninternal ticket references.\n\n\nTransition ports from available / prewired to awaiting x-connect to connected to awaiting cease to ceased and then available again.\n\n\nCustomer view of their cross connects.\n\n\nPublic (visible to customers) and private notes per cross connect.\n\n\nAttach public and private files to cross connects (such as test results, completion documents, order forms, etc).\n\n\nMaintain complete history of a patch panel port.\n\n\nGenerate and email LoAs (as PDF) with a URL verification function for co-location providers.\n\n\nGenerate emails for connection and cease requests as well as an email providing full customer view of a cross connect.\n\n\nTypically fibre ports are \nduplex\n ports but there is a growing use of BiDi optics meaning simplex ports. Our implementation treats all ports as simplex but you can mark it as duplex and set its partner port.\n\n\n\n\nDuplex Fibre Ports\n\n\nWe suggest adding fibre ports as two ports per duplex port. I.e. if your patch panel has 12 duplex ports, enter this as 24 ports. When allocating ports later, you can set it as a duplex port and select its \npartner / slave port\n. This will future proof your patch panels for the growing use of bidi optics and other simplex based xWDM fibre solutions.\n\n\nFrom our experience, duplex fibre ports are often identified as their individual strands. For example, \nduplex port 5\n would be referenced as \nF9/F10\n.\n\n\nYour mileage may vary on this but we need to allow this flexibility to cover both use-cases. You always have options however:\n\n\n\n\nyou can change the presentation of how these ports are referenced externally by \nskinning\n the templates.\n\n\nyou have the option to edit emails before they are sent to also present this as you wish.\n\n\nyou can chose to treat duplex ports as single ports rather than doubling them up.\n\n\nwhen you have duplex ports on a patch panel, IXP Manager will provide a duplex view by default with a CSS-based toggle to reveal the typical partner ports.\n\n\nif you think IXP Manager can make this easier, please talk to us. \nBut we cannot cover every use case programatically. We've opted to allow flexibility rather than dictate a particular format.\n\n\n\n\nAdding a Patch Panel\n\n\nThe following image shows a typical \nadd a new patch panel\n form (as of v4.3). You'll note that clicking \nHelp\n provides detailed context aware help messages.\n\n\n\n\nMost of this is self-explanatory but:\n\n\n\n\nBy default, we set the \nColocation Reference\n to the \nPatch Panel Name\n. We are not sure it's a good idea for IXPs to create a second name different to the co-location provider's but this option is available to you. \nSeriously, think about what you are doing here - more references means more confusion!\n The cabinet and cable type is displayed in the list of patch panels so even with obscure data centre references, it should be easy to find what you need.\n\n\nLocation Notes\n: Data centre / co-location providers do a lot of weird, wonderful and strange things! They provide multiple references for a single patch panel (IXP cabinet, MMR, etc.), they get taken over and re-reference everything or even provide no discernable reference. The field is a freetext field that will be included (and parsed as Markdown) in all emails generated by IXP Manager to help you help them identify a patch panel!\n\n\n\n\nIn addition to that, we will also use a cabinets \nU's are counted from top/bottom\n, and a patch panel's \nU position\n and \nmounted at front/rear\n to also create a location description.\n\n When setting the \nNumber of Ports\n, ensure you count duplex fibre ports as \ntwo ports\n. So 12 duplex fibre ports would be entered as 24. When editing a patch panel, this input field represents the number of additional ports you want to add to a patch panel and thus defaults to 0 in that situation.\n\n \nPort Name Prefix\n: This is an optional field intended for use on fibre patch panels. As an example, you may wish to prefix individual fibre strands in a duplex port with F which would mean the name of a duplex port would be displayed as F1/F2.\n* \nChargeable\n: Usually IXPs request their members to come to them and bear the costs of that. However, sometimes a co-location facility may charge the IXP for a half circuit or the IXP may need order and pay for the connection. Setting this only sets the default option when allocating ports to members later. The options are Yes / No / Half / Other.\n\n\nFiltering Patch Panel Ports\n\n\nQuite often, all you are looking for is a free in a particular location (data centre) or cabinet of a particular cable type (UTP / SMF / etc.).\n\n\nIXP Manager makes this easy from the \nPatch Panels\n page via the top right button labeled \nFilter Options\n. When clicked, this yields an advanced search as follows:\n\n\n\n\nCabinets auto-fills when you chose (or change) a location.\n\n\nPatch Panel Port States\n\n\nA patch panel port can have the following states:\n\n\n\n\nAvailable\n: The port is free and available for use.\n\n\nPrewired\n: This is equivalent to available but it means the port is prewired to a given switchport (you set the port when setting the prewired status). This is useful for IXPs that prewire a bunch of ports to avoid remote hands costs / data centre visits.\n\n\nAwaiting Xconnect\n: Port has been assigned to a member and we are awaiting the co-location provider to install the cross connect. In this state, context aware actions such as emailing connection requests, LoA generation and \nSet Connected\n are all available.\n\n\nConnected\n: Connected and in use.\n\n\nAwaiting Cease\n: This connection is no longer required and we are awaiting the end user / co-location provider to cease the connection.\n\n\nCeased\n: You will never see a ceased state. When a cross connect is marked as ceased, it's current state is archived (for history, include files) and the port is reset to \nAvailable\n. We do not revert to \nPrewired\n but an information message is shown to the user to hint this.\n\n\nReserved\n: Useful to mark particular ports as \noff limits\n for whatever reason.\n\n\nBroken\n\n\nOther\n\n\n\n\nFree / Available Ports\n\n\nIXP Manager will colour ports in the \nAvailable\n, \nPrewired\n and \nAwaiting Cease\n states are green allowing an easy visual indication of available ports.\n\n\nPatch Panel Port Lifecycle\n\n\nPatch panel ports start as either \navailable\n or \nprewired\n. The context menu in these states is:\n\n\n\n\n\n\nUnset Prewired\n is available as this port has a \nPrewired\n status. Clicking this reverts it to plain \nAvailable\n and disassociates it from the prewired port.\n\n\nEdit Note...\n is always available and provides a pop up to edit public and private notes associated with the port (current lifecycle - ceased ports have their notes at that time archived and cleared).\n\n\n\n\nThe main lifecycle option here is \nAllocate\n:\n\n\n\n\n\n\n\n\nDescription\n: A one line short description to be shown in the list of patch panel ports. Just enough to help explain the ports purpose. Detailed information should be placed in the notes section. Can also be used to explain a reserved / broken / other port. Note that this is parsed as Markdown. \nNB:\n A description is discouraged for customer ports connected to a switch. The customer name and switch port are the description.\n\n\n\n\n\n\nColocation Circuit Reference\n: this is the reference provided by the colocation provider to uniquely reference this cross connect.\n\n\n\n\n\n\nTicket Reference(s)\n: This is a free text field to be used by IXPs as they wish. The intended use is to enter helpdesk ticket references that relate to this cross connect order.\n\n\n\n\n\n\nDuplex connection?\n: Clicking this allows you to select the slave port for duplex connections.\n\n\n\n\n\n\nSwitch / Switch Port\n / \nCustomer\n: You have a number of options when allocating a port:\n\n\n\n\n\n\nIf the port is pre-wired then the switch / switch port will be set here.\n\n\n\n\nIf you chose a switch port which has been allocated to a customer, then this patch panel port will also be allocated to that customer. The backend logic will detect if this is the case and update the customer field.\n\n\nConversely, if you chose a customer first, the switch / switch port dropdowns will be populated with only that customer's assigned ports.\n\n\nSometimes you will get cross connects that are not intended to be connected to peering switches (e.g. connections to co-located customer equipment, IXP metro connections, etc.). In these cases, just select the customer (and if it's the IXP itself, select the IXP customer) and leave switch / switch port unselected.\n\n\n\n\nIf you need to reset these fields, just click either of the Reset button.\n\n\n\n\n\n\nPatch Panel Port Status\n: when allocating a port, this will allow you to set the state to \nAwaiting Xconnect\n or \nConnected\n.\n\n\n\n\n\n\nPhysical Interface Status\n: this is not depicted above. If the selected switch port has already been assigned to a customer by way of a physical interface, you will have the option to update this here also.\n\n\n\n\n\n\nPublic\n and \nPrivate Notes\n: Public notes are available to the customer. Both fields are interpreted as Markdown.\n\n\n\n\n\n\nChargeable\n: Usually IXPs request their members to come to them and bear the costs of that. However, sometimes a co-location facility may charge the IXP for a half circuit or the IXP may need order and pay for the connection. The options are Yes / No / Half / Other. How individual IXPs use this is up to them.\n\n\n\n\n\n\nInternal Use\n: Marks the port as used by the IXP itself. E.g. metro connections.\n\n\n\n\n\n\nOwned By\n: Useful indication for billing and cease requests. Should represent the contractural owner of the cross connect. One of: Customer, IXP, Service Provider, Data Centre, Other. \nService Provider\n might be a metro provider where they ordered the cross connect.\n\n\n\n\n\n\nOnce a port is allocated, it enters the \nAwaiting XConnect\n / \nConnected\n state and there are additional context menu options available:\n\n\n\n\nThe three lifecycle actions are:\n\n\n\n\nSet Connected\n: updates the status (and allows you to add public/private notes). You next action after this should be \nEmail - Connect\n.\n\n\nSet Awaiting Cease\n: mark the port and pending disconnection. Your next action after this should be \nEmail - Cease\n.\n\n\nSet Ceased\n: this is a \ntransitive state\n in that it doesn't \nstick\n. When you mark a patch panel as ceased, the existing details (including files and notes) are archived as part of the port's history and then port is then cleared and made available again.\n\n\n\n\nFile Attachments\n\n\nOver the lifetime of a cross connect - and particularly when it is being ordered, there may be files exchanges between you and your customers or the colocation provider. These can be added to the patch panel port via the \nAttach File...\n option.\n\n\nThe dialog will dynamically determine the maximum file upload size based on your PHP settings. To alter this, change the following in your server's appropriate \nphp.ini\n:\n\n\n; Maximum allowed size for uploaded files.\nupload_max_filesize = 40M\n\n; Must be greater than or equal to upload_max_filesize\npost_max_size = 40M\n\n\n\n\n\nPlease search the internet for further help as this is outside the scope of IXP Manager documentation.\n\n\nThe following features apply to file attachments:\n\n\n\n\nthey are archived along with the port history when a cross connect is ceased.\n\n\nthey are stored under \n$IXPROOT/storage/files/ppp\n.\n\n\ntwo files of the same name cannot be uploaded for a single patch panel port.\n\n\nthey can be marked as public or private:\n\n\npublic files are accessible to the customer through their own dashboard.\n\n\npublic files are attached to the \nEmail - Information\n email.\n\n\n\n\nLoA Generation\n\n\nMany co-location providers will not accept a cross connect order without a LoA \n(Letter of Agency/Authority)\n from the party to whom the cross connect is to be delivered (typically the IXP).\n\n\nIXP Manager will generate a PDF LoA to download or include in the emails it generates for you. Here is an example:\n\n\n\n\nYou will need to \nskin\n this yourself to change the legalese, address and contact details and potentially add a logo. See the version INEX uses \nhere\n (which includes and embedded PNG logo).\n\n\nNote that \nDompdf\n is used to turn the HTML template into a PDF and it has some restrictions.\n\n\nYou have two options for generating LoAs (without having IXP Manager email them):\n\n\n\n\nDownload PDF\n: downloads the PDF via your browser.\n\n\nView PDF\n: displays the PDF LoA in your browser (where browser supports it).\n\n\n\n\nLoA Verification\n\n\nThe stock LoA template (and INEX's version) includes a link that allows co-location browsers to click on to verify its veracity.\n\n\nOn successful verification, the end user sees:\n\n\n\n\nEmail Generation\n\n\nIXP Manager allows you to send four emails related to patch panels / cross connects (port status dependent). These are listed below. The Email editor looks as follows:\n\n\n\n\nNote that:\n\n\n\n\nthe option to attach a PDF LoA is a checkbox.\n\n\nthe email is written in Markdown with a preview available. The email is sent as both HTML (from the Markdown) and the plaintext version.\n\n\n\n\nThe four email templates available are:\n\n\n\n\nEmail - Connect\n: Email the customer a request to order a cross connect to the given demarcation points. A LoA is attached as a PDF by default unless you uncheck the box in the email editor.\n\n\nEmail - Cease\n: Email the customer a request to cease a cross connect.\n\n\nEmail - Information\n: Email the customer all details on file about a cross connect. We often get requests for this at INEX and this simplifies the process. The generated email includes:\n\n\nthe standard details regarding port and co-location reference;\n\n\npublic notes;\n\n\npublic files as attachments.\n\n\nEmail - LoA\n: Email a LoA to the customer as attached as a PDF. This is similar to \nEmail - Connect\n but it is more reflective of a typical response to a second request for a LoA.\n\n\n\n\nAll email templates can be \nskinned\n for your own needs. See INEX's example skins \nhere\n.\n\n\nViewing Patch Panel Details and Archives\n\n\nEach patch panel port row has the following button:\n\n\n\n\nThe number in the badge indicates how many historical records are available.\n\n\nClicking on the button yields the following view screen:\n\n\n\n\nDevelopment History\n\n\nThe Patch Panels functionality was developed during Q1 2017 and added in March 2017. This was made possible from sponsorship which enabled us to hire a new full time developer. We are especially grateful to our sponsors - \nplease see them here\n.", 
            "title": "Cross Connects"
        }, 
        {
            "location": "/features/patch-panels/#patch-panels-cross-connects", 
            "text": "One of the more difficult things for an IXP to manage is the sheer volume of patch panels / cross connects they need to manage. We have approached the issue a number of times in IXP Manger but abandoned the attempt every time. Typically our original solutions were over-engineered where all we really needed was something which could replace a spreadsheet per panel.  We believe we have now developed a feature complete and useful means of managing patch panels and associated cross connects.", 
            "title": "Patch Panels / Cross Connects"
        }, 
        {
            "location": "/features/patch-panels/#features", 
            "text": "Add / edit patch panels  (which includes cable and connector types).  List associated patch panel ports which includes:  their state (such as available / prewired, awaiting cross connect, connected, awaiting cease, reserved, broken).  associated customer and/or switchport.  co-location provider's circuit reference.  internal ticket references.  Transition ports from available / prewired to awaiting x-connect to connected to awaiting cease to ceased and then available again.  Customer view of their cross connects.  Public (visible to customers) and private notes per cross connect.  Attach public and private files to cross connects (such as test results, completion documents, order forms, etc).  Maintain complete history of a patch panel port.  Generate and email LoAs (as PDF) with a URL verification function for co-location providers.  Generate emails for connection and cease requests as well as an email providing full customer view of a cross connect.  Typically fibre ports are  duplex  ports but there is a growing use of BiDi optics meaning simplex ports. Our implementation treats all ports as simplex but you can mark it as duplex and set its partner port.", 
            "title": "Features"
        }, 
        {
            "location": "/features/patch-panels/#duplex-fibre-ports", 
            "text": "We suggest adding fibre ports as two ports per duplex port. I.e. if your patch panel has 12 duplex ports, enter this as 24 ports. When allocating ports later, you can set it as a duplex port and select its  partner / slave port . This will future proof your patch panels for the growing use of bidi optics and other simplex based xWDM fibre solutions.  From our experience, duplex fibre ports are often identified as their individual strands. For example,  duplex port 5  would be referenced as  F9/F10 .  Your mileage may vary on this but we need to allow this flexibility to cover both use-cases. You always have options however:   you can change the presentation of how these ports are referenced externally by  skinning  the templates.  you have the option to edit emails before they are sent to also present this as you wish.  you can chose to treat duplex ports as single ports rather than doubling them up.  when you have duplex ports on a patch panel, IXP Manager will provide a duplex view by default with a CSS-based toggle to reveal the typical partner ports.  if you think IXP Manager can make this easier, please talk to us.  But we cannot cover every use case programatically. We've opted to allow flexibility rather than dictate a particular format.", 
            "title": "Duplex Fibre Ports"
        }, 
        {
            "location": "/features/patch-panels/#adding-a-patch-panel", 
            "text": "The following image shows a typical  add a new patch panel  form (as of v4.3). You'll note that clicking  Help  provides detailed context aware help messages.   Most of this is self-explanatory but:   By default, we set the  Colocation Reference  to the  Patch Panel Name . We are not sure it's a good idea for IXPs to create a second name different to the co-location provider's but this option is available to you.  Seriously, think about what you are doing here - more references means more confusion!  The cabinet and cable type is displayed in the list of patch panels so even with obscure data centre references, it should be easy to find what you need.  Location Notes : Data centre / co-location providers do a lot of weird, wonderful and strange things! They provide multiple references for a single patch panel (IXP cabinet, MMR, etc.), they get taken over and re-reference everything or even provide no discernable reference. The field is a freetext field that will be included (and parsed as Markdown) in all emails generated by IXP Manager to help you help them identify a patch panel!   In addition to that, we will also use a cabinets  U's are counted from top/bottom , and a patch panel's  U position  and  mounted at front/rear  to also create a location description.  When setting the  Number of Ports , ensure you count duplex fibre ports as  two ports . So 12 duplex fibre ports would be entered as 24. When editing a patch panel, this input field represents the number of additional ports you want to add to a patch panel and thus defaults to 0 in that situation.   Port Name Prefix : This is an optional field intended for use on fibre patch panels. As an example, you may wish to prefix individual fibre strands in a duplex port with F which would mean the name of a duplex port would be displayed as F1/F2.\n*  Chargeable : Usually IXPs request their members to come to them and bear the costs of that. However, sometimes a co-location facility may charge the IXP for a half circuit or the IXP may need order and pay for the connection. Setting this only sets the default option when allocating ports to members later. The options are Yes / No / Half / Other.", 
            "title": "Adding a Patch Panel"
        }, 
        {
            "location": "/features/patch-panels/#filtering-patch-panel-ports", 
            "text": "Quite often, all you are looking for is a free in a particular location (data centre) or cabinet of a particular cable type (UTP / SMF / etc.).  IXP Manager makes this easy from the  Patch Panels  page via the top right button labeled  Filter Options . When clicked, this yields an advanced search as follows:   Cabinets auto-fills when you chose (or change) a location.", 
            "title": "Filtering Patch Panel Ports"
        }, 
        {
            "location": "/features/patch-panels/#patch-panel-port-states", 
            "text": "A patch panel port can have the following states:   Available : The port is free and available for use.  Prewired : This is equivalent to available but it means the port is prewired to a given switchport (you set the port when setting the prewired status). This is useful for IXPs that prewire a bunch of ports to avoid remote hands costs / data centre visits.  Awaiting Xconnect : Port has been assigned to a member and we are awaiting the co-location provider to install the cross connect. In this state, context aware actions such as emailing connection requests, LoA generation and  Set Connected  are all available.  Connected : Connected and in use.  Awaiting Cease : This connection is no longer required and we are awaiting the end user / co-location provider to cease the connection.  Ceased : You will never see a ceased state. When a cross connect is marked as ceased, it's current state is archived (for history, include files) and the port is reset to  Available . We do not revert to  Prewired  but an information message is shown to the user to hint this.  Reserved : Useful to mark particular ports as  off limits  for whatever reason.  Broken  Other", 
            "title": "Patch Panel Port States"
        }, 
        {
            "location": "/features/patch-panels/#free-available-ports", 
            "text": "IXP Manager will colour ports in the  Available ,  Prewired  and  Awaiting Cease  states are green allowing an easy visual indication of available ports.", 
            "title": "Free / Available Ports"
        }, 
        {
            "location": "/features/patch-panels/#patch-panel-port-lifecycle", 
            "text": "Patch panel ports start as either  available  or  prewired . The context menu in these states is:    Unset Prewired  is available as this port has a  Prewired  status. Clicking this reverts it to plain  Available  and disassociates it from the prewired port.  Edit Note...  is always available and provides a pop up to edit public and private notes associated with the port (current lifecycle - ceased ports have their notes at that time archived and cleared).   The main lifecycle option here is  Allocate :     Description : A one line short description to be shown in the list of patch panel ports. Just enough to help explain the ports purpose. Detailed information should be placed in the notes section. Can also be used to explain a reserved / broken / other port. Note that this is parsed as Markdown.  NB:  A description is discouraged for customer ports connected to a switch. The customer name and switch port are the description.    Colocation Circuit Reference : this is the reference provided by the colocation provider to uniquely reference this cross connect.    Ticket Reference(s) : This is a free text field to be used by IXPs as they wish. The intended use is to enter helpdesk ticket references that relate to this cross connect order.    Duplex connection? : Clicking this allows you to select the slave port for duplex connections.    Switch / Switch Port  /  Customer : You have a number of options when allocating a port:    If the port is pre-wired then the switch / switch port will be set here.   If you chose a switch port which has been allocated to a customer, then this patch panel port will also be allocated to that customer. The backend logic will detect if this is the case and update the customer field.  Conversely, if you chose a customer first, the switch / switch port dropdowns will be populated with only that customer's assigned ports.  Sometimes you will get cross connects that are not intended to be connected to peering switches (e.g. connections to co-located customer equipment, IXP metro connections, etc.). In these cases, just select the customer (and if it's the IXP itself, select the IXP customer) and leave switch / switch port unselected.   If you need to reset these fields, just click either of the Reset button.    Patch Panel Port Status : when allocating a port, this will allow you to set the state to  Awaiting Xconnect  or  Connected .    Physical Interface Status : this is not depicted above. If the selected switch port has already been assigned to a customer by way of a physical interface, you will have the option to update this here also.    Public  and  Private Notes : Public notes are available to the customer. Both fields are interpreted as Markdown.    Chargeable : Usually IXPs request their members to come to them and bear the costs of that. However, sometimes a co-location facility may charge the IXP for a half circuit or the IXP may need order and pay for the connection. The options are Yes / No / Half / Other. How individual IXPs use this is up to them.    Internal Use : Marks the port as used by the IXP itself. E.g. metro connections.    Owned By : Useful indication for billing and cease requests. Should represent the contractural owner of the cross connect. One of: Customer, IXP, Service Provider, Data Centre, Other.  Service Provider  might be a metro provider where they ordered the cross connect.    Once a port is allocated, it enters the  Awaiting XConnect  /  Connected  state and there are additional context menu options available:   The three lifecycle actions are:   Set Connected : updates the status (and allows you to add public/private notes). You next action after this should be  Email - Connect .  Set Awaiting Cease : mark the port and pending disconnection. Your next action after this should be  Email - Cease .  Set Ceased : this is a  transitive state  in that it doesn't  stick . When you mark a patch panel as ceased, the existing details (including files and notes) are archived as part of the port's history and then port is then cleared and made available again.", 
            "title": "Patch Panel Port Lifecycle"
        }, 
        {
            "location": "/features/patch-panels/#file-attachments", 
            "text": "Over the lifetime of a cross connect - and particularly when it is being ordered, there may be files exchanges between you and your customers or the colocation provider. These can be added to the patch panel port via the  Attach File...  option.  The dialog will dynamically determine the maximum file upload size based on your PHP settings. To alter this, change the following in your server's appropriate  php.ini :  ; Maximum allowed size for uploaded files.\nupload_max_filesize = 40M\n\n; Must be greater than or equal to upload_max_filesize\npost_max_size = 40M  Please search the internet for further help as this is outside the scope of IXP Manager documentation.  The following features apply to file attachments:   they are archived along with the port history when a cross connect is ceased.  they are stored under  $IXPROOT/storage/files/ppp .  two files of the same name cannot be uploaded for a single patch panel port.  they can be marked as public or private:  public files are accessible to the customer through their own dashboard.  public files are attached to the  Email - Information  email.", 
            "title": "File Attachments"
        }, 
        {
            "location": "/features/patch-panels/#loa-generation", 
            "text": "Many co-location providers will not accept a cross connect order without a LoA  (Letter of Agency/Authority)  from the party to whom the cross connect is to be delivered (typically the IXP).  IXP Manager will generate a PDF LoA to download or include in the emails it generates for you. Here is an example:   You will need to  skin  this yourself to change the legalese, address and contact details and potentially add a logo. See the version INEX uses  here  (which includes and embedded PNG logo).  Note that  Dompdf  is used to turn the HTML template into a PDF and it has some restrictions.  You have two options for generating LoAs (without having IXP Manager email them):   Download PDF : downloads the PDF via your browser.  View PDF : displays the PDF LoA in your browser (where browser supports it).", 
            "title": "LoA Generation"
        }, 
        {
            "location": "/features/patch-panels/#loa-verification", 
            "text": "The stock LoA template (and INEX's version) includes a link that allows co-location browsers to click on to verify its veracity.  On successful verification, the end user sees:", 
            "title": "LoA Verification"
        }, 
        {
            "location": "/features/patch-panels/#email-generation", 
            "text": "IXP Manager allows you to send four emails related to patch panels / cross connects (port status dependent). These are listed below. The Email editor looks as follows:   Note that:   the option to attach a PDF LoA is a checkbox.  the email is written in Markdown with a preview available. The email is sent as both HTML (from the Markdown) and the plaintext version.   The four email templates available are:   Email - Connect : Email the customer a request to order a cross connect to the given demarcation points. A LoA is attached as a PDF by default unless you uncheck the box in the email editor.  Email - Cease : Email the customer a request to cease a cross connect.  Email - Information : Email the customer all details on file about a cross connect. We often get requests for this at INEX and this simplifies the process. The generated email includes:  the standard details regarding port and co-location reference;  public notes;  public files as attachments.  Email - LoA : Email a LoA to the customer as attached as a PDF. This is similar to  Email - Connect  but it is more reflective of a typical response to a second request for a LoA.   All email templates can be  skinned  for your own needs. See INEX's example skins  here .", 
            "title": "Email Generation"
        }, 
        {
            "location": "/features/patch-panels/#viewing-patch-panel-details-and-archives", 
            "text": "Each patch panel port row has the following button:   The number in the badge indicates how many historical records are available.  Clicking on the button yields the following view screen:", 
            "title": "Viewing Patch Panel Details and Archives"
        }, 
        {
            "location": "/features/patch-panels/#development-history", 
            "text": "The Patch Panels functionality was developed during Q1 2017 and added in March 2017. This was made possible from sponsorship which enabled us to hire a new full time developer. We are especially grateful to our sponsors -  please see them here .", 
            "title": "Development History"
        }, 
        {
            "location": "/features/dns-arpa/", 
            "text": "DNS / ARPA\n\n\nAn IXP assigns each customer (an) IP address(es) from the range used on the peering LAN(s). These IP addresses can show up in traceroutes (for example) and both IXPs and customers like to have these resolve to a hostname.\n\n\nWhen creating \nVLAN Interfaces\n in IXP Manager there is a field called \nIPv[4/6] Hostname\n. This is intended for this DNS ARPA purpose. Some customers have specific requirements for these while other smaller customers may not fully understand the use cases. At INEX, we typically default to entries such as:\n\n\n\n\ncustomer-name.v4.example.com\n (where \nexample.com\n would be \ninex.ie\n in our case)\n\n\ncustomer-name.v6.example.com\n\n\n\n\nIXP Manager\n can generate your ARPA DNS entries for your peering IP space as per the hostnames configured on each VLAN interface and provide them in two ways:\n\n\n\n\nas JSON;\n\n\nas text based on a template (IXP Manager comes with a \nISC Bind\n format example)\n\n\n\n\nBoth of these are explained below.\n\n\nNote that the API endpoints below can be tested in your browser by directly accessing the URLs \nwhen logged in\n. Otherwise, you need an \nAPI key\n when using them in scripts.\n\n\nAs JSON\n\n\nYou can use the \nIXP Manager\n API to get all ARPA entries for a given VLAN and protocol as a JSON object using the following endpoint format:\n\n\nhttps://ixp.example.com/api/v4/dns/arpa/{vlanid}/{protocol}\n\n\n\n\n\nwhere:\n\n\n\n\nvlanid\n is the database ID (\nDB ID\n) of the VLAN. You can find the DB ID in IXP Manager in the VLAN table (select \nVLANs\n from the left hand side menu).\n\n\nprotocol\n is either \n4\n for IPv4 or 6 for \nIPv6\n.\n\n\n\n\nIf either of these are invalid, the API will return with a HTTP 404 response.\n\n\nAnd example of the JSON response returned is:\n\n\n[\n\n    \n{\n\n        \nenabled\n:\n \ntrue\n,\n\n        \naddress\n:\n \n192.0.2.67\n,\n\n        \nhostname\n:\n \ncherrie.example.com\n,\n\n        \narpa\n:\n \n67.2.0.192.in-addr.arpa.\n\n    \n},\n\n    \n...\n\n\n]\n\n\n\n\n\n\nwhere:\n\n\n\n\nenabled\n indicates if the protocol has been enabled for this user. This is nearly always true. A situation where it may be false is if you enabled IPv6 for a user; then that user subsequently decided to not use IPv6; then you unchecked the \nIPv6 Enabled\n box in the VLAN Interface form without removing address / hostname entries.\n\n\naddress\n - this IPv4/6 address of the VLAN interface as assigned by the IXP.\n\n\nhostname\n - the configured hostname for this address as entered into \nIXP Manager\n.\n\n\narpa\n: the generated ARPA record name for the IP address assigned by the IXP.\n\n\n\n\nYou can now feed the JSON object into a script to create your own DNS zones appropriate to your DNS infrastructure.\n\n\nWhen scripting, we would normally pull the JSON object using something like:\n\n\n#! /usr/bin/env bash\n\n\n\nKEY\n=\nyour-ixp-manager-api-key\n\n\nURL\n=\nhttps://ixp.example.com/api/v4/dns/arpa\n\n\nVLANIDS\n=\n1 2\n\n\nPROTOCOLS\n=\n4 6\n\n\n\nfor\n v in \n$VLANIDS\n;\n \ndo\n\n    \nfor\n p in \n$PROTOCOLS\n;\n \ndo\n\n\n        \ncmd\n=\n/usr/local/bin/curl --fail -s             \\\n\n\n            -H \\\nX-IXP-Manager-API-Key: \n${\nKEY\n}\n\\\n       \\\n\n\n            \n${\nURL\n}\n/\n${\nv\n}\n/\n${\np\n}\n                           \\\n\n\n                \n/tmp/dns-arpa-vlanid\n$v\n-ipv\n$p\n.json.\n$$\n\n        \neval\n \n$cmd\n\n\n        \nif\n \n[[\n \n$?\n -ne \n0\n \n]]\n;\n \nthen\n\n            \necho\n \nERROR: non-zero return from DNS ARPA API call for vlan ID \n$v\n with protocol \n$p\n\n            \ncontinue\n\n        \nfi\n\n\n        // \ndo\n something\n\n        rm /tmp/dns-arpa-vlanid\n$v\n-ipv\n$p\n.json.\n$$\n\n    \ndone\n\n\ndone\n\n\n\n\n\n\nFrom Templates\n\n\nRather than writing your own scripts to consume the JSON object as above, it may be easier to use the bundled ISC Bind templates or to write your own template for IXP Manager.\n\n\nYou can use the \nIXP Manager\n API to get all ARPA entries for a given VLAN and protocol as plain text based on a template by using the following API endpoint:\n\n\nhttps://ixp.example.com/api/v4/dns/arpa/{vlanid}/{protocol}/{template}\n\n\n\n\n\nwhere:\n\n\n\n\nvlanid\n and \nprotocol\n is as above in \nAs JSON\n.\n\n\ntemplate\n is the name of a template file residing in the view path \napi/v4/dns/\n.\n\n\n\n\nRemember that the included ISC Bind templates can be \nskinned\n or you can add custom templates to your skin directory. More detail on this can be found in the dedicated section below.\n\n\nThe bundled ISC Bind templates can be used by setting \n{template}\n to \nbind\n or \nbind-full\n in the above URL. For the example interface in the JSON above, the ISC Bind \nbind\n template would yield:\n\n\n67.2.0.192.in-addr.arpa.       IN   PTR     cherrie.example.com.\n\n\n\n\n\n(note that the terminated period on the hostname is added by the template)\n\n\nThe two bundled templates are:\n\n\n\n\nbind\n: outputs resource records only as per the above example.\n\n\nbind-full\n: outputs a complete Bind zone file including head and serialized serial number (UNIX timestamp). This must be templated as it uses \nexample.com\n for email and name server domains.\n\n\n\n\nSkinning / Templating\n\n\nYou can use \nskinning\n to make changes to the bundled ISC Bind template or add your own.\n\n\nLet's say you wanted to add your own template called \nmytemplate1\n and your skin is named \nmyskin\n. The best way to proceed is to copy the bundled example:\n\n\ncd\n \n$IXPROOT\n\nmkdir -p resources/skins/myskin/api/v4/dns\ncp resources/views/api/v4/dns/bind.foil.php resources/skins/myskin/api/v4/dns/mytemplate1.foil.php\n\n\n\n\n\nYou can now edit this template as required. The only constraint on the template name is it can only contain characters from the classes \na-z, 0-9, -\n. \nNB:\n do not use uppercase characters.\n\n\n\n\nContribute back\n - if you write a useful generator, please open a pull request and contribute it back to the project.\n\n\n\n\nThe following variables are available in the template:\n\n\n\n\n$t-\narpa\n: array of the ARPA entries - see below.\n\n\n$t-\nvlan\n: instance of the \nVlan\n entity object\n.\n\n\n$t-\nprotocol\n: either \n4\n or \n6\n.\n\n\n\n\nThe following variables are available for each element of the \n$t-\narpa\n array (essentially the same as the JSON object above): \nenabled, hostname, address, arpa\n. See above for a description.\n\n\nThe actual code in the bundled ISC Bind sample is as simple as:\n\n\n?php\n \nforeach\n(\n \n$t\n-\narpa\n \nas\n \n$a\n \n)\n:\n \n?\n\n\n?\n=\n \ntrim\n(\n$a\n[\narpa\n])\n \n?\n    IN      PTR     \n?\n=\n \ntrim\n(\n$a\n[\nhostname\n])\n \n?\n.\n\n\n?php\n \nendforeach\n;\n \n?\n\n\n\n\n\n\nSample Script\n\n\nAt INEX, we have (for example) one peering LAN that is a /25 IPv4 network and so is not a zone file in its own right. As such, we make up the zone file using includes. The main zone file looks like:\n\n\n$TTL 86400\n\n$INCLUDE /usr/local/etc/namedb/zones/soa-0.2.192.in-addr.arpa.inc\n\n$INCLUDE zones/inex-dns-slave-nslist.inc\n\n$INCLUDE zones/reverse-mgmt-hosts-ipv4.include\n$INCLUDE zones/reverse-vlan-12-ipv4.include\n\n\n\n\n\nThe SOA file looks like (as you might expect):\n\n\n@               IN      SOA     ns.example.come.     hostmaster.example.com. (\n                        2017051701      ; Serial\n                        43200           ; Refresh\n                        7200            ; Retry\n                        1209600         ; Expire\n                        7200 )          ; Minimum\n\n\n\n\n\nThe \nreverse-vlan-12-ipv4.include\n is the output of the ISC Bind \nbind\n template above for a given VLAN ID.\n\n\nWe use the sample script \nupdate-dns-from-ixp-manager.sh\n which can be found \nin this directory\n to keep this updated ourselves.", 
            "title": "DNS / ARPA"
        }, 
        {
            "location": "/features/dns-arpa/#dns-arpa", 
            "text": "An IXP assigns each customer (an) IP address(es) from the range used on the peering LAN(s). These IP addresses can show up in traceroutes (for example) and both IXPs and customers like to have these resolve to a hostname.  When creating  VLAN Interfaces  in IXP Manager there is a field called  IPv[4/6] Hostname . This is intended for this DNS ARPA purpose. Some customers have specific requirements for these while other smaller customers may not fully understand the use cases. At INEX, we typically default to entries such as:   customer-name.v4.example.com  (where  example.com  would be  inex.ie  in our case)  customer-name.v6.example.com   IXP Manager  can generate your ARPA DNS entries for your peering IP space as per the hostnames configured on each VLAN interface and provide them in two ways:   as JSON;  as text based on a template (IXP Manager comes with a  ISC Bind  format example)   Both of these are explained below.  Note that the API endpoints below can be tested in your browser by directly accessing the URLs  when logged in . Otherwise, you need an  API key  when using them in scripts.", 
            "title": "DNS / ARPA"
        }, 
        {
            "location": "/features/dns-arpa/#as-json", 
            "text": "You can use the  IXP Manager  API to get all ARPA entries for a given VLAN and protocol as a JSON object using the following endpoint format:  https://ixp.example.com/api/v4/dns/arpa/{vlanid}/{protocol}  where:   vlanid  is the database ID ( DB ID ) of the VLAN. You can find the DB ID in IXP Manager in the VLAN table (select  VLANs  from the left hand side menu).  protocol  is either  4  for IPv4 or 6 for  IPv6 .   If either of these are invalid, the API will return with a HTTP 404 response.  And example of the JSON response returned is:  [ \n     { \n         enabled :   true , \n         address :   192.0.2.67 , \n         hostname :   cherrie.example.com , \n         arpa :   67.2.0.192.in-addr.arpa. \n     }, \n     ...  ]   where:   enabled  indicates if the protocol has been enabled for this user. This is nearly always true. A situation where it may be false is if you enabled IPv6 for a user; then that user subsequently decided to not use IPv6; then you unchecked the  IPv6 Enabled  box in the VLAN Interface form without removing address / hostname entries.  address  - this IPv4/6 address of the VLAN interface as assigned by the IXP.  hostname  - the configured hostname for this address as entered into  IXP Manager .  arpa : the generated ARPA record name for the IP address assigned by the IXP.   You can now feed the JSON object into a script to create your own DNS zones appropriate to your DNS infrastructure.  When scripting, we would normally pull the JSON object using something like:  #! /usr/bin/env bash  KEY = your-ixp-manager-api-key  URL = https://ixp.example.com/api/v4/dns/arpa  VLANIDS = 1 2  PROTOCOLS = 4 6  for  v in  $VLANIDS ;   do \n     for  p in  $PROTOCOLS ;   do \n\n         cmd = /usr/local/bin/curl --fail -s             \\              -H \\ X-IXP-Manager-API-Key:  ${ KEY } \\        \\               ${ URL } / ${ v } / ${ p }                            \\                   /tmp/dns-arpa-vlanid $v -ipv $p .json. $$ \n         eval   $cmd \n\n         if   [[   $?  -ne  0   ]] ;   then \n             echo   ERROR: non-zero return from DNS ARPA API call for vlan ID  $v  with protocol  $p \n             continue \n         fi \n\n        //  do  something\n\n        rm /tmp/dns-arpa-vlanid $v -ipv $p .json. $$ \n     done  done", 
            "title": "As JSON"
        }, 
        {
            "location": "/features/dns-arpa/#from-templates", 
            "text": "Rather than writing your own scripts to consume the JSON object as above, it may be easier to use the bundled ISC Bind templates or to write your own template for IXP Manager.  You can use the  IXP Manager  API to get all ARPA entries for a given VLAN and protocol as plain text based on a template by using the following API endpoint:  https://ixp.example.com/api/v4/dns/arpa/{vlanid}/{protocol}/{template}  where:   vlanid  and  protocol  is as above in  As JSON .  template  is the name of a template file residing in the view path  api/v4/dns/ .   Remember that the included ISC Bind templates can be  skinned  or you can add custom templates to your skin directory. More detail on this can be found in the dedicated section below.  The bundled ISC Bind templates can be used by setting  {template}  to  bind  or  bind-full  in the above URL. For the example interface in the JSON above, the ISC Bind  bind  template would yield:  67.2.0.192.in-addr.arpa.       IN   PTR     cherrie.example.com.  (note that the terminated period on the hostname is added by the template)  The two bundled templates are:   bind : outputs resource records only as per the above example.  bind-full : outputs a complete Bind zone file including head and serialized serial number (UNIX timestamp). This must be templated as it uses  example.com  for email and name server domains.", 
            "title": "From Templates"
        }, 
        {
            "location": "/features/dns-arpa/#skinning-templating", 
            "text": "You can use  skinning  to make changes to the bundled ISC Bind template or add your own.  Let's say you wanted to add your own template called  mytemplate1  and your skin is named  myskin . The best way to proceed is to copy the bundled example:  cd   $IXPROOT \nmkdir -p resources/skins/myskin/api/v4/dns\ncp resources/views/api/v4/dns/bind.foil.php resources/skins/myskin/api/v4/dns/mytemplate1.foil.php  You can now edit this template as required. The only constraint on the template name is it can only contain characters from the classes  a-z, 0-9, - .  NB:  do not use uppercase characters.   Contribute back  - if you write a useful generator, please open a pull request and contribute it back to the project.   The following variables are available in the template:   $t- arpa : array of the ARPA entries - see below.  $t- vlan : instance of the  Vlan  entity object .  $t- protocol : either  4  or  6 .   The following variables are available for each element of the  $t- arpa  array (essentially the same as the JSON object above):  enabled, hostname, address, arpa . See above for a description.  The actual code in the bundled ISC Bind sample is as simple as:  ?php   foreach (   $t - arpa   as   $a   ) :   ?  ? =   trim ( $a [ arpa ])   ?     IN      PTR      ? =   trim ( $a [ hostname ])   ? .  ?php   endforeach ;   ?", 
            "title": "Skinning / Templating"
        }, 
        {
            "location": "/features/dns-arpa/#sample-script", 
            "text": "At INEX, we have (for example) one peering LAN that is a /25 IPv4 network and so is not a zone file in its own right. As such, we make up the zone file using includes. The main zone file looks like:  $TTL 86400\n\n$INCLUDE /usr/local/etc/namedb/zones/soa-0.2.192.in-addr.arpa.inc\n\n$INCLUDE zones/inex-dns-slave-nslist.inc\n\n$INCLUDE zones/reverse-mgmt-hosts-ipv4.include\n$INCLUDE zones/reverse-vlan-12-ipv4.include  The SOA file looks like (as you might expect):  @               IN      SOA     ns.example.come.     hostmaster.example.com. (\n                        2017051701      ; Serial\n                        43200           ; Refresh\n                        7200            ; Retry\n                        1209600         ; Expire\n                        7200 )          ; Minimum  The  reverse-vlan-12-ipv4.include  is the output of the ISC Bind  bind  template above for a given VLAN ID.  We use the sample script  update-dns-from-ixp-manager.sh  which can be found  in this directory  to keep this updated ourselves.", 
            "title": "Sample Script"
        }, 
        {
            "location": "/features/grapher/", 
            "text": "Grapher\n\n\nThe biggest new feature available at launch in IXP Manager v4 is a new graphing system called \nGrapher\n.\n\n\nGrapher\n is a complete rewrite of all previous graphing code and includes:\n\n\n\n\nAPI access to graphs and graph statistics\n\n\nmultiple backends (such as MRTG, sflow) with dynamic resolution of appropriate backend\n\n\nconfiguration generation where required\n\n\nconsistent and flexible OOP design\n\n\n\n\nTo date, we've developed three reference backend implementations:\n\n\n\n\ndummy\n - a dummy grapher that just provides a placeholder graph for all possible graph types;\n\n\nmrtg\n - MRTG graphing using either the log or rrd backend. Use cases for MRTG are L2 interface statistics for bits / packets / errors / discards / broadcasts per second. Aggregate graphs for customer LAGs, overall customer traffic, all traffic over a switch / infrastructure / the entire IXP are all supported.\n\n\nsflow\n - while the MRTG backend looks at layer 2 statistics, sflow is used to provide layer 3 statistics such as per protocol (IPv4/6) graphs and peer to peer graphs.\n\n\n\n\nIn a typical production environment, you'd implement both MRTG and sflow to provide the complete set of features.\n\n\nConfiguration\n\n\nThere is only a handful of configuration options required and these can be seen with documentation in \nconfig/grapher.php\n (remember to put your own local changes in \n.env\n rather than editing this file directly).\n\n\nThe only global (non-backend specific) options are:\n\n\n\n\nbackend\n - in a typical production environment this would be \n\"mrtg|sflow\"\n which means try the MRTG backend first and then sflow. We ship with this set as \n\"dummy\"\n so you can see sample graphs working out of the box.\n\n\ncache\n - as the industry standard is to graph at 5min intervals, the cache settings do not regenerate / reload / reprocess log / rrd / image files if we have cached them and they are less than 5mins old. This is enabled by default which is the recommended setting.\n\n\n\n\nBackend specific configuration and set-up instructions can be found in their own sections.\n\n\nGrapher Backends\n\n\nBackend: MRTG\n\n\nMRTG is a particularly efficient SNMP poller as, irrespective of how many times an interface is referenced for different graphs, it is only polled once per run.\n\n\nPer-second graphs are generated for bits, packets, errors, discards and broadcasts at 5min intervals. IXP Manager's Grapher system can use MRTG to poll switches and create traffic graphs for:\n\n\n\n\nAggregate IXP and Infrastructure Graphs\n\n\n\n\nThe MRTG script creates aggregate graphs for the entire IXP as well as per-infrastructure graphs. These graphs are available from the \nStatistics\n menu under \nOverall Peering Graphs\n. Also, the graphs on the admin dashboard are the monthly versions of these and will appear on the dashboard when configured as above.\n\n\n\n\nSwitch Aggregate Graphs\n\n\n\n\nThese are defined and built automatically from the switches you have defined. These graphs are the aggregate of all peering ports. These graphs are available from the \nStatistics\n menu under \nSwitch Aggregate Graphs\n.\n\n\n\n\nInter-Switch / Trunk Graphs\n\n\n\n\nIXP Manager does not currently support a frontend means of creating these definitions (but, as of March 2017, it is being worked on). For now, we do it manually via the \nIXP Manager v3 way\n.\n\n\nThese graphs will be available in the \nStatistics\n menu under \nInter-Switch / PoP Graphs\n.\n\n\n\n\nCustomer Graphs\n\n\n\n\nMRTG creates per port, per LAG and aggregate graphs for each member / customer.\n\n\nMRTG Setup and Configuration\n\n\nYou need to install some basic packages for MRTG to work - on Ubuntu for example, install:\n\n\napt-get install libconfig-general-perl libnetaddr-ip-perl mrtg\n\n\n\n\n\nYou also need a folder to store all MRTG files. For example:\n\n\nmkdir -p /srv/mrtg\n\n\n\n\n\nIn your `.env, you need to set the following options:\n\n\n# the database type to use - either log or rrd\nGRAPHER_BACKEND_MRTG_DBTYPE=\nlog\n\n# where to store log/rrd/png files as created above. This is from the perspective\n# of the mrtg daemon so should also be local\nGRAPHER_BACKEND_MRTG_WORKDIR=\n/tmp\n\n# where to find the WORKDIR above from IXP Manager\ns perspective. This can be the\n# same local directory as the workdir for same server or a URL to remote web server.\nGRAPHER_BACKEND_MRTG_LOGDIR=\nhttp://collector.example.com/mrtg\n\n\n\n\n\n\nYou can now generate a MRTG configuration by executing a command such as:\n\n\n# output to stdout:\n\n./artisan grapher:generate-configuration -B mrtg\n\n# output to a named file\n\n./artisan grapher:generate-configuration -B mrtg -O /tmp/mrtg.cfg.candidate\n\n\n\n\n\nYou could also combine a syntax check before putting the resultant file live. Here's a complete example that could be run via cron:\n\n\n#! /usr/bin/env bash\n\n\n\nAPPLICATION_PATH\n=\n/srv/ixpmanager\n\n\n# Synchronise configuration files\n\n\n${\nAPPLICATION_PATH\n}\n/artisan grapher:generate-configuration -B mrtg -O /tmp/mrtg.cfg.\n$$\n\n\ncat /etc/mrtg.cfg    \n|\n egrep -v \n^#.*$\n \n|\n egrep -v \n^[ ]+Based on configuration last generated by.*$\n \n/tmp/mrtg.cfg.filtered\ncat /tmp/mrtg.cfg.\n$$\n \n|\n egrep -v \n^#.*$\n \n|\n egrep -v \n^[ ]+Based on configuration last generated by.*$\n \n/tmp/mrtg.cfg.\n$$\n.filtered\ndiff /tmp/mrtg.cfg.filtered /tmp/mrtg.cfg.\n$$\n.filtered \n/dev/null\n\nDIFF\n=\n$?\n\n\nrm /tmp/mrtg.cfg.filtered\nrm /tmp/mrtg.cfg.\n$$\n.filtered\n\n\nif\n \n[[\n \n$DIFF\n -eq \n0\n \n]]\n;\n \nthen\n\n    rm /tmp/mrtg.cfg.\n$$\n\n    \nexit \n0\n\nfi\n\n\n/usr/bin/mrtg --check /tmp/mrtg.cfg.\n$$\n                 \n\\\n\n    \n /bin/mv /tmp/mrtg.cfg.\n$$\n /etc/mrtg.cfg\n\n\n\n\n\nIf your MRTG collector is on a different server, you could use a script such as the following to safely update MRTG:\n\n\n#! /bin/bash\n\n\ncurl --fail -s -H \nX-IXP-Manager-API-Key: your_api_key\n \n\\\n\n    https://ixp.example.com/api/v4/grapher/mrtg-config \n/etc/mrtg/mrtg.cfg.\n$$\n\n\n\nif\n \n[[\n \n$?\n -ne \n0\n \n]]\n;\n \nthen\n\n    \necho\n \nWARNING: COULD NOT FETCH UP TO DATE MRTG CONFIGURATION!\n\n    \nexit\n -1\n\nfi\n\n\n\ncd\n /etc/mrtg\n\ncat mrtg.cfg    \n|\n egrep -v \n^#.*$\n \n|\n egrep -v \n^[ ]+Based on configuration last generated by.*$\n \nmrtg.cfg.filtered\ncat mrtg.cfg.\n$$\n \n|\n egrep -v \n^#.*$\n \n|\n egrep -v \n^[ ]+Based on configuration last generated by.*$\n \nmrtg.cfg.\n$$\n.filtered\ndiff mrtg.cfg.filtered mrtg.cfg.\n$$\n.filtered \n/dev/null\n\nDIFF\n=\n$?\n\n\nrm mrtg.cfg.filtered\nrm mrtg.cfg.\n$$\n.filtered\n\n\nif\n \n[[\n \n$DIFF\n -eq \n0\n \n]]\n;\n \nthen\n\n    rm mrtg.cfg.\n$$\n\n    \nexit \n0\n\nfi\n\n\n/usr/local/bin/mrtg --check /etc/mrtg/mrtg.cfg.\n$$\n                 \n\\\n\n    \n /bin/mv /etc/mrtg/mrtg.cfg.\n$$\n /etc/mrtg/mrtg.cfg \n\\\n\n    \n /etc/rc.d/mrtg_daemon restart \n /dev/null 2\n1\n\n\n\n\n\nNote that our header template starts MRTG as a daemon. On FreeBSD, MRTG comes with an initd script by default and you can kick it off on boot with something like the following in rc.conf:\n\n\nmrtg_daemon_enable=\nYES\n\nmrtg_daemon_config=\n/etc/mrtg/mrtg.cfg\n\n\n\n\n\n\nHowever, on Ubuntu it does not but it comes with a /etc/cron.d/mrtg file which kicks it off every five minutes (it will daemonise the first time and further cron jobs will have no effect). If you use this method, you will need to have your periodic update script restart / stop the daemon when the configuration changes (as demonstrated in the above script).\n\n\nTo start and stop it via standard initd scripts on Ubuntu, use \nan initd script such as this\n  (\nsource\n:\n\n\ncp $APPLICATION_PATH/tools/runtime/mrtg/ubuntu-mrtg-initd /etc/init.d/mrtg\nchmod +x /etc/init.d/mrtg\nupdate-rc.d mrtg defaults\n/etc/init.d/mrtg start\n\n\n\n\n\nRemember to disable the default cron job for MRTG on Ubuntu!\n\n\nCustomising the Configuration\n\n\nAn example of how to customise the MRTG configuration \ncan be found in the skinning documenation\n.\n\n\nInserting Traffic Data Into the Database / Reporting Emails\n\n\nThe MRTG backend inserts daily summaries into MySQL for reporting. An example crontab for this is:\n\n\n0 2   * * *   www-data        /srv/ixpmanager/artisan grapher:upload-stats-to-db\n\n0 4   * * *   www-data        /srv/ixpmanager/artisan grapher:email-traffic-deltas --stddev=1.5 -v user1@example.com,user2@example.com\n\n30 10 * * tue www-data        /srv/ixpmanager/artisan grapher:email-port-utilisations --threshold=80 ops@inex.ie,barry.rhodes@inex.ie,eileen@inex.ie\n\n31 10 * * *   www-data        /srv/ixpmanager/artisan grapher:email-ports-with-counts --discards ops@inex.ie\n\n32 10 * * *   www-data        /srv/ixpmanager/artisan grapher:email-ports-with-counts --errors ops@inex.ie\n\n\n\n\n\nwhich, in the order above, do:\n\n\n\n\nOnce per day, upload \nyesterday's\n summary of MRTG statistics into the database.\n\n\nEmail a report of members whose average traffic has changed by more than 1.5 times their standard deviation to \nuser1@example.com\n and \nuser2@example.com\n.\n\n\nEmail a report of all ports with \n=80% utilisation yesterday.\n\n\nEmail a report of all ports with a non-zero discard count yesterday.\n\n\nEmail a report of all ports with a non-zero error count yesterday.\n\n\n\n\nBackend: sflow\n\n\nDocumentation on sflow is being prepared for v4 but the \nv4 documentation is stail available here\n.\n\n\nThe previous version of IXP Manager (\n4) used a script called \nsflow-graph.php\n which was installed on the sflow server to create graphs on demand. IXP Manager v4 does not use this but pulls the required RRD files directly.\n\n\nIf you have these on the same server (not typically recommended), then set the path accordingly in \n.env\n:\n\n\nGRAPHER_BACKEND_SFLOW_ROOT=\n/srv/ixpmatrix\n\n\n\n\n\n\nIf you have implemented this via a web server on the sflow server (as we typically do at INEX), then you need to expose the RRD data directory to IXP Manager using an Apache config such as:\n\n\nAlias /grapher-sflow /srv/ixpmatrix\n\n\nDirectory \n/srv/ixpmatrix\n\n    Options None\n    AllowOverride None\n    \nRequireAny\n\n            Require ip 192.0.2.0/24\n            Require ip 2001:db8::/32\n    \n/RequireAny\n\n\n/Directory\n\n\n\n\n\n\nand update \n.env\n for this with something like:\n\n\nGRAPHER_BACKEND_SFLOW_ROOT=\nhttp://www.example.com/grapher-sflow", 
            "title": "Grapher"
        }, 
        {
            "location": "/features/grapher/#grapher", 
            "text": "The biggest new feature available at launch in IXP Manager v4 is a new graphing system called  Grapher .  Grapher  is a complete rewrite of all previous graphing code and includes:   API access to graphs and graph statistics  multiple backends (such as MRTG, sflow) with dynamic resolution of appropriate backend  configuration generation where required  consistent and flexible OOP design   To date, we've developed three reference backend implementations:   dummy  - a dummy grapher that just provides a placeholder graph for all possible graph types;  mrtg  - MRTG graphing using either the log or rrd backend. Use cases for MRTG are L2 interface statistics for bits / packets / errors / discards / broadcasts per second. Aggregate graphs for customer LAGs, overall customer traffic, all traffic over a switch / infrastructure / the entire IXP are all supported.  sflow  - while the MRTG backend looks at layer 2 statistics, sflow is used to provide layer 3 statistics such as per protocol (IPv4/6) graphs and peer to peer graphs.   In a typical production environment, you'd implement both MRTG and sflow to provide the complete set of features.", 
            "title": "Grapher"
        }, 
        {
            "location": "/features/grapher/#configuration", 
            "text": "There is only a handful of configuration options required and these can be seen with documentation in  config/grapher.php  (remember to put your own local changes in  .env  rather than editing this file directly).  The only global (non-backend specific) options are:   backend  - in a typical production environment this would be  \"mrtg|sflow\"  which means try the MRTG backend first and then sflow. We ship with this set as  \"dummy\"  so you can see sample graphs working out of the box.  cache  - as the industry standard is to graph at 5min intervals, the cache settings do not regenerate / reload / reprocess log / rrd / image files if we have cached them and they are less than 5mins old. This is enabled by default which is the recommended setting.   Backend specific configuration and set-up instructions can be found in their own sections.", 
            "title": "Configuration"
        }, 
        {
            "location": "/features/grapher/#grapher-backends", 
            "text": "", 
            "title": "Grapher Backends"
        }, 
        {
            "location": "/features/grapher/#backend-mrtg", 
            "text": "MRTG is a particularly efficient SNMP poller as, irrespective of how many times an interface is referenced for different graphs, it is only polled once per run.  Per-second graphs are generated for bits, packets, errors, discards and broadcasts at 5min intervals. IXP Manager's Grapher system can use MRTG to poll switches and create traffic graphs for:   Aggregate IXP and Infrastructure Graphs   The MRTG script creates aggregate graphs for the entire IXP as well as per-infrastructure graphs. These graphs are available from the  Statistics  menu under  Overall Peering Graphs . Also, the graphs on the admin dashboard are the monthly versions of these and will appear on the dashboard when configured as above.   Switch Aggregate Graphs   These are defined and built automatically from the switches you have defined. These graphs are the aggregate of all peering ports. These graphs are available from the  Statistics  menu under  Switch Aggregate Graphs .   Inter-Switch / Trunk Graphs   IXP Manager does not currently support a frontend means of creating these definitions (but, as of March 2017, it is being worked on). For now, we do it manually via the  IXP Manager v3 way .  These graphs will be available in the  Statistics  menu under  Inter-Switch / PoP Graphs .   Customer Graphs   MRTG creates per port, per LAG and aggregate graphs for each member / customer.", 
            "title": "Backend: MRTG"
        }, 
        {
            "location": "/features/grapher/#mrtg-setup-and-configuration", 
            "text": "You need to install some basic packages for MRTG to work - on Ubuntu for example, install:  apt-get install libconfig-general-perl libnetaddr-ip-perl mrtg  You also need a folder to store all MRTG files. For example:  mkdir -p /srv/mrtg  In your `.env, you need to set the following options:  # the database type to use - either log or rrd\nGRAPHER_BACKEND_MRTG_DBTYPE= log \n# where to store log/rrd/png files as created above. This is from the perspective\n# of the mrtg daemon so should also be local\nGRAPHER_BACKEND_MRTG_WORKDIR= /tmp \n# where to find the WORKDIR above from IXP Manager s perspective. This can be the\n# same local directory as the workdir for same server or a URL to remote web server.\nGRAPHER_BACKEND_MRTG_LOGDIR= http://collector.example.com/mrtg   You can now generate a MRTG configuration by executing a command such as:  # output to stdout: \n./artisan grapher:generate-configuration -B mrtg # output to a named file \n./artisan grapher:generate-configuration -B mrtg -O /tmp/mrtg.cfg.candidate  You could also combine a syntax check before putting the resultant file live. Here's a complete example that could be run via cron:  #! /usr/bin/env bash  APPLICATION_PATH = /srv/ixpmanager # Synchronise configuration files  ${ APPLICATION_PATH } /artisan grapher:generate-configuration -B mrtg -O /tmp/mrtg.cfg. $$ \n\ncat /etc/mrtg.cfg     |  egrep -v  ^#.*$   |  egrep -v  ^[ ]+Based on configuration last generated by.*$   /tmp/mrtg.cfg.filtered\ncat /tmp/mrtg.cfg. $$   |  egrep -v  ^#.*$   |  egrep -v  ^[ ]+Based on configuration last generated by.*$   /tmp/mrtg.cfg. $$ .filtered\ndiff /tmp/mrtg.cfg.filtered /tmp/mrtg.cfg. $$ .filtered  /dev/null DIFF = $? \n\nrm /tmp/mrtg.cfg.filtered\nrm /tmp/mrtg.cfg. $$ .filtered if   [[   $DIFF  -eq  0   ]] ;   then \n    rm /tmp/mrtg.cfg. $$ \n     exit  0 fi \n\n/usr/bin/mrtg --check /tmp/mrtg.cfg. $$                   \\ \n      /bin/mv /tmp/mrtg.cfg. $$  /etc/mrtg.cfg  If your MRTG collector is on a different server, you could use a script such as the following to safely update MRTG:  #! /bin/bash \n\ncurl --fail -s -H  X-IXP-Manager-API-Key: your_api_key   \\ \n    https://ixp.example.com/api/v4/grapher/mrtg-config  /etc/mrtg/mrtg.cfg. $$  if   [[   $?  -ne  0   ]] ;   then \n     echo   WARNING: COULD NOT FETCH UP TO DATE MRTG CONFIGURATION! \n     exit  -1 fi  cd  /etc/mrtg\n\ncat mrtg.cfg     |  egrep -v  ^#.*$   |  egrep -v  ^[ ]+Based on configuration last generated by.*$   mrtg.cfg.filtered\ncat mrtg.cfg. $$   |  egrep -v  ^#.*$   |  egrep -v  ^[ ]+Based on configuration last generated by.*$   mrtg.cfg. $$ .filtered\ndiff mrtg.cfg.filtered mrtg.cfg. $$ .filtered  /dev/null DIFF = $? \n\nrm mrtg.cfg.filtered\nrm mrtg.cfg. $$ .filtered if   [[   $DIFF  -eq  0   ]] ;   then \n    rm mrtg.cfg. $$ \n     exit  0 fi \n\n/usr/local/bin/mrtg --check /etc/mrtg/mrtg.cfg. $$                   \\ \n      /bin/mv /etc/mrtg/mrtg.cfg. $$  /etc/mrtg/mrtg.cfg  \\ \n      /etc/rc.d/mrtg_daemon restart   /dev/null 2 1  Note that our header template starts MRTG as a daemon. On FreeBSD, MRTG comes with an initd script by default and you can kick it off on boot with something like the following in rc.conf:  mrtg_daemon_enable= YES \nmrtg_daemon_config= /etc/mrtg/mrtg.cfg   However, on Ubuntu it does not but it comes with a /etc/cron.d/mrtg file which kicks it off every five minutes (it will daemonise the first time and further cron jobs will have no effect). If you use this method, you will need to have your periodic update script restart / stop the daemon when the configuration changes (as demonstrated in the above script).  To start and stop it via standard initd scripts on Ubuntu, use  an initd script such as this   ( source :  cp $APPLICATION_PATH/tools/runtime/mrtg/ubuntu-mrtg-initd /etc/init.d/mrtg\nchmod +x /etc/init.d/mrtg\nupdate-rc.d mrtg defaults\n/etc/init.d/mrtg start  Remember to disable the default cron job for MRTG on Ubuntu!", 
            "title": "MRTG Setup and Configuration"
        }, 
        {
            "location": "/features/grapher/#customising-the-configuration", 
            "text": "An example of how to customise the MRTG configuration  can be found in the skinning documenation .", 
            "title": "Customising the Configuration"
        }, 
        {
            "location": "/features/grapher/#inserting-traffic-data-into-the-database-reporting-emails", 
            "text": "The MRTG backend inserts daily summaries into MySQL for reporting. An example crontab for this is:  0 2   * * *   www-data        /srv/ixpmanager/artisan grapher:upload-stats-to-db\n\n0 4   * * *   www-data        /srv/ixpmanager/artisan grapher:email-traffic-deltas --stddev=1.5 -v user1@example.com,user2@example.com\n\n30 10 * * tue www-data        /srv/ixpmanager/artisan grapher:email-port-utilisations --threshold=80 ops@inex.ie,barry.rhodes@inex.ie,eileen@inex.ie\n\n31 10 * * *   www-data        /srv/ixpmanager/artisan grapher:email-ports-with-counts --discards ops@inex.ie\n\n32 10 * * *   www-data        /srv/ixpmanager/artisan grapher:email-ports-with-counts --errors ops@inex.ie  which, in the order above, do:   Once per day, upload  yesterday's  summary of MRTG statistics into the database.  Email a report of members whose average traffic has changed by more than 1.5 times their standard deviation to  user1@example.com  and  user2@example.com .  Email a report of all ports with  =80% utilisation yesterday.  Email a report of all ports with a non-zero discard count yesterday.  Email a report of all ports with a non-zero error count yesterday.", 
            "title": "Inserting Traffic Data Into the Database / Reporting Emails"
        }, 
        {
            "location": "/features/grapher/#backend-sflow", 
            "text": "Documentation on sflow is being prepared for v4 but the  v4 documentation is stail available here .  The previous version of IXP Manager ( 4) used a script called  sflow-graph.php  which was installed on the sflow server to create graphs on demand. IXP Manager v4 does not use this but pulls the required RRD files directly.  If you have these on the same server (not typically recommended), then set the path accordingly in  .env :  GRAPHER_BACKEND_SFLOW_ROOT= /srv/ixpmatrix   If you have implemented this via a web server on the sflow server (as we typically do at INEX), then you need to expose the RRD data directory to IXP Manager using an Apache config such as:  Alias /grapher-sflow /srv/ixpmatrix Directory  /srv/ixpmatrix \n    Options None\n    AllowOverride None\n     RequireAny \n            Require ip 192.0.2.0/24\n            Require ip 2001:db8::/32\n     /RequireAny  /Directory   and update  .env  for this with something like:  GRAPHER_BACKEND_SFLOW_ROOT= http://www.example.com/grapher-sflow", 
            "title": "Backend: sflow"
        }, 
        {
            "location": "/features/helpdesk/", 
            "text": "Helpdesk Integration\n\n\n WORK IN PROGRESS - DEVELOPMENT NOTES \n\n\nAs an IXP scales, it will eventually have to replace email support via a simple alias / shared IMAP mailbox with a \nproper\n ticketing system. After extensive (and painful!) research, we at INEX chose \nZendesk\n as the system that most matched our budget and required features (1).\n\n\nWhile your mileage may vary on this - or you may already have something else - please note that the reference implementation for helpdesk integration on IXP Manager is Zendesk. So, if you haven't already chosen one, Zendesk will provide maximum integration with minimal pain.\n\n\n\n\nPlease do not open a feature request for other helpdesk implementations as the authors cannot undertake such additional work. If you wish to have integration with another helpdesk implemented, please consider \ncommercial support\n\n\n\n\nFeatures Supported\n\n\nIXP Manager currently supports:\n\n\n\n\ncreation and update of customers / organisations in Zendesk\n\n\ncreation and update of contacts / users in Zendesk\n\n\nfinding tickets by customer / organisation\n\n\n\n\nWork that is in progress includes:\n\n\n\n\nallow users to create, update and close tickets in IXP Manager\n\n\nlist all tickets per organisation (for admins and users)\n\n\n\n\nConfiguration\n\n\nAs Zendesk is the only implementation currently, this refers only to Zendesk.\n\n\nZendesk\n\n\nYou need to enable API access to Zendesk as follows:\n\n\n\n\nLog into your Zendesk account\n\n\nOn the bottom left, click the Settings icon\n\n\nUnder \nChannels\n select \nAPI\n\n\nEnable the API here and add a token\n\n\n\n\nWith your Zendesk login and the token from above, edit the \n.env\n file in the base directory of IXP Manager and set:\n\n\nHELPDESK_BACKEND=zendesk\nHELPDESK_ZENDESK_SUBDOMAIN=ixp\nHELPDESK_ZENDESK_TOKEN=yyy\nHELPDESK_ZENDESK_EMAIL=john.doe@example.com\n\n\n\n\n\nYou can now test that your settings are correct with: \nFIXME\n\n\nImplementation Development\n\n\nThe helpdesk implementation in IXP Manager is designed using contracts and service providers. I.e. it is done \nThe Right Way (tm)\n.\n\n\nThe reference implementation is for Zendesk but it's coded to a contract (interface) at \napp/Contracts/Helpdesk.php\n.\n\n\nThe actual Zendesk implementation can be found at: \napp/Services/Helpdesk/Zendesk.php\n.\n\n\nThe good news here is if you want another helpdesk supported, you just need to:\n\n\n\n\ncreate an implementation like the Zendesk one above\n\n\nupdate the \nswitch()\n statement in \napp/Providers/HelpdeskServiceProvider.php\n\n\nopen a pull request for IXP Manager and this documentation\n\n\n\n\n(1) Actually, Zendesk wasn't our first ticketing system. For a number of years we used \nCerb\n but it didn't stay current in terms of modern HTML UI/UX and it suffered from feature bloat. One requirement for our replacement was a decent API and with Zendesk's API we were able to migrate all our old tickets \nusing this script\n.", 
            "title": "Helpdesk Integration"
        }, 
        {
            "location": "/features/helpdesk/#helpdesk-integration", 
            "text": "WORK IN PROGRESS - DEVELOPMENT NOTES   As an IXP scales, it will eventually have to replace email support via a simple alias / shared IMAP mailbox with a  proper  ticketing system. After extensive (and painful!) research, we at INEX chose  Zendesk  as the system that most matched our budget and required features (1).  While your mileage may vary on this - or you may already have something else - please note that the reference implementation for helpdesk integration on IXP Manager is Zendesk. So, if you haven't already chosen one, Zendesk will provide maximum integration with minimal pain.   Please do not open a feature request for other helpdesk implementations as the authors cannot undertake such additional work. If you wish to have integration with another helpdesk implemented, please consider  commercial support", 
            "title": "Helpdesk Integration"
        }, 
        {
            "location": "/features/helpdesk/#features-supported", 
            "text": "IXP Manager currently supports:   creation and update of customers / organisations in Zendesk  creation and update of contacts / users in Zendesk  finding tickets by customer / organisation   Work that is in progress includes:   allow users to create, update and close tickets in IXP Manager  list all tickets per organisation (for admins and users)", 
            "title": "Features Supported"
        }, 
        {
            "location": "/features/helpdesk/#configuration", 
            "text": "As Zendesk is the only implementation currently, this refers only to Zendesk.", 
            "title": "Configuration"
        }, 
        {
            "location": "/features/helpdesk/#zendesk", 
            "text": "You need to enable API access to Zendesk as follows:   Log into your Zendesk account  On the bottom left, click the Settings icon  Under  Channels  select  API  Enable the API here and add a token   With your Zendesk login and the token from above, edit the  .env  file in the base directory of IXP Manager and set:  HELPDESK_BACKEND=zendesk\nHELPDESK_ZENDESK_SUBDOMAIN=ixp\nHELPDESK_ZENDESK_TOKEN=yyy\nHELPDESK_ZENDESK_EMAIL=john.doe@example.com  You can now test that your settings are correct with:  FIXME", 
            "title": "Zendesk"
        }, 
        {
            "location": "/features/helpdesk/#implementation-development", 
            "text": "The helpdesk implementation in IXP Manager is designed using contracts and service providers. I.e. it is done  The Right Way (tm) .  The reference implementation is for Zendesk but it's coded to a contract (interface) at  app/Contracts/Helpdesk.php .  The actual Zendesk implementation can be found at:  app/Services/Helpdesk/Zendesk.php .  The good news here is if you want another helpdesk supported, you just need to:   create an implementation like the Zendesk one above  update the  switch()  statement in  app/Providers/HelpdeskServiceProvider.php  open a pull request for IXP Manager and this documentation   (1) Actually, Zendesk wasn't our first ticketing system. For a number of years we used  Cerb  but it didn't stay current in terms of modern HTML UI/UX and it suffered from feature bloat. One requirement for our replacement was a decent API and with Zendesk's API we were able to migrate all our old tickets  using this script .", 
            "title": "Implementation Development"
        }, 
        {
            "location": "/features/irrdb/", 
            "text": "IRRDB Prefixes and ASN Filtering\n\n\n\n\nPrerequisite Reading:\n Ensure you first familiarize yourself with \nthe generic documentation on managing and generating router configurations here\n.\n\n\n\n\nIXP Manager can maintain a list of member route:/route6: prefixes and origin ASNs as registered in IRRDBs in its database and then use these to, for example, generate strict inbound filters on route servers.\n\n\nSetup\n\n\nYou need to have set up some IRRDB sources (e.g. RIPE's whois service) under the \nIXP Admin Actions / IRRDB Configuration\n on the left hand side menu. If this wasn't done as part of an upgrade from v3 / your initial installation then there is a database seeder you can use to install some to start you off:\n\n\ncd\n \n$IXPROOT\n\n./artisan db:seed --class\n=\nIRRDBs\n\n\n\n\n\nBGPQ3\n is a very easy and fast way of querying IRRDBs. You first need to install this on your system. On Ubuntu 16.04 this is as easy as:\n\n\napt install bgpq3\n\n\n\n\n\nThen configure the path to it in \nconfig/ixp_tools.php\n. If you have not used this file before, you'll need to create your own local copy as follows:\n\n\ncp config/config/ixp_tools.php.dist config/config/ixp_tools.php\n\n\n\n\n\nThen set the full call path for \nbgpq3\n in this file:\n\n\n?php\n\n\n  \nirrdb\n \n=\n \n[\n\n        \nbgpq\n \n=\n \n[\n\n            \npath\n \n=\n \n/path/to/bgpq3\n,\n\n        \n],\n\n    \n],\n\n\n\n\n\n\nUsage\n\n\nTo populate (and update) your local IRRDB, run the following commands:\n\n\ncd $IXPROOT\nphp artisan irrdb:update-prefix-db\nphp artisan irrdb:update-asn-db\n\n\n\n\n\nThese should be added to cron to run ~once per day (using the --quiet flag).\n\n\nThere are four levels of verbosity:\n\n\n\n\n--quiet\n: no output unless there's an error / issue.\n\n\nno option: simple stats on each customer's update results.\n\n\n-vv\n: include per customer and overall timings (database, processing and network).\n\n\n-vvv\n (debug): show prefixes/ASNs added remove also.\n\n\n\n\nYou can also specify a specific customer to update (rather than all) with an additional free form parameter. The database is searched for a matching customer in the order: customer ASN; customer ID (database primary key); and customer shortname. E.g.:\n\n\nphp artisan irrdb:update-prefix-db 64511\n\n\n\n\n\nDetails\n\n\nThe IRRDB update commands will:\n\n\n\n\niterate over all route server client customers for IPv4 and IPv6 (unless a specific customer is specified);\n\n\nuse the appropriate AS macro or ASN;\n\n\nquery the RADB against the appropriate source set for that customer;\n\n\ncompare prefixes(/ASNs) in the database already (if any) against RADB and insert / delete as appropriate;\n\n\nvalidate the prefix for proper CIDR notation before database inserts;\n\n\nupdate the last_seen time for all prefixes(/ASNs) for that customer;\n\n\n\n\nWe use transactions to update the database so, even in the middle of a refresh, a full set of prefixes for all customers will still be available.\n It also means the update process can be safely interrupted.\n\n\nNote that our current implementation only queries RADB as BGPQ3 does not support the RIPE whois protocol.\n Our version will however set the RADB source database according to the member's stated IRRDB database as set on the customer add / edit page - so, for customer's registered with the RIPE IRRDB, the RIPE database of RADB is queried.", 
            "title": "IRRDB"
        }, 
        {
            "location": "/features/irrdb/#irrdb-prefixes-and-asn-filtering", 
            "text": "Prerequisite Reading:  Ensure you first familiarize yourself with  the generic documentation on managing and generating router configurations here .   IXP Manager can maintain a list of member route:/route6: prefixes and origin ASNs as registered in IRRDBs in its database and then use these to, for example, generate strict inbound filters on route servers.", 
            "title": "IRRDB Prefixes and ASN Filtering"
        }, 
        {
            "location": "/features/irrdb/#setup", 
            "text": "You need to have set up some IRRDB sources (e.g. RIPE's whois service) under the  IXP Admin Actions / IRRDB Configuration  on the left hand side menu. If this wasn't done as part of an upgrade from v3 / your initial installation then there is a database seeder you can use to install some to start you off:  cd   $IXPROOT \n./artisan db:seed --class = IRRDBs  BGPQ3  is a very easy and fast way of querying IRRDBs. You first need to install this on your system. On Ubuntu 16.04 this is as easy as:  apt install bgpq3  Then configure the path to it in  config/ixp_tools.php . If you have not used this file before, you'll need to create your own local copy as follows:  cp config/config/ixp_tools.php.dist config/config/ixp_tools.php  Then set the full call path for  bgpq3  in this file:  ?php \n\n   irrdb   =   [ \n         bgpq   =   [ \n             path   =   /path/to/bgpq3 , \n         ], \n     ],", 
            "title": "Setup"
        }, 
        {
            "location": "/features/irrdb/#usage", 
            "text": "To populate (and update) your local IRRDB, run the following commands:  cd $IXPROOT\nphp artisan irrdb:update-prefix-db\nphp artisan irrdb:update-asn-db  These should be added to cron to run ~once per day (using the --quiet flag).  There are four levels of verbosity:   --quiet : no output unless there's an error / issue.  no option: simple stats on each customer's update results.  -vv : include per customer and overall timings (database, processing and network).  -vvv  (debug): show prefixes/ASNs added remove also.   You can also specify a specific customer to update (rather than all) with an additional free form parameter. The database is searched for a matching customer in the order: customer ASN; customer ID (database primary key); and customer shortname. E.g.:  php artisan irrdb:update-prefix-db 64511", 
            "title": "Usage"
        }, 
        {
            "location": "/features/irrdb/#details", 
            "text": "The IRRDB update commands will:   iterate over all route server client customers for IPv4 and IPv6 (unless a specific customer is specified);  use the appropriate AS macro or ASN;  query the RADB against the appropriate source set for that customer;  compare prefixes(/ASNs) in the database already (if any) against RADB and insert / delete as appropriate;  validate the prefix for proper CIDR notation before database inserts;  update the last_seen time for all prefixes(/ASNs) for that customer;   We use transactions to update the database so, even in the middle of a refresh, a full set of prefixes for all customers will still be available.  It also means the update process can be safely interrupted.  Note that our current implementation only queries RADB as BGPQ3 does not support the RIPE whois protocol.  Our version will however set the RADB source database according to the member's stated IRRDB database as set on the customer add / edit page - so, for customer's registered with the RIPE IRRDB, the RIPE database of RADB is queried.", 
            "title": "Details"
        }, 
        {
            "location": "/features/ixf-export/", 
            "text": "IX-F Member List Export\n\n\nThe \nIX-F Member Export\n is an agreed and standardized JSON schema which allows IXPs to make their member lists available for consumption by tools such as PeeringDB, networks with automated peering managers, prospective members and the many other tools appearing in the peering eco-system.\n\n\nThe key element of the IX-F Member Export is it makes you, the individual IXP, the canonical trusted source for data about \nyour own IXP\n. Data that is guaranteed to be correct and up to date.\n\n\nTo find out more about the JSON schema and see examples, you can \nexplore any of the public IXP end points available here\n or see the GitHub \neuro-ix/json-schemas\n repository.\n\n\nIXP Manager\n supports the IX-F Member List Export out of the box. It previously supported all versions from 0.3 to 0.5 but as of May 2017, we now only support 0.6. This is because this has become the stable common version.\n\n\nAccessing the IX-F Member List\n\n\nIf your version of IXP Manager is installed at, say, \nhttps://ixp.example.com/\n, then the IX-F Member List export can be accessed at:\n\n\nhttps://ixp.example.com/api/v4/member-export/ixf/0.6\n\n\n\n\n\nwhere \n0.6\n is a version parameter which allows for support of potential future versions.\n\n\nNote that the publically accessable version does not include individiual member details such as name (ASN is provided), max prefixes, MAC addresses, contact email and phone, when the member joined, member's web address, peering policy, NOC website, NOC hours or member type. This information is available to any logged in users or users querying \nthe API with an API key\n.\n\n\nRegistering Your API Endpoint\n\n\nRegister your IX-F Member List export on the \nIXF Member List Directory Service\n at http://ml.ix-f.net/.\n\n\nConfiguration Options\n\n\nThere is only one configuration option presently available. To disable public access to the restricted member export, set the following in your \n.env\n file:\n\n\nIXP_API_JSONEXPORTSCHEMA_PUBLIC=false\n\n\n\n\n\nWe strongly advise you not to disable public access if you are a standard IXP.\n Remember, the public version is essentially the same list as you would provide on your standard website's list of members.\n\n\nIn addition, membership of an IXP is easily discernable from a number of other sources including:\n\n\n\n\nPeeringDB\n\n\nRoute collectors (your own, PCH, members\u2019 own, ...)\n\n\nLooking glasses\n\n\nTraceroutes (and tools such as: https://www.inex.ie/ard/ )\n\n\nRIPE RRC\u2019s / RIS, RIPE Atlas\n\n\nCommercial products (Noction, ...)\n\n\n\n\nLeave public access available, own your own data, ensure it's validy and advertise it!", 
            "title": "IX-F Member Export"
        }, 
        {
            "location": "/features/ixf-export/#ix-f-member-list-export", 
            "text": "The  IX-F Member Export  is an agreed and standardized JSON schema which allows IXPs to make their member lists available for consumption by tools such as PeeringDB, networks with automated peering managers, prospective members and the many other tools appearing in the peering eco-system.  The key element of the IX-F Member Export is it makes you, the individual IXP, the canonical trusted source for data about  your own IXP . Data that is guaranteed to be correct and up to date.  To find out more about the JSON schema and see examples, you can  explore any of the public IXP end points available here  or see the GitHub  euro-ix/json-schemas  repository.  IXP Manager  supports the IX-F Member List Export out of the box. It previously supported all versions from 0.3 to 0.5 but as of May 2017, we now only support 0.6. This is because this has become the stable common version.", 
            "title": "IX-F Member List Export"
        }, 
        {
            "location": "/features/ixf-export/#accessing-the-ix-f-member-list", 
            "text": "If your version of IXP Manager is installed at, say,  https://ixp.example.com/ , then the IX-F Member List export can be accessed at:  https://ixp.example.com/api/v4/member-export/ixf/0.6  where  0.6  is a version parameter which allows for support of potential future versions.  Note that the publically accessable version does not include individiual member details such as name (ASN is provided), max prefixes, MAC addresses, contact email and phone, when the member joined, member's web address, peering policy, NOC website, NOC hours or member type. This information is available to any logged in users or users querying  the API with an API key .", 
            "title": "Accessing the IX-F Member List"
        }, 
        {
            "location": "/features/ixf-export/#registering-your-api-endpoint", 
            "text": "Register your IX-F Member List export on the  IXF Member List Directory Service  at http://ml.ix-f.net/.", 
            "title": "Registering Your API Endpoint"
        }, 
        {
            "location": "/features/ixf-export/#configuration-options", 
            "text": "There is only one configuration option presently available. To disable public access to the restricted member export, set the following in your  .env  file:  IXP_API_JSONEXPORTSCHEMA_PUBLIC=false  We strongly advise you not to disable public access if you are a standard IXP.  Remember, the public version is essentially the same list as you would provide on your standard website's list of members.  In addition, membership of an IXP is easily discernable from a number of other sources including:   PeeringDB  Route collectors (your own, PCH, members\u2019 own, ...)  Looking glasses  Traceroutes (and tools such as: https://www.inex.ie/ard/ )  RIPE RRC\u2019s / RIS, RIPE Atlas  Commercial products (Noction, ...)   Leave public access available, own your own data, ensure it's validy and advertise it!", 
            "title": "Configuration Options"
        }, 
        {
            "location": "/features/layer2-addresses/", 
            "text": "Layer2 / MAC Addresses\n\n\nIXP Manager has support for layer2 / MAC addresses in two ways:\n\n\n\n\nMAC Addresses\n: a read-only table via an admin menu option called \nMAC Addresses\n which lists entries from a database of MAC addresses which are sourced via a script from the IXP's switches directly. \n(Available since version 3.x)\n.\n\n\nLayer2 Addresses\n: a managed table of layer2 addresses, viewed by the admin menu option \nLayer2 Addresses\n. These are assigned by IXP administrators on a per VLAN interface basis. \n(Available since version 4.4)\n.\n\n\n\n\nLayer2 Addresses\n\n\nIn early 2017, \nINEX\n migrated its primary peering LAN from a flat layer2 with spanning tree design to a VxLAN set-up with automation via Salt and Napalm \n(we will insert references to presentations here once we complete all required functionality)\n.\n\n\nPart of the requirements for this automation (and this was an existing feature request from other IXPs) was the management of layer2 addresses within IXP Manager and, rather than assigning them to a virtual interface, assign them to specific VLAN interfaces.\n\n\nOutside of our automation and VxLAN, other uses included:\n\n\n\n\nto potentially allow members to add a MAC address during maintenance and thus have the system update a layer2 acl on the switch(es);\n\n\na static maintained database of MAC addresses for EVPN;\n\n\na static maintained database for lookups.\n\n\n\n\nThe features of this system are listed below.\n\n\nListing and Searching Existing Layer2 Addresses\n\n\nThere is a new menu option (left hand side menu) under \nMAC/L2 Addresses\n called \nLayer2 Addresses\n. This lists all configured layer2 addresses including the OUI manufacturer (see below), associated switch / switch port(s), customer name, IPv4 and v6 addresses. You can also:\n\n\n\n\nas-you-type search from the datatable search box (lowercased and filtered to a normalised MAC address);\n\n\nrestrict the view to a single VLAN;\n\n\naction-to-move to layer 2 address add / edit / delete for a given VLAN interface;\n\n\nclick on a MAC to bring up a pop-up, allowing you to copy in different formats:\n\n\n\n\n\n\nAdding / Removing Layer2 Addresses to/from a VLAN Interface\n\n\nWhen editing a customer's interface in the usual manner (customer overview -\n Ports -\n edit button), you will now see a layer2 address under \nVLAN Interfaces\n:\n\n\n\n\nIn the event that there is zero or more than one layer2 address, the layer2 address demonstrated above will be replaced with an appropriate note to indicate this.\n\n\nClicking on the layer2 address (or note when none  / multiple) will bring you to the layer2 address management page for this VLAN interface. Addresses can be added / removed on this page. Layer2 addresses can be entered in either upper or lower cases and can optionally include characters such as \n.\n, \n:\n, \n-\n. These are all stripped before validation and insertion.\n\n\nExtracting Addresses\n\n\nAs automation features are still a work in progress, not all methods are listed here. Please \nopen an issue on GitHub\n or start a discussion on the \nmailing list\n for whatever methods you would like.\n\n\nCurrently implemented:\n\n\n\n\nA soon to be added API to be used by the sflow / peer to peer graphing tool.\n\n\nYAML export for Salt. As yet undocumented and not suitable for general use.\n\n\nQuerying the database directly. \nNot usually recommended as the schema may change.\n\n\n\n\nMigrating Read-Only to Read/Write\n\n\nINEX's use case was to switch from the read only \nMAC Addresses\n table to this table without the need to data fill all preexisting ~200 MACs. As such we have created an Artisan migration script which can be run with:\n\n\nphp \n$IXPROOT\n/artisan l2addresses:populate\n\n\n\n\n\nYou will be prompted as follows:\n\n\n\n\nAre you sure you wish to proceed? This command will CLEAR the layer2address table and then copy addresses from the read-only macaddress table. Generally, this command should only ever be run once when initially populating the new table.\n\n\n\n\nOne thing to note: as the \nMAC Addresses\n table is per virtual interface and the new layer2 address functionality is per VLAN interface, any MAC from \nMAC Addresses\n that is populated into \nLayer2 Addresses\n will be populated for every VLAN interface associated with the virtual interface.\n\n\nThe script prints notices for these such as:\n\n\n\n\nCreated \n1 layer2address for [member name]] with virtual interface: https://www.example.com/ixp/virtual-interface/edit/id/235\n\n\n\n\nThe inclusion of the URL makes it easy to double check the result.\n\n\nFor obvious reasons, we only allow a single / unique layer2 address per VLAN. In the event that the script tries to add the same MAC more than once, it will print:\n\n\n\n\nCould not add additional instance of 001122334455 for [Customer]] with virtual interface: https://www.example.com/ixp/virtual-interface/edit/id/265 as it already exists in this Vlan [VLAN name]\n\n\n\n\nThese should all be checked manually.\n\n\nA useful SQL command to double check the results for me was:\n\n\nSELECT\n \nmac\n,\n \nCOUNT\n(\nmac\n)\n \nAS\n \nc\n \nFROM\n \nl2address\n \nGROUP\n \nBY\n \nmac\n \nHAVING\n \nCOUNT\n(\nmac\n)\n \n \n1\n;\n\n\n\n\n\n\nMAC Addresses\n\n\nThis was the original functionality - a read-only table via an admin menu option called \nMAC Addresses\n which lists entries from a database of MAC addresses which are sourced via a script from the IXP's switches directly.\n\n\nAt an IXP, it can be extremely useful to have a quick look up table to see what member owns what MAC address - especially when they start injecting illegal packets into the exchange fabric.\n\n\nWe have a script, \nupdate-l2database.pl\n, for this. To set it up (using Ubuntu as an example=), proceed as below. We are in the process of trying to reduce the reliance on the perl library and direct database access. But for now, this script still requires it.\n\n\n# If you haven\nt already, install the Perl library for IXP Manager:\n\napt-get install libnet-snmp-perl libconfig-general-perl libnetaddr-ip-perl\n\ncd\n \n$IXPROOT\n/tools/perl-lib/IXPManager\nperl Makefile.PL\nmake install\n\n\n# Then copy and edit the configuration file to set the database connection settings:\n\ncp \n$IXPROOT\n/tools/perl-lib/IXPManager/ixpmanager.conf /usr/local/etc/\njoe /usr/local/etc/ixpmanager.conf \n#and set database settings\n\n\n\n# Now copy the script:\n\ncp \n$IXPROOT\n/tools/runtime/l2database/update-l2database.pl /usr/local/bin\n\n\n# and then add it to your periodic cron job with:\n\n/usr/local/bin/update-l2database.pl\n\n\n\n\n\nOUI Database\n\n\nIXP Manager can store the IEEE OUI database and reference it to show the manufacturer behind a MAC address.\n\n\nPopulating and Updating the OUI Database\n\n\nYou would typically set a weekly cron job to call:\n\n\nphp \n$IXPROOT\n/artisan utils:oui-update\n\n\n\n\n\nwhich will populate / update the OUI database directly from the latest IEEE file from their website.\n\n\nA specific file can be passed via the \nfile\n parameter. You can also force a database reset (drop all OUI entries and re-populate) via the \n--refresh\n option.\n\n\nNeither of these options are typically necessary.", 
            "title": "Layer2 Addresses"
        }, 
        {
            "location": "/features/layer2-addresses/#layer2-mac-addresses", 
            "text": "IXP Manager has support for layer2 / MAC addresses in two ways:   MAC Addresses : a read-only table via an admin menu option called  MAC Addresses  which lists entries from a database of MAC addresses which are sourced via a script from the IXP's switches directly.  (Available since version 3.x) .  Layer2 Addresses : a managed table of layer2 addresses, viewed by the admin menu option  Layer2 Addresses . These are assigned by IXP administrators on a per VLAN interface basis.  (Available since version 4.4) .", 
            "title": "Layer2 / MAC Addresses"
        }, 
        {
            "location": "/features/layer2-addresses/#layer2-addresses", 
            "text": "In early 2017,  INEX  migrated its primary peering LAN from a flat layer2 with spanning tree design to a VxLAN set-up with automation via Salt and Napalm  (we will insert references to presentations here once we complete all required functionality) .  Part of the requirements for this automation (and this was an existing feature request from other IXPs) was the management of layer2 addresses within IXP Manager and, rather than assigning them to a virtual interface, assign them to specific VLAN interfaces.  Outside of our automation and VxLAN, other uses included:   to potentially allow members to add a MAC address during maintenance and thus have the system update a layer2 acl on the switch(es);  a static maintained database of MAC addresses for EVPN;  a static maintained database for lookups.   The features of this system are listed below.", 
            "title": "Layer2 Addresses"
        }, 
        {
            "location": "/features/layer2-addresses/#listing-and-searching-existing-layer2-addresses", 
            "text": "There is a new menu option (left hand side menu) under  MAC/L2 Addresses  called  Layer2 Addresses . This lists all configured layer2 addresses including the OUI manufacturer (see below), associated switch / switch port(s), customer name, IPv4 and v6 addresses. You can also:   as-you-type search from the datatable search box (lowercased and filtered to a normalised MAC address);  restrict the view to a single VLAN;  action-to-move to layer 2 address add / edit / delete for a given VLAN interface;  click on a MAC to bring up a pop-up, allowing you to copy in different formats:", 
            "title": "Listing and Searching Existing Layer2 Addresses"
        }, 
        {
            "location": "/features/layer2-addresses/#adding-removing-layer2-addresses-tofrom-a-vlan-interface", 
            "text": "When editing a customer's interface in the usual manner (customer overview -  Ports -  edit button), you will now see a layer2 address under  VLAN Interfaces :   In the event that there is zero or more than one layer2 address, the layer2 address demonstrated above will be replaced with an appropriate note to indicate this.  Clicking on the layer2 address (or note when none  / multiple) will bring you to the layer2 address management page for this VLAN interface. Addresses can be added / removed on this page. Layer2 addresses can be entered in either upper or lower cases and can optionally include characters such as  . ,  : ,  - . These are all stripped before validation and insertion.", 
            "title": "Adding / Removing Layer2 Addresses to/from a VLAN Interface"
        }, 
        {
            "location": "/features/layer2-addresses/#extracting-addresses", 
            "text": "As automation features are still a work in progress, not all methods are listed here. Please  open an issue on GitHub  or start a discussion on the  mailing list  for whatever methods you would like.  Currently implemented:   A soon to be added API to be used by the sflow / peer to peer graphing tool.  YAML export for Salt. As yet undocumented and not suitable for general use.  Querying the database directly.  Not usually recommended as the schema may change.", 
            "title": "Extracting Addresses"
        }, 
        {
            "location": "/features/layer2-addresses/#migrating-read-only-to-readwrite", 
            "text": "INEX's use case was to switch from the read only  MAC Addresses  table to this table without the need to data fill all preexisting ~200 MACs. As such we have created an Artisan migration script which can be run with:  php  $IXPROOT /artisan l2addresses:populate  You will be prompted as follows:   Are you sure you wish to proceed? This command will CLEAR the layer2address table and then copy addresses from the read-only macaddress table. Generally, this command should only ever be run once when initially populating the new table.   One thing to note: as the  MAC Addresses  table is per virtual interface and the new layer2 address functionality is per VLAN interface, any MAC from  MAC Addresses  that is populated into  Layer2 Addresses  will be populated for every VLAN interface associated with the virtual interface.  The script prints notices for these such as:   Created  1 layer2address for [member name]] with virtual interface: https://www.example.com/ixp/virtual-interface/edit/id/235   The inclusion of the URL makes it easy to double check the result.  For obvious reasons, we only allow a single / unique layer2 address per VLAN. In the event that the script tries to add the same MAC more than once, it will print:   Could not add additional instance of 001122334455 for [Customer]] with virtual interface: https://www.example.com/ixp/virtual-interface/edit/id/265 as it already exists in this Vlan [VLAN name]   These should all be checked manually.  A useful SQL command to double check the results for me was:  SELECT   mac ,   COUNT ( mac )   AS   c   FROM   l2address   GROUP   BY   mac   HAVING   COUNT ( mac )     1 ;", 
            "title": "Migrating Read-Only to Read/Write"
        }, 
        {
            "location": "/features/layer2-addresses/#mac-addresses", 
            "text": "This was the original functionality - a read-only table via an admin menu option called  MAC Addresses  which lists entries from a database of MAC addresses which are sourced via a script from the IXP's switches directly.  At an IXP, it can be extremely useful to have a quick look up table to see what member owns what MAC address - especially when they start injecting illegal packets into the exchange fabric.  We have a script,  update-l2database.pl , for this. To set it up (using Ubuntu as an example=), proceed as below. We are in the process of trying to reduce the reliance on the perl library and direct database access. But for now, this script still requires it.  # If you haven t already, install the Perl library for IXP Manager: \napt-get install libnet-snmp-perl libconfig-general-perl libnetaddr-ip-perl cd   $IXPROOT /tools/perl-lib/IXPManager\nperl Makefile.PL\nmake install # Then copy and edit the configuration file to set the database connection settings: \ncp  $IXPROOT /tools/perl-lib/IXPManager/ixpmanager.conf /usr/local/etc/\njoe /usr/local/etc/ixpmanager.conf  #and set database settings  # Now copy the script: \ncp  $IXPROOT /tools/runtime/l2database/update-l2database.pl /usr/local/bin # and then add it to your periodic cron job with: \n/usr/local/bin/update-l2database.pl", 
            "title": "MAC Addresses"
        }, 
        {
            "location": "/features/layer2-addresses/#oui-database", 
            "text": "IXP Manager can store the IEEE OUI database and reference it to show the manufacturer behind a MAC address.", 
            "title": "OUI Database"
        }, 
        {
            "location": "/features/layer2-addresses/#populating-and-updating-the-oui-database", 
            "text": "You would typically set a weekly cron job to call:  php  $IXPROOT /artisan utils:oui-update  which will populate / update the OUI database directly from the latest IEEE file from their website.  A specific file can be passed via the  file  parameter. You can also force a database reset (drop all OUI entries and re-populate) via the  --refresh  option.  Neither of these options are typically necessary.", 
            "title": "Populating and Updating the OUI Database"
        }, 
        {
            "location": "/features/looking-glass/", 
            "text": "Looking Glass\n\n\nIXP Manager supports full looking glass features when using the Bird BGP daemon and \nBirdseye\n \n(a simple secure micro service for querying Bird)\n.\n\n\nA fully working example of this can be seen \nhere on INEX's IXP Manager\n.\n\n\nEnabling the looking glass just requires:\n\n\n\n\nproperly configured \nrouter(s)\n.\n\n\nBirdseye\n installed on these.\n\n\nthe API endpoint must be accessible from the server running IXP Manager and this endpoint must be set correctly in the \nconfig/routers.php\n file (along with \nlg_access\n). Note that the Birdseye API end points do not need to be publicly accessible - just from the IXP Manager server.\n\n\nset the \n.env\n option: \nIXP_FE_FRONTEND_DISABLED_LOOKING_GLASS=false\n.", 
            "title": "Looking Glass"
        }, 
        {
            "location": "/features/looking-glass/#looking-glass", 
            "text": "IXP Manager supports full looking glass features when using the Bird BGP daemon and  Birdseye   (a simple secure micro service for querying Bird) .  A fully working example of this can be seen  here on INEX's IXP Manager .  Enabling the looking glass just requires:   properly configured  router(s) .  Birdseye  installed on these.  the API endpoint must be accessible from the server running IXP Manager and this endpoint must be set correctly in the  config/routers.php  file (along with  lg_access ). Note that the Birdseye API end points do not need to be publicly accessible - just from the IXP Manager server.  set the  .env  option:  IXP_FE_FRONTEND_DISABLED_LOOKING_GLASS=false .", 
            "title": "Looking Glass"
        }, 
        {
            "location": "/features/layer2-addresses/", 
            "text": "Layer2 / MAC Addresses\n\n\nIXP Manager has support for layer2 / MAC addresses in two ways:\n\n\n\n\nMAC Addresses\n: a read-only table via an admin menu option called \nMAC Addresses\n which lists entries from a database of MAC addresses which are sourced via a script from the IXP's switches directly. \n(Available since version 3.x)\n.\n\n\nLayer2 Addresses\n: a managed table of layer2 addresses, viewed by the admin menu option \nLayer2 Addresses\n. These are assigned by IXP administrators on a per VLAN interface basis. \n(Available since version 4.4)\n.\n\n\n\n\nLayer2 Addresses\n\n\nIn early 2017, \nINEX\n migrated its primary peering LAN from a flat layer2 with spanning tree design to a VxLAN set-up with automation via Salt and Napalm \n(we will insert references to presentations here once we complete all required functionality)\n.\n\n\nPart of the requirements for this automation (and this was an existing feature request from other IXPs) was the management of layer2 addresses within IXP Manager and, rather than assigning them to a virtual interface, assign them to specific VLAN interfaces.\n\n\nOutside of our automation and VxLAN, other uses included:\n\n\n\n\nto potentially allow members to add a MAC address during maintenance and thus have the system update a layer2 acl on the switch(es);\n\n\na static maintained database of MAC addresses for EVPN;\n\n\na static maintained database for lookups.\n\n\n\n\nThe features of this system are listed below.\n\n\nListing and Searching Existing Layer2 Addresses\n\n\nThere is a new menu option (left hand side menu) under \nMAC/L2 Addresses\n called \nLayer2 Addresses\n. This lists all configured layer2 addresses including the OUI manufacturer (see below), associated switch / switch port(s), customer name, IPv4 and v6 addresses. You can also:\n\n\n\n\nas-you-type search from the datatable search box (lowercased and filtered to a normalised MAC address);\n\n\nrestrict the view to a single VLAN;\n\n\naction-to-move to layer 2 address add / edit / delete for a given VLAN interface;\n\n\nclick on a MAC to bring up a pop-up, allowing you to copy in different formats:\n\n\n\n\n\n\nAdding / Removing Layer2 Addresses to/from a VLAN Interface\n\n\nWhen editing a customer's interface in the usual manner (customer overview -\n Ports -\n edit button), you will now see a layer2 address under \nVLAN Interfaces\n:\n\n\n\n\nIn the event that there is zero or more than one layer2 address, the layer2 address demonstrated above will be replaced with an appropriate note to indicate this.\n\n\nClicking on the layer2 address (or note when none  / multiple) will bring you to the layer2 address management page for this VLAN interface. Addresses can be added / removed on this page. Layer2 addresses can be entered in either upper or lower cases and can optionally include characters such as \n.\n, \n:\n, \n-\n. These are all stripped before validation and insertion.\n\n\nExtracting Addresses\n\n\nAs automation features are still a work in progress, not all methods are listed here. Please \nopen an issue on GitHub\n or start a discussion on the \nmailing list\n for whatever methods you would like.\n\n\nCurrently implemented:\n\n\n\n\nA soon to be added API to be used by the sflow / peer to peer graphing tool.\n\n\nYAML export for Salt. As yet undocumented and not suitable for general use.\n\n\nQuerying the database directly. \nNot usually recommended as the schema may change.\n\n\n\n\nMigrating Read-Only to Read/Write\n\n\nINEX's use case was to switch from the read only \nMAC Addresses\n table to this table without the need to data fill all preexisting ~200 MACs. As such we have created an Artisan migration script which can be run with:\n\n\nphp \n$IXPROOT\n/artisan l2addresses:populate\n\n\n\n\n\nYou will be prompted as follows:\n\n\n\n\nAre you sure you wish to proceed? This command will CLEAR the layer2address table and then copy addresses from the read-only macaddress table. Generally, this command should only ever be run once when initially populating the new table.\n\n\n\n\nOne thing to note: as the \nMAC Addresses\n table is per virtual interface and the new layer2 address functionality is per VLAN interface, any MAC from \nMAC Addresses\n that is populated into \nLayer2 Addresses\n will be populated for every VLAN interface associated with the virtual interface.\n\n\nThe script prints notices for these such as:\n\n\n\n\nCreated \n1 layer2address for [member name]] with virtual interface: https://www.example.com/ixp/virtual-interface/edit/id/235\n\n\n\n\nThe inclusion of the URL makes it easy to double check the result.\n\n\nFor obvious reasons, we only allow a single / unique layer2 address per VLAN. In the event that the script tries to add the same MAC more than once, it will print:\n\n\n\n\nCould not add additional instance of 001122334455 for [Customer]] with virtual interface: https://www.example.com/ixp/virtual-interface/edit/id/265 as it already exists in this Vlan [VLAN name]\n\n\n\n\nThese should all be checked manually.\n\n\nA useful SQL command to double check the results for me was:\n\n\nSELECT\n \nmac\n,\n \nCOUNT\n(\nmac\n)\n \nAS\n \nc\n \nFROM\n \nl2address\n \nGROUP\n \nBY\n \nmac\n \nHAVING\n \nCOUNT\n(\nmac\n)\n \n \n1\n;\n\n\n\n\n\n\nMAC Addresses\n\n\nThis was the original functionality - a read-only table via an admin menu option called \nMAC Addresses\n which lists entries from a database of MAC addresses which are sourced via a script from the IXP's switches directly.\n\n\nAt an IXP, it can be extremely useful to have a quick look up table to see what member owns what MAC address - especially when they start injecting illegal packets into the exchange fabric.\n\n\nWe have a script, \nupdate-l2database.pl\n, for this. To set it up (using Ubuntu as an example=), proceed as below. We are in the process of trying to reduce the reliance on the perl library and direct database access. But for now, this script still requires it.\n\n\n# If you haven\nt already, install the Perl library for IXP Manager:\n\napt-get install libnet-snmp-perl libconfig-general-perl libnetaddr-ip-perl\n\ncd\n \n$IXPROOT\n/tools/perl-lib/IXPManager\nperl Makefile.PL\nmake install\n\n\n# Then copy and edit the configuration file to set the database connection settings:\n\ncp \n$IXPROOT\n/tools/perl-lib/IXPManager/ixpmanager.conf /usr/local/etc/\njoe /usr/local/etc/ixpmanager.conf \n#and set database settings\n\n\n\n# Now copy the script:\n\ncp \n$IXPROOT\n/tools/runtime/l2database/update-l2database.pl /usr/local/bin\n\n\n# and then add it to your periodic cron job with:\n\n/usr/local/bin/update-l2database.pl\n\n\n\n\n\nOUI Database\n\n\nIXP Manager can store the IEEE OUI database and reference it to show the manufacturer behind a MAC address.\n\n\nPopulating and Updating the OUI Database\n\n\nYou would typically set a weekly cron job to call:\n\n\nphp \n$IXPROOT\n/artisan utils:oui-update\n\n\n\n\n\nwhich will populate / update the OUI database directly from the latest IEEE file from their website.\n\n\nA specific file can be passed via the \nfile\n parameter. You can also force a database reset (drop all OUI entries and re-populate) via the \n--refresh\n option.\n\n\nNeither of these options are typically necessary.", 
            "title": "MAC Addresses"
        }, 
        {
            "location": "/features/layer2-addresses/#layer2-mac-addresses", 
            "text": "IXP Manager has support for layer2 / MAC addresses in two ways:   MAC Addresses : a read-only table via an admin menu option called  MAC Addresses  which lists entries from a database of MAC addresses which are sourced via a script from the IXP's switches directly.  (Available since version 3.x) .  Layer2 Addresses : a managed table of layer2 addresses, viewed by the admin menu option  Layer2 Addresses . These are assigned by IXP administrators on a per VLAN interface basis.  (Available since version 4.4) .", 
            "title": "Layer2 / MAC Addresses"
        }, 
        {
            "location": "/features/layer2-addresses/#layer2-addresses", 
            "text": "In early 2017,  INEX  migrated its primary peering LAN from a flat layer2 with spanning tree design to a VxLAN set-up with automation via Salt and Napalm  (we will insert references to presentations here once we complete all required functionality) .  Part of the requirements for this automation (and this was an existing feature request from other IXPs) was the management of layer2 addresses within IXP Manager and, rather than assigning them to a virtual interface, assign them to specific VLAN interfaces.  Outside of our automation and VxLAN, other uses included:   to potentially allow members to add a MAC address during maintenance and thus have the system update a layer2 acl on the switch(es);  a static maintained database of MAC addresses for EVPN;  a static maintained database for lookups.   The features of this system are listed below.", 
            "title": "Layer2 Addresses"
        }, 
        {
            "location": "/features/layer2-addresses/#listing-and-searching-existing-layer2-addresses", 
            "text": "There is a new menu option (left hand side menu) under  MAC/L2 Addresses  called  Layer2 Addresses . This lists all configured layer2 addresses including the OUI manufacturer (see below), associated switch / switch port(s), customer name, IPv4 and v6 addresses. You can also:   as-you-type search from the datatable search box (lowercased and filtered to a normalised MAC address);  restrict the view to a single VLAN;  action-to-move to layer 2 address add / edit / delete for a given VLAN interface;  click on a MAC to bring up a pop-up, allowing you to copy in different formats:", 
            "title": "Listing and Searching Existing Layer2 Addresses"
        }, 
        {
            "location": "/features/layer2-addresses/#adding-removing-layer2-addresses-tofrom-a-vlan-interface", 
            "text": "When editing a customer's interface in the usual manner (customer overview -  Ports -  edit button), you will now see a layer2 address under  VLAN Interfaces :   In the event that there is zero or more than one layer2 address, the layer2 address demonstrated above will be replaced with an appropriate note to indicate this.  Clicking on the layer2 address (or note when none  / multiple) will bring you to the layer2 address management page for this VLAN interface. Addresses can be added / removed on this page. Layer2 addresses can be entered in either upper or lower cases and can optionally include characters such as  . ,  : ,  - . These are all stripped before validation and insertion.", 
            "title": "Adding / Removing Layer2 Addresses to/from a VLAN Interface"
        }, 
        {
            "location": "/features/layer2-addresses/#extracting-addresses", 
            "text": "As automation features are still a work in progress, not all methods are listed here. Please  open an issue on GitHub  or start a discussion on the  mailing list  for whatever methods you would like.  Currently implemented:   A soon to be added API to be used by the sflow / peer to peer graphing tool.  YAML export for Salt. As yet undocumented and not suitable for general use.  Querying the database directly.  Not usually recommended as the schema may change.", 
            "title": "Extracting Addresses"
        }, 
        {
            "location": "/features/layer2-addresses/#migrating-read-only-to-readwrite", 
            "text": "INEX's use case was to switch from the read only  MAC Addresses  table to this table without the need to data fill all preexisting ~200 MACs. As such we have created an Artisan migration script which can be run with:  php  $IXPROOT /artisan l2addresses:populate  You will be prompted as follows:   Are you sure you wish to proceed? This command will CLEAR the layer2address table and then copy addresses from the read-only macaddress table. Generally, this command should only ever be run once when initially populating the new table.   One thing to note: as the  MAC Addresses  table is per virtual interface and the new layer2 address functionality is per VLAN interface, any MAC from  MAC Addresses  that is populated into  Layer2 Addresses  will be populated for every VLAN interface associated with the virtual interface.  The script prints notices for these such as:   Created  1 layer2address for [member name]] with virtual interface: https://www.example.com/ixp/virtual-interface/edit/id/235   The inclusion of the URL makes it easy to double check the result.  For obvious reasons, we only allow a single / unique layer2 address per VLAN. In the event that the script tries to add the same MAC more than once, it will print:   Could not add additional instance of 001122334455 for [Customer]] with virtual interface: https://www.example.com/ixp/virtual-interface/edit/id/265 as it already exists in this Vlan [VLAN name]   These should all be checked manually.  A useful SQL command to double check the results for me was:  SELECT   mac ,   COUNT ( mac )   AS   c   FROM   l2address   GROUP   BY   mac   HAVING   COUNT ( mac )     1 ;", 
            "title": "Migrating Read-Only to Read/Write"
        }, 
        {
            "location": "/features/layer2-addresses/#mac-addresses", 
            "text": "This was the original functionality - a read-only table via an admin menu option called  MAC Addresses  which lists entries from a database of MAC addresses which are sourced via a script from the IXP's switches directly.  At an IXP, it can be extremely useful to have a quick look up table to see what member owns what MAC address - especially when they start injecting illegal packets into the exchange fabric.  We have a script,  update-l2database.pl , for this. To set it up (using Ubuntu as an example=), proceed as below. We are in the process of trying to reduce the reliance on the perl library and direct database access. But for now, this script still requires it.  # If you haven t already, install the Perl library for IXP Manager: \napt-get install libnet-snmp-perl libconfig-general-perl libnetaddr-ip-perl cd   $IXPROOT /tools/perl-lib/IXPManager\nperl Makefile.PL\nmake install # Then copy and edit the configuration file to set the database connection settings: \ncp  $IXPROOT /tools/perl-lib/IXPManager/ixpmanager.conf /usr/local/etc/\njoe /usr/local/etc/ixpmanager.conf  #and set database settings  # Now copy the script: \ncp  $IXPROOT /tools/runtime/l2database/update-l2database.pl /usr/local/bin # and then add it to your periodic cron job with: \n/usr/local/bin/update-l2database.pl", 
            "title": "MAC Addresses"
        }, 
        {
            "location": "/features/layer2-addresses/#oui-database", 
            "text": "IXP Manager can store the IEEE OUI database and reference it to show the manufacturer behind a MAC address.", 
            "title": "OUI Database"
        }, 
        {
            "location": "/features/layer2-addresses/#populating-and-updating-the-oui-database", 
            "text": "You would typically set a weekly cron job to call:  php  $IXPROOT /artisan utils:oui-update  which will populate / update the OUI database directly from the latest IEEE file from their website.  A specific file can be passed via the  file  parameter. You can also force a database reset (drop all OUI entries and re-populate) via the  --refresh  option.  Neither of these options are typically necessary.", 
            "title": "Populating and Updating the OUI Database"
        }, 
        {
            "location": "/features/mailing-lists/", 
            "text": "Mailing List Management\n\n\nIXP Manager\n has the ability to allow users to subscribe / unsubscribe from Mailman mailing lists (it should be relatively easy to expand this to other mailing list managers as the functionality is based on Mailman but not Mailman specific).\n\n\nThe following sections explain the steps in how this is set up.\n\n\nNB:\n This facility does not perform a 100% synchronisation. Any mailing list members that are added separately without a matching user in IXP Manager are not interfered with.\n\n\nConfiguring Available Mailing Lists\n\n\nThere is a sample configuration file which you need to copy as follows:\n\n\ncd\n \n$IXPROOT\n\ncp config/mailinglists.php.dist config/mailinglists.php\n\n\n\n\n\nYou then need to edit this file as follows:\n\n\n\n\n\n\nEnable the mailing list functionality by setting this to true:\n\n\n// Set the following to \ntrue\n to enable mailing list functionality:\n\n\nenabled\n =\n true,\n\n\n\n\n\n\nIf this is not set to true, the user will not be offered subscription options and the CLI commands will not execute.\n\n\n\n\n\n\nConfigure the available mailing list(s) in the \nlists\n array. Here is an example:\n\n\nlists\n =\n [\n\n\n    \nmembers\n =\n [\n\n\n        \nname\n    =\n \nMembers\n Mailing List\n,\n\n\n        \ndesc\n    =\n \nA longer description as presented in IXP Manager.\n,\n\n\n        \nemail\n   =\n \nmembers@example.com\n,\n\n\n        \narchive\n =\n \nhttps://www.example.com/mailman/private/members/\n,\n\n\n        \nsyncpws\n =\n false,\n\n\n    ],\n\n\n    \ntech\n =\n [\n\n\n        \nname\n    =\n \nTech/Operations Mailing List\n,\n\n\n        \ndesc\n    =\n \nA longer description as presented in IXP Manager.\n,\n\n\n        \nemail\n   =\n \ntech@example.com\n,\n\n\n        \narchive\n =\n \nhttps://www.example.com/mailman/private/tech/\n\n\n        \nsyncpws\n =\n false,\n\n\n    ],\n\n\n],\n\n\n\n\n\n\nNote that the \nmembers\n and \ntech\n array keys above are the list handles that will be used by the API interfaces later. It is also important that they match the Mailman list key.\n\n\nHistorically, mailing list passwords were also sync'd from the IXP Manager user database \nunless\n \nsyncpws\n is both defined and false for the given list. As we are now recommending \nbcrypt\n as the standard password hashing mechanism, we no longer recommend this and suggest allowing Mailman to manage its own passwords.\n\n\n\n\n\n\nPaths to Mailman commands. These will be used in the API/CLI elements later:\n\n\nmailman\n =\n [\n\n\n    \ncmds\n =\n [\n\n\n        \nlist_members\n   =\n \n/usr/local/mailman/bin/list_members\n,\n\n\n        \nadd_members\n    =\n \n/usr/local/mailman/bin/add_members -r - -w n -a n\n,\n\n\n        \nremove_members\n =\n \n/usr/local/mailman/bin/remove_members -f - -n -N\n,\n\n\n        \nchangepw\n       =\n \n/usr/local/mailman/bin/withlist -q -l -r changepw\n\n\n    ]\n\n\n]\n\n\n\n\n\n\n\n\n\n\nExplanation of Usage\n\n\nThis mailing list synchronisation / integration code was written for existing Mailman lists we have at INEX where some lists are public with subscribers that will never have an account on INEX's IXP Manager. As such, these scripts are written so that email addresses in common between IXP Manager and Mailman can manage their subscriptions in IXP Manager but those other subscribers will be unaffected.\n\n\nUsers in IXP Manager will either be marked as being subscribed to a list, not subscribed to a list or neither (i.e. a new user). Subscriptions are managed by user preferences (in the database) of the format:\n\n\nmailinglist.listname1.subscribed = 0/1\n\n\n\n\n\nThere are four steps to performing the synchronisation \nfor each list\n which are done by either using the IXP Manager CLI script \n$IXPROOT/bin/ixptool.php\n or the older \nAPI V1\n interface.\n\n\nCLI Interface Overview\n\n\n\n\n\n\nThe execution of the \nmailing-list-cli.list-init\n script which is really for new IXP Manager users (or initial set up of the mailing list feature). This script is piped the full subscribers list from Mailman (via \nlist_members\n). This function will iterate through all users and, if they have no preference set for subscription to this list, will either add a \"not subscribed\" preference if their email address is not in the provided list of subscribers or a \"subscribed\" preference if it is.\n\n\n\n\n\n\nThe execution of the \nmailing-list-cli.get-subscribed\n action which lists all users who are subscribed to the given mailing list based on their user preferences. This is piped to the \nadd_members\n Mailman script.\n\n\n\n\n\n\nThe execution of the \nmailing-list-cli.get-unsubscribed\n action which lists all users who are unsubscribed to the given mailing list based on their user preferences. This is piped to the \nremove_members\n Mailman script.\n\n\n\n\n\n\nThe execution of the \nmailing-list-cli.password-sync\n action which sets the mailing list password for  all users who are unsubscribed to the given mailing list based on their IXP Manager user password. This action \nexec()\n's' the change password command directly. \nSee Password Synchronisation below.\n Unlike the above three operations, the password sync executes a command directly (via PHP \nexec()\n). If you just want to print the commands to stdout, add the parameters \n-v -p noexec=1\n.\n\n\n\n\n\n\nAPI V1 Interface Overview\n\n\nThe CLI version of mailing list management was presented above. If you wish to use the API version, proceed as follows where:\n\n\n\n\n$MyKey\n is one of your SUPERUSER API keys;\n\n\nhttps://www.example.com/ixp/\n is your IXP Manager web interface;\n\n\nmembers\n is an example mailing list handle as defined above in \n$IXPROOT/config/mailinglists.php\n.\n\n\n\n\nUse the initialisation function for new IXP Manager users (or initial set up of the mailing list feature) which updates IXP Manager with all currently subscribed mailing list members:\n\n\n/path/to/mailman/bin/list_members members \n/tmp/ml-listname1.txt\ncurl -f --data-urlencode addresses@/tmp/ml-listname1.txt \n\\\n\n    \nhttps://www.example.com/ixp/apiv1/mailing-list/init/key/\n$MyKey\n/list/members\n\nrm /tmp/ml-listname1.txt\n\n\n\n\n\nPipe all subscribed users to the \nadd_members\n Mailman script:\n\n\ncurl -f \nhttps://www.example.com/ixp/apiv1/mailing-list/get-subscribed/key/\n$MyKey\n/list/members\n \n|\n \n\\\n\n    /path/to/mailman/bin/add_members -r - -w n -a n members \n/dev/null\n\n\n\n\n\nPipe all users who are unsubscribed to the \nremove_members\n Mailman script:\n\n\ncurl -f \nhttps://www.example.com/ixp/apiv1/mailing-list/get-unsubscribed/key/\n$MyKey\n/list/members\n \n|\n \n\\\n\n    /path/to/mailman/bin/remove_members -f - -n -N members \n/dev/null\n\n\n\n\n\nSync the passwords from IXP Manager to Mailman with something like:\n\n\ncurl -f \nhttps://www.example.com/ixp/apiv1/mailing-list/password-sync/key/MyKey/list/listname1\n \n|\n \n\\\n\n    egrep \n^/path/to/mailman/bin/withlist -q -l -r changepw \n.+\n \n.+\n \n.+\n$\n | /bin/sh \n/dev/null\n\n\n\n\n\n\n(Feel free to make the above regexp more secure and update this document).\n        \n\n\nHow to Implement\n\n\nYou can implement mailing list management by configuring IXP Manager as above.\n\n\nIXP Manager will then generate shell scripts to manage all of the above.\n\n\nExecute the following command for the CLI version:\n\n\nbin/ixptool.php -a mailing-list-cli.sync-script \nbin/mailing-list-sync.sh\n\n\n\n\n\nOr the following for the API V1 version \n(and make sure to update the assignments at the top of the script)\n:\n\n\nbin/ixptool.php -a mailing-list-cli.sync-script --p1\n=\napiv1 \nbin/mailing-list-sync-apiv1.sh\n\n\n\n\n\nThis generates a script called \nmailing-list-sync[-apiv1].sh\n which performs each of the above four steps for each configured mailing list. If your mailing list configuration does not change, you will not need to rerun this.\n\n\nYou should now put this script into crontab on the appropriate server (same server for CLI!) and run as often as you feel is necessary. The current \nsuccess\n message for a user updating their subscriptions says \nwithin 12 hours\n so we'd recommend at least running twice a day.\n\n\nPassword Synchronisation\n\n\nWe now recommend against this \nfor the reasons explained here\n. We have not investigated if Mailman can support Bcrypt as of yet.\n\n\nBy default, passwords from IXP Manager users with mailing list subscriptions will be sync'd to Mailman.\n\n\nThis is done via the Mailman \nwithlist\n script and it requires a \nchangepw.py\n script to be in the same directory as \nwithlist\n and this script is not supplied by default (although it is documented). Create the following \nchangepw.py\n in the same directory as \nwithlist\n:\n\n\nfrom\n \nMailman.Errors\n \nimport\n \nNotAMemberError\n\n\n\ndef\n \nchangepw\n(\nmlist\n,\n \naddr\n,\n \nnewpasswd\n):\n\n    \ntry\n:\n\n        \nmlist\n.\nsetMemberPassword\n(\naddr\n,\n \nnewpasswd\n)\n\n        \nmlist\n.\nSave\n()\n\n    \nexcept\n \nNotAMemberError\n:\n\n        \nprint\n \nNo address matched:\n,\n \naddr\n\n\n\n\n\n\nTodo\n\n\n\n\nbetter handling of multiple users with the same email address and documentation of same\n\n\nuser changes email address", 
            "title": "Mailing List Management"
        }, 
        {
            "location": "/features/mailing-lists/#mailing-list-management", 
            "text": "IXP Manager  has the ability to allow users to subscribe / unsubscribe from Mailman mailing lists (it should be relatively easy to expand this to other mailing list managers as the functionality is based on Mailman but not Mailman specific).  The following sections explain the steps in how this is set up.  NB:  This facility does not perform a 100% synchronisation. Any mailing list members that are added separately without a matching user in IXP Manager are not interfered with.", 
            "title": "Mailing List Management"
        }, 
        {
            "location": "/features/mailing-lists/#configuring-available-mailing-lists", 
            "text": "There is a sample configuration file which you need to copy as follows:  cd   $IXPROOT \ncp config/mailinglists.php.dist config/mailinglists.php  You then need to edit this file as follows:    Enable the mailing list functionality by setting this to true:  // Set the following to  true  to enable mailing list functionality:  enabled  =  true,   If this is not set to true, the user will not be offered subscription options and the CLI commands will not execute.    Configure the available mailing list(s) in the  lists  array. Here is an example:  lists  =  [       members  =  [           name     =   Members  Mailing List ,           desc     =   A longer description as presented in IXP Manager. ,           email    =   members@example.com ,           archive  =   https://www.example.com/mailman/private/members/ ,           syncpws  =  false,      ],       tech  =  [           name     =   Tech/Operations Mailing List ,           desc     =   A longer description as presented in IXP Manager. ,           email    =   tech@example.com ,           archive  =   https://www.example.com/mailman/private/tech/           syncpws  =  false,      ],  ],   Note that the  members  and  tech  array keys above are the list handles that will be used by the API interfaces later. It is also important that they match the Mailman list key.  Historically, mailing list passwords were also sync'd from the IXP Manager user database  unless   syncpws  is both defined and false for the given list. As we are now recommending  bcrypt  as the standard password hashing mechanism, we no longer recommend this and suggest allowing Mailman to manage its own passwords.    Paths to Mailman commands. These will be used in the API/CLI elements later:  mailman  =  [       cmds  =  [           list_members    =   /usr/local/mailman/bin/list_members ,           add_members     =   /usr/local/mailman/bin/add_members -r - -w n -a n ,           remove_members  =   /usr/local/mailman/bin/remove_members -f - -n -N ,           changepw        =   /usr/local/mailman/bin/withlist -q -l -r changepw      ]  ]", 
            "title": "Configuring Available Mailing Lists"
        }, 
        {
            "location": "/features/mailing-lists/#explanation-of-usage", 
            "text": "This mailing list synchronisation / integration code was written for existing Mailman lists we have at INEX where some lists are public with subscribers that will never have an account on INEX's IXP Manager. As such, these scripts are written so that email addresses in common between IXP Manager and Mailman can manage their subscriptions in IXP Manager but those other subscribers will be unaffected.  Users in IXP Manager will either be marked as being subscribed to a list, not subscribed to a list or neither (i.e. a new user). Subscriptions are managed by user preferences (in the database) of the format:  mailinglist.listname1.subscribed = 0/1  There are four steps to performing the synchronisation  for each list  which are done by either using the IXP Manager CLI script  $IXPROOT/bin/ixptool.php  or the older  API V1  interface.", 
            "title": "Explanation of Usage"
        }, 
        {
            "location": "/features/mailing-lists/#cli-interface-overview", 
            "text": "The execution of the  mailing-list-cli.list-init  script which is really for new IXP Manager users (or initial set up of the mailing list feature). This script is piped the full subscribers list from Mailman (via  list_members ). This function will iterate through all users and, if they have no preference set for subscription to this list, will either add a \"not subscribed\" preference if their email address is not in the provided list of subscribers or a \"subscribed\" preference if it is.    The execution of the  mailing-list-cli.get-subscribed  action which lists all users who are subscribed to the given mailing list based on their user preferences. This is piped to the  add_members  Mailman script.    The execution of the  mailing-list-cli.get-unsubscribed  action which lists all users who are unsubscribed to the given mailing list based on their user preferences. This is piped to the  remove_members  Mailman script.    The execution of the  mailing-list-cli.password-sync  action which sets the mailing list password for  all users who are unsubscribed to the given mailing list based on their IXP Manager user password. This action  exec() 's' the change password command directly.  See Password Synchronisation below.  Unlike the above three operations, the password sync executes a command directly (via PHP  exec() ). If you just want to print the commands to stdout, add the parameters  -v -p noexec=1 .", 
            "title": "CLI Interface Overview"
        }, 
        {
            "location": "/features/mailing-lists/#api-v1-interface-overview", 
            "text": "The CLI version of mailing list management was presented above. If you wish to use the API version, proceed as follows where:   $MyKey  is one of your SUPERUSER API keys;  https://www.example.com/ixp/  is your IXP Manager web interface;  members  is an example mailing list handle as defined above in  $IXPROOT/config/mailinglists.php .   Use the initialisation function for new IXP Manager users (or initial set up of the mailing list feature) which updates IXP Manager with all currently subscribed mailing list members:  /path/to/mailman/bin/list_members members  /tmp/ml-listname1.txt\ncurl -f --data-urlencode addresses@/tmp/ml-listname1.txt  \\ \n     https://www.example.com/ixp/apiv1/mailing-list/init/key/ $MyKey /list/members \nrm /tmp/ml-listname1.txt  Pipe all subscribed users to the  add_members  Mailman script:  curl -f  https://www.example.com/ixp/apiv1/mailing-list/get-subscribed/key/ $MyKey /list/members   |   \\ \n    /path/to/mailman/bin/add_members -r - -w n -a n members  /dev/null  Pipe all users who are unsubscribed to the  remove_members  Mailman script:  curl -f  https://www.example.com/ixp/apiv1/mailing-list/get-unsubscribed/key/ $MyKey /list/members   |   \\ \n    /path/to/mailman/bin/remove_members -f - -n -N members  /dev/null  Sync the passwords from IXP Manager to Mailman with something like:  curl -f  https://www.example.com/ixp/apiv1/mailing-list/password-sync/key/MyKey/list/listname1   |   \\ \n    egrep  ^/path/to/mailman/bin/withlist -q -l -r changepw  .+   .+   .+ $  | /bin/sh  /dev/null   (Feel free to make the above regexp more secure and update this document).", 
            "title": "API V1 Interface Overview"
        }, 
        {
            "location": "/features/mailing-lists/#how-to-implement", 
            "text": "You can implement mailing list management by configuring IXP Manager as above.  IXP Manager will then generate shell scripts to manage all of the above.  Execute the following command for the CLI version:  bin/ixptool.php -a mailing-list-cli.sync-script  bin/mailing-list-sync.sh  Or the following for the API V1 version  (and make sure to update the assignments at the top of the script) :  bin/ixptool.php -a mailing-list-cli.sync-script --p1 = apiv1  bin/mailing-list-sync-apiv1.sh  This generates a script called  mailing-list-sync[-apiv1].sh  which performs each of the above four steps for each configured mailing list. If your mailing list configuration does not change, you will not need to rerun this.  You should now put this script into crontab on the appropriate server (same server for CLI!) and run as often as you feel is necessary. The current  success  message for a user updating their subscriptions says  within 12 hours  so we'd recommend at least running twice a day.", 
            "title": "How to Implement"
        }, 
        {
            "location": "/features/mailing-lists/#password-synchronisation", 
            "text": "We now recommend against this  for the reasons explained here . We have not investigated if Mailman can support Bcrypt as of yet.  By default, passwords from IXP Manager users with mailing list subscriptions will be sync'd to Mailman.  This is done via the Mailman  withlist  script and it requires a  changepw.py  script to be in the same directory as  withlist  and this script is not supplied by default (although it is documented). Create the following  changepw.py  in the same directory as  withlist :  from   Mailman.Errors   import   NotAMemberError  def   changepw ( mlist ,   addr ,   newpasswd ): \n     try : \n         mlist . setMemberPassword ( addr ,   newpasswd ) \n         mlist . Save () \n     except   NotAMemberError : \n         print   No address matched: ,   addr", 
            "title": "Password Synchronisation"
        }, 
        {
            "location": "/features/mailing-lists/#todo", 
            "text": "better handling of multiple users with the same email address and documentation of same  user changes email address", 
            "title": "Todo"
        }, 
        {
            "location": "/features/patch-panels/", 
            "text": "Patch Panels / Cross Connects\n\n\nOne of the more difficult things for an IXP to manage is the sheer volume of patch panels / cross connects they need to manage. We have approached the issue a number of times in IXP Manger but abandoned the attempt every time. Typically our original solutions were over-engineered where all we really needed was something which could replace a spreadsheet per panel.\n\n\nWe believe we have now developed a feature complete and useful means of managing patch panels and associated cross connects.\n\n\nFeatures\n\n\n\n\nAdd / edit patch panels  (which includes cable and connector types).\n\n\nList associated patch panel ports which includes:\n\n\ntheir state (such as available / prewired, awaiting cross connect, connected, awaiting cease, reserved, broken).\n\n\nassociated customer and/or switchport.\n\n\nco-location provider's circuit reference.\n\n\ninternal ticket references.\n\n\nTransition ports from available / prewired to awaiting x-connect to connected to awaiting cease to ceased and then available again.\n\n\nCustomer view of their cross connects.\n\n\nPublic (visible to customers) and private notes per cross connect.\n\n\nAttach public and private files to cross connects (such as test results, completion documents, order forms, etc).\n\n\nMaintain complete history of a patch panel port.\n\n\nGenerate and email LoAs (as PDF) with a URL verification function for co-location providers.\n\n\nGenerate emails for connection and cease requests as well as an email providing full customer view of a cross connect.\n\n\nTypically fibre ports are \nduplex\n ports but there is a growing use of BiDi optics meaning simplex ports. Our implementation treats all ports as simplex but you can mark it as duplex and set its partner port.\n\n\n\n\nDuplex Fibre Ports\n\n\nWe suggest adding fibre ports as two ports per duplex port. I.e. if your patch panel has 12 duplex ports, enter this as 24 ports. When allocating ports later, you can set it as a duplex port and select its \npartner / slave port\n. This will future proof your patch panels for the growing use of bidi optics and other simplex based xWDM fibre solutions.\n\n\nFrom our experience, duplex fibre ports are often identified as their individual strands. For example, \nduplex port 5\n would be referenced as \nF9/F10\n.\n\n\nYour mileage may vary on this but we need to allow this flexibility to cover both use-cases. You always have options however:\n\n\n\n\nyou can change the presentation of how these ports are referenced externally by \nskinning\n the templates.\n\n\nyou have the option to edit emails before they are sent to also present this as you wish.\n\n\nyou can chose to treat duplex ports as single ports rather than doubling them up.\n\n\nwhen you have duplex ports on a patch panel, IXP Manager will provide a duplex view by default with a CSS-based toggle to reveal the typical partner ports.\n\n\nif you think IXP Manager can make this easier, please talk to us. \nBut we cannot cover every use case programatically. We've opted to allow flexibility rather than dictate a particular format.\n\n\n\n\nAdding a Patch Panel\n\n\nThe following image shows a typical \nadd a new patch panel\n form (as of v4.3). You'll note that clicking \nHelp\n provides detailed context aware help messages.\n\n\n\n\nMost of this is self-explanatory but:\n\n\n\n\nBy default, we set the \nColocation Reference\n to the \nPatch Panel Name\n. We are not sure it's a good idea for IXPs to create a second name different to the co-location provider's but this option is available to you. \nSeriously, think about what you are doing here - more references means more confusion!\n The cabinet and cable type is displayed in the list of patch panels so even with obscure data centre references, it should be easy to find what you need.\n\n\nLocation Notes\n: Data centre / co-location providers do a lot of weird, wonderful and strange things! They provide multiple references for a single patch panel (IXP cabinet, MMR, etc.), they get taken over and re-reference everything or even provide no discernable reference. The field is a freetext field that will be included (and parsed as Markdown) in all emails generated by IXP Manager to help you help them identify a patch panel!\n\n\n\n\nIn addition to that, we will also use a cabinets \nU's are counted from top/bottom\n, and a patch panel's \nU position\n and \nmounted at front/rear\n to also create a location description.\n\n When setting the \nNumber of Ports\n, ensure you count duplex fibre ports as \ntwo ports\n. So 12 duplex fibre ports would be entered as 24. When editing a patch panel, this input field represents the number of additional ports you want to add to a patch panel and thus defaults to 0 in that situation.\n\n \nPort Name Prefix\n: This is an optional field intended for use on fibre patch panels. As an example, you may wish to prefix individual fibre strands in a duplex port with F which would mean the name of a duplex port would be displayed as F1/F2.\n* \nChargeable\n: Usually IXPs request their members to come to them and bear the costs of that. However, sometimes a co-location facility may charge the IXP for a half circuit or the IXP may need order and pay for the connection. Setting this only sets the default option when allocating ports to members later. The options are Yes / No / Half / Other.\n\n\nFiltering Patch Panel Ports\n\n\nQuite often, all you are looking for is a free in a particular location (data centre) or cabinet of a particular cable type (UTP / SMF / etc.).\n\n\nIXP Manager makes this easy from the \nPatch Panels\n page via the top right button labeled \nFilter Options\n. When clicked, this yields an advanced search as follows:\n\n\n\n\nCabinets auto-fills when you chose (or change) a location.\n\n\nPatch Panel Port States\n\n\nA patch panel port can have the following states:\n\n\n\n\nAvailable\n: The port is free and available for use.\n\n\nPrewired\n: This is equivalent to available but it means the port is prewired to a given switchport (you set the port when setting the prewired status). This is useful for IXPs that prewire a bunch of ports to avoid remote hands costs / data centre visits.\n\n\nAwaiting Xconnect\n: Port has been assigned to a member and we are awaiting the co-location provider to install the cross connect. In this state, context aware actions such as emailing connection requests, LoA generation and \nSet Connected\n are all available.\n\n\nConnected\n: Connected and in use.\n\n\nAwaiting Cease\n: This connection is no longer required and we are awaiting the end user / co-location provider to cease the connection.\n\n\nCeased\n: You will never see a ceased state. When a cross connect is marked as ceased, it's current state is archived (for history, include files) and the port is reset to \nAvailable\n. We do not revert to \nPrewired\n but an information message is shown to the user to hint this.\n\n\nReserved\n: Useful to mark particular ports as \noff limits\n for whatever reason.\n\n\nBroken\n\n\nOther\n\n\n\n\nFree / Available Ports\n\n\nIXP Manager will colour ports in the \nAvailable\n, \nPrewired\n and \nAwaiting Cease\n states are green allowing an easy visual indication of available ports.\n\n\nPatch Panel Port Lifecycle\n\n\nPatch panel ports start as either \navailable\n or \nprewired\n. The context menu in these states is:\n\n\n\n\n\n\nUnset Prewired\n is available as this port has a \nPrewired\n status. Clicking this reverts it to plain \nAvailable\n and disassociates it from the prewired port.\n\n\nEdit Note...\n is always available and provides a pop up to edit public and private notes associated with the port (current lifecycle - ceased ports have their notes at that time archived and cleared).\n\n\n\n\nThe main lifecycle option here is \nAllocate\n:\n\n\n\n\n\n\n\n\nDescription\n: A one line short description to be shown in the list of patch panel ports. Just enough to help explain the ports purpose. Detailed information should be placed in the notes section. Can also be used to explain a reserved / broken / other port. Note that this is parsed as Markdown. \nNB:\n A description is discouraged for customer ports connected to a switch. The customer name and switch port are the description.\n\n\n\n\n\n\nColocation Circuit Reference\n: this is the reference provided by the colocation provider to uniquely reference this cross connect.\n\n\n\n\n\n\nTicket Reference(s)\n: This is a free text field to be used by IXPs as they wish. The intended use is to enter helpdesk ticket references that relate to this cross connect order.\n\n\n\n\n\n\nDuplex connection?\n: Clicking this allows you to select the slave port for duplex connections.\n\n\n\n\n\n\nSwitch / Switch Port\n / \nCustomer\n: You have a number of options when allocating a port:\n\n\n\n\n\n\nIf the port is pre-wired then the switch / switch port will be set here.\n\n\n\n\nIf you chose a switch port which has been allocated to a customer, then this patch panel port will also be allocated to that customer. The backend logic will detect if this is the case and update the customer field.\n\n\nConversely, if you chose a customer first, the switch / switch port dropdowns will be populated with only that customer's assigned ports.\n\n\nSometimes you will get cross connects that are not intended to be connected to peering switches (e.g. connections to co-located customer equipment, IXP metro connections, etc.). In these cases, just select the customer (and if it's the IXP itself, select the IXP customer) and leave switch / switch port unselected.\n\n\n\n\nIf you need to reset these fields, just click either of the Reset button.\n\n\n\n\n\n\nPatch Panel Port Status\n: when allocating a port, this will allow you to set the state to \nAwaiting Xconnect\n or \nConnected\n.\n\n\n\n\n\n\nPhysical Interface Status\n: this is not depicted above. If the selected switch port has already been assigned to a customer by way of a physical interface, you will have the option to update this here also.\n\n\n\n\n\n\nPublic\n and \nPrivate Notes\n: Public notes are available to the customer. Both fields are interpreted as Markdown.\n\n\n\n\n\n\nChargeable\n: Usually IXPs request their members to come to them and bear the costs of that. However, sometimes a co-location facility may charge the IXP for a half circuit or the IXP may need order and pay for the connection. The options are Yes / No / Half / Other. How individual IXPs use this is up to them.\n\n\n\n\n\n\nInternal Use\n: Marks the port as used by the IXP itself. E.g. metro connections.\n\n\n\n\n\n\nOwned By\n: Useful indication for billing and cease requests. Should represent the contractural owner of the cross connect. One of: Customer, IXP, Service Provider, Data Centre, Other. \nService Provider\n might be a metro provider where they ordered the cross connect.\n\n\n\n\n\n\nOnce a port is allocated, it enters the \nAwaiting XConnect\n / \nConnected\n state and there are additional context menu options available:\n\n\n\n\nThe three lifecycle actions are:\n\n\n\n\nSet Connected\n: updates the status (and allows you to add public/private notes). You next action after this should be \nEmail - Connect\n.\n\n\nSet Awaiting Cease\n: mark the port and pending disconnection. Your next action after this should be \nEmail - Cease\n.\n\n\nSet Ceased\n: this is a \ntransitive state\n in that it doesn't \nstick\n. When you mark a patch panel as ceased, the existing details (including files and notes) are archived as part of the port's history and then port is then cleared and made available again.\n\n\n\n\nFile Attachments\n\n\nOver the lifetime of a cross connect - and particularly when it is being ordered, there may be files exchanges between you and your customers or the colocation provider. These can be added to the patch panel port via the \nAttach File...\n option.\n\n\nThe dialog will dynamically determine the maximum file upload size based on your PHP settings. To alter this, change the following in your server's appropriate \nphp.ini\n:\n\n\n; Maximum allowed size for uploaded files.\nupload_max_filesize = 40M\n\n; Must be greater than or equal to upload_max_filesize\npost_max_size = 40M\n\n\n\n\n\nPlease search the internet for further help as this is outside the scope of IXP Manager documentation.\n\n\nThe following features apply to file attachments:\n\n\n\n\nthey are archived along with the port history when a cross connect is ceased.\n\n\nthey are stored under \n$IXPROOT/storage/files/ppp\n.\n\n\ntwo files of the same name cannot be uploaded for a single patch panel port.\n\n\nthey can be marked as public or private:\n\n\npublic files are accessible to the customer through their own dashboard.\n\n\npublic files are attached to the \nEmail - Information\n email.\n\n\n\n\nLoA Generation\n\n\nMany co-location providers will not accept a cross connect order without a LoA \n(Letter of Agency/Authority)\n from the party to whom the cross connect is to be delivered (typically the IXP).\n\n\nIXP Manager will generate a PDF LoA to download or include in the emails it generates for you. Here is an example:\n\n\n\n\nYou will need to \nskin\n this yourself to change the legalese, address and contact details and potentially add a logo. See the version INEX uses \nhere\n (which includes and embedded PNG logo).\n\n\nNote that \nDompdf\n is used to turn the HTML template into a PDF and it has some restrictions.\n\n\nYou have two options for generating LoAs (without having IXP Manager email them):\n\n\n\n\nDownload PDF\n: downloads the PDF via your browser.\n\n\nView PDF\n: displays the PDF LoA in your browser (where browser supports it).\n\n\n\n\nLoA Verification\n\n\nThe stock LoA template (and INEX's version) includes a link that allows co-location browsers to click on to verify its veracity.\n\n\nOn successful verification, the end user sees:\n\n\n\n\nEmail Generation\n\n\nIXP Manager allows you to send four emails related to patch panels / cross connects (port status dependent). These are listed below. The Email editor looks as follows:\n\n\n\n\nNote that:\n\n\n\n\nthe option to attach a PDF LoA is a checkbox.\n\n\nthe email is written in Markdown with a preview available. The email is sent as both HTML (from the Markdown) and the plaintext version.\n\n\n\n\nThe four email templates available are:\n\n\n\n\nEmail - Connect\n: Email the customer a request to order a cross connect to the given demarcation points. A LoA is attached as a PDF by default unless you uncheck the box in the email editor.\n\n\nEmail - Cease\n: Email the customer a request to cease a cross connect.\n\n\nEmail - Information\n: Email the customer all details on file about a cross connect. We often get requests for this at INEX and this simplifies the process. The generated email includes:\n\n\nthe standard details regarding port and co-location reference;\n\n\npublic notes;\n\n\npublic files as attachments.\n\n\nEmail - LoA\n: Email a LoA to the customer as attached as a PDF. This is similar to \nEmail - Connect\n but it is more reflective of a typical response to a second request for a LoA.\n\n\n\n\nAll email templates can be \nskinned\n for your own needs. See INEX's example skins \nhere\n.\n\n\nViewing Patch Panel Details and Archives\n\n\nEach patch panel port row has the following button:\n\n\n\n\nThe number in the badge indicates how many historical records are available.\n\n\nClicking on the button yields the following view screen:\n\n\n\n\nDevelopment History\n\n\nThe Patch Panels functionality was developed during Q1 2017 and added in March 2017. This was made possible from sponsorship which enabled us to hire a new full time developer. We are especially grateful to our sponsors - \nplease see them here\n.", 
            "title": "Patch Panels"
        }, 
        {
            "location": "/features/patch-panels/#patch-panels-cross-connects", 
            "text": "One of the more difficult things for an IXP to manage is the sheer volume of patch panels / cross connects they need to manage. We have approached the issue a number of times in IXP Manger but abandoned the attempt every time. Typically our original solutions were over-engineered where all we really needed was something which could replace a spreadsheet per panel.  We believe we have now developed a feature complete and useful means of managing patch panels and associated cross connects.", 
            "title": "Patch Panels / Cross Connects"
        }, 
        {
            "location": "/features/patch-panels/#features", 
            "text": "Add / edit patch panels  (which includes cable and connector types).  List associated patch panel ports which includes:  their state (such as available / prewired, awaiting cross connect, connected, awaiting cease, reserved, broken).  associated customer and/or switchport.  co-location provider's circuit reference.  internal ticket references.  Transition ports from available / prewired to awaiting x-connect to connected to awaiting cease to ceased and then available again.  Customer view of their cross connects.  Public (visible to customers) and private notes per cross connect.  Attach public and private files to cross connects (such as test results, completion documents, order forms, etc).  Maintain complete history of a patch panel port.  Generate and email LoAs (as PDF) with a URL verification function for co-location providers.  Generate emails for connection and cease requests as well as an email providing full customer view of a cross connect.  Typically fibre ports are  duplex  ports but there is a growing use of BiDi optics meaning simplex ports. Our implementation treats all ports as simplex but you can mark it as duplex and set its partner port.", 
            "title": "Features"
        }, 
        {
            "location": "/features/patch-panels/#duplex-fibre-ports", 
            "text": "We suggest adding fibre ports as two ports per duplex port. I.e. if your patch panel has 12 duplex ports, enter this as 24 ports. When allocating ports later, you can set it as a duplex port and select its  partner / slave port . This will future proof your patch panels for the growing use of bidi optics and other simplex based xWDM fibre solutions.  From our experience, duplex fibre ports are often identified as their individual strands. For example,  duplex port 5  would be referenced as  F9/F10 .  Your mileage may vary on this but we need to allow this flexibility to cover both use-cases. You always have options however:   you can change the presentation of how these ports are referenced externally by  skinning  the templates.  you have the option to edit emails before they are sent to also present this as you wish.  you can chose to treat duplex ports as single ports rather than doubling them up.  when you have duplex ports on a patch panel, IXP Manager will provide a duplex view by default with a CSS-based toggle to reveal the typical partner ports.  if you think IXP Manager can make this easier, please talk to us.  But we cannot cover every use case programatically. We've opted to allow flexibility rather than dictate a particular format.", 
            "title": "Duplex Fibre Ports"
        }, 
        {
            "location": "/features/patch-panels/#adding-a-patch-panel", 
            "text": "The following image shows a typical  add a new patch panel  form (as of v4.3). You'll note that clicking  Help  provides detailed context aware help messages.   Most of this is self-explanatory but:   By default, we set the  Colocation Reference  to the  Patch Panel Name . We are not sure it's a good idea for IXPs to create a second name different to the co-location provider's but this option is available to you.  Seriously, think about what you are doing here - more references means more confusion!  The cabinet and cable type is displayed in the list of patch panels so even with obscure data centre references, it should be easy to find what you need.  Location Notes : Data centre / co-location providers do a lot of weird, wonderful and strange things! They provide multiple references for a single patch panel (IXP cabinet, MMR, etc.), they get taken over and re-reference everything or even provide no discernable reference. The field is a freetext field that will be included (and parsed as Markdown) in all emails generated by IXP Manager to help you help them identify a patch panel!   In addition to that, we will also use a cabinets  U's are counted from top/bottom , and a patch panel's  U position  and  mounted at front/rear  to also create a location description.  When setting the  Number of Ports , ensure you count duplex fibre ports as  two ports . So 12 duplex fibre ports would be entered as 24. When editing a patch panel, this input field represents the number of additional ports you want to add to a patch panel and thus defaults to 0 in that situation.   Port Name Prefix : This is an optional field intended for use on fibre patch panels. As an example, you may wish to prefix individual fibre strands in a duplex port with F which would mean the name of a duplex port would be displayed as F1/F2.\n*  Chargeable : Usually IXPs request their members to come to them and bear the costs of that. However, sometimes a co-location facility may charge the IXP for a half circuit or the IXP may need order and pay for the connection. Setting this only sets the default option when allocating ports to members later. The options are Yes / No / Half / Other.", 
            "title": "Adding a Patch Panel"
        }, 
        {
            "location": "/features/patch-panels/#filtering-patch-panel-ports", 
            "text": "Quite often, all you are looking for is a free in a particular location (data centre) or cabinet of a particular cable type (UTP / SMF / etc.).  IXP Manager makes this easy from the  Patch Panels  page via the top right button labeled  Filter Options . When clicked, this yields an advanced search as follows:   Cabinets auto-fills when you chose (or change) a location.", 
            "title": "Filtering Patch Panel Ports"
        }, 
        {
            "location": "/features/patch-panels/#patch-panel-port-states", 
            "text": "A patch panel port can have the following states:   Available : The port is free and available for use.  Prewired : This is equivalent to available but it means the port is prewired to a given switchport (you set the port when setting the prewired status). This is useful for IXPs that prewire a bunch of ports to avoid remote hands costs / data centre visits.  Awaiting Xconnect : Port has been assigned to a member and we are awaiting the co-location provider to install the cross connect. In this state, context aware actions such as emailing connection requests, LoA generation and  Set Connected  are all available.  Connected : Connected and in use.  Awaiting Cease : This connection is no longer required and we are awaiting the end user / co-location provider to cease the connection.  Ceased : You will never see a ceased state. When a cross connect is marked as ceased, it's current state is archived (for history, include files) and the port is reset to  Available . We do not revert to  Prewired  but an information message is shown to the user to hint this.  Reserved : Useful to mark particular ports as  off limits  for whatever reason.  Broken  Other", 
            "title": "Patch Panel Port States"
        }, 
        {
            "location": "/features/patch-panels/#free-available-ports", 
            "text": "IXP Manager will colour ports in the  Available ,  Prewired  and  Awaiting Cease  states are green allowing an easy visual indication of available ports.", 
            "title": "Free / Available Ports"
        }, 
        {
            "location": "/features/patch-panels/#patch-panel-port-lifecycle", 
            "text": "Patch panel ports start as either  available  or  prewired . The context menu in these states is:    Unset Prewired  is available as this port has a  Prewired  status. Clicking this reverts it to plain  Available  and disassociates it from the prewired port.  Edit Note...  is always available and provides a pop up to edit public and private notes associated with the port (current lifecycle - ceased ports have their notes at that time archived and cleared).   The main lifecycle option here is  Allocate :     Description : A one line short description to be shown in the list of patch panel ports. Just enough to help explain the ports purpose. Detailed information should be placed in the notes section. Can also be used to explain a reserved / broken / other port. Note that this is parsed as Markdown.  NB:  A description is discouraged for customer ports connected to a switch. The customer name and switch port are the description.    Colocation Circuit Reference : this is the reference provided by the colocation provider to uniquely reference this cross connect.    Ticket Reference(s) : This is a free text field to be used by IXPs as they wish. The intended use is to enter helpdesk ticket references that relate to this cross connect order.    Duplex connection? : Clicking this allows you to select the slave port for duplex connections.    Switch / Switch Port  /  Customer : You have a number of options when allocating a port:    If the port is pre-wired then the switch / switch port will be set here.   If you chose a switch port which has been allocated to a customer, then this patch panel port will also be allocated to that customer. The backend logic will detect if this is the case and update the customer field.  Conversely, if you chose a customer first, the switch / switch port dropdowns will be populated with only that customer's assigned ports.  Sometimes you will get cross connects that are not intended to be connected to peering switches (e.g. connections to co-located customer equipment, IXP metro connections, etc.). In these cases, just select the customer (and if it's the IXP itself, select the IXP customer) and leave switch / switch port unselected.   If you need to reset these fields, just click either of the Reset button.    Patch Panel Port Status : when allocating a port, this will allow you to set the state to  Awaiting Xconnect  or  Connected .    Physical Interface Status : this is not depicted above. If the selected switch port has already been assigned to a customer by way of a physical interface, you will have the option to update this here also.    Public  and  Private Notes : Public notes are available to the customer. Both fields are interpreted as Markdown.    Chargeable : Usually IXPs request their members to come to them and bear the costs of that. However, sometimes a co-location facility may charge the IXP for a half circuit or the IXP may need order and pay for the connection. The options are Yes / No / Half / Other. How individual IXPs use this is up to them.    Internal Use : Marks the port as used by the IXP itself. E.g. metro connections.    Owned By : Useful indication for billing and cease requests. Should represent the contractural owner of the cross connect. One of: Customer, IXP, Service Provider, Data Centre, Other.  Service Provider  might be a metro provider where they ordered the cross connect.    Once a port is allocated, it enters the  Awaiting XConnect  /  Connected  state and there are additional context menu options available:   The three lifecycle actions are:   Set Connected : updates the status (and allows you to add public/private notes). You next action after this should be  Email - Connect .  Set Awaiting Cease : mark the port and pending disconnection. Your next action after this should be  Email - Cease .  Set Ceased : this is a  transitive state  in that it doesn't  stick . When you mark a patch panel as ceased, the existing details (including files and notes) are archived as part of the port's history and then port is then cleared and made available again.", 
            "title": "Patch Panel Port Lifecycle"
        }, 
        {
            "location": "/features/patch-panels/#file-attachments", 
            "text": "Over the lifetime of a cross connect - and particularly when it is being ordered, there may be files exchanges between you and your customers or the colocation provider. These can be added to the patch panel port via the  Attach File...  option.  The dialog will dynamically determine the maximum file upload size based on your PHP settings. To alter this, change the following in your server's appropriate  php.ini :  ; Maximum allowed size for uploaded files.\nupload_max_filesize = 40M\n\n; Must be greater than or equal to upload_max_filesize\npost_max_size = 40M  Please search the internet for further help as this is outside the scope of IXP Manager documentation.  The following features apply to file attachments:   they are archived along with the port history when a cross connect is ceased.  they are stored under  $IXPROOT/storage/files/ppp .  two files of the same name cannot be uploaded for a single patch panel port.  they can be marked as public or private:  public files are accessible to the customer through their own dashboard.  public files are attached to the  Email - Information  email.", 
            "title": "File Attachments"
        }, 
        {
            "location": "/features/patch-panels/#loa-generation", 
            "text": "Many co-location providers will not accept a cross connect order without a LoA  (Letter of Agency/Authority)  from the party to whom the cross connect is to be delivered (typically the IXP).  IXP Manager will generate a PDF LoA to download or include in the emails it generates for you. Here is an example:   You will need to  skin  this yourself to change the legalese, address and contact details and potentially add a logo. See the version INEX uses  here  (which includes and embedded PNG logo).  Note that  Dompdf  is used to turn the HTML template into a PDF and it has some restrictions.  You have two options for generating LoAs (without having IXP Manager email them):   Download PDF : downloads the PDF via your browser.  View PDF : displays the PDF LoA in your browser (where browser supports it).", 
            "title": "LoA Generation"
        }, 
        {
            "location": "/features/patch-panels/#loa-verification", 
            "text": "The stock LoA template (and INEX's version) includes a link that allows co-location browsers to click on to verify its veracity.  On successful verification, the end user sees:", 
            "title": "LoA Verification"
        }, 
        {
            "location": "/features/patch-panels/#email-generation", 
            "text": "IXP Manager allows you to send four emails related to patch panels / cross connects (port status dependent). These are listed below. The Email editor looks as follows:   Note that:   the option to attach a PDF LoA is a checkbox.  the email is written in Markdown with a preview available. The email is sent as both HTML (from the Markdown) and the plaintext version.   The four email templates available are:   Email - Connect : Email the customer a request to order a cross connect to the given demarcation points. A LoA is attached as a PDF by default unless you uncheck the box in the email editor.  Email - Cease : Email the customer a request to cease a cross connect.  Email - Information : Email the customer all details on file about a cross connect. We often get requests for this at INEX and this simplifies the process. The generated email includes:  the standard details regarding port and co-location reference;  public notes;  public files as attachments.  Email - LoA : Email a LoA to the customer as attached as a PDF. This is similar to  Email - Connect  but it is more reflective of a typical response to a second request for a LoA.   All email templates can be  skinned  for your own needs. See INEX's example skins  here .", 
            "title": "Email Generation"
        }, 
        {
            "location": "/features/patch-panels/#viewing-patch-panel-details-and-archives", 
            "text": "Each patch panel port row has the following button:   The number in the badge indicates how many historical records are available.  Clicking on the button yields the following view screen:", 
            "title": "Viewing Patch Panel Details and Archives"
        }, 
        {
            "location": "/features/patch-panels/#development-history", 
            "text": "The Patch Panels functionality was developed during Q1 2017 and added in March 2017. This was made possible from sponsorship which enabled us to hire a new full time developer. We are especially grateful to our sponsors -  please see them here .", 
            "title": "Development History"
        }, 
        {
            "location": "/features/reseller/", 
            "text": "Reseller Functionality\n\n\nReseller mode must be explicitly enabled with a \n.env\n option:\n\n\nIXP_RESELLER_ENABLED=true\n\n\n\n\n\nIntroduction\n\n\nIn our model, a \nresold\n member is still a fully fledged member, they just happen to reach the exchange via someone else's network. You / we would still have a relationship with the member independent of the reseller and would still be required to carry out the standard turn up (for us, this includes IP assignment, quarantine procedures, route collector session, route server sessions if appropriate, etc.).\n\n\nIXP Manager's functionality is simply to:\n\n\n\n\nrecord that a reseller relationship exists\n\n\nallow you to manage reseller and fanout ports\n\n\n\n\nFeatures\n\n\n\n\nA customer / member can now also be a reseller. If you have a non-customer reseller, create them as an associate or internal member as appropriate. This is a boolean switch available in the add / edit customer page.\n\n\nAny customer can be marked as a \nresold customer of a named reseller\n. This is set in the add / edit customer page.\n\n\nIf a customer is a reseller or a resold customer, this is clearly visible in the customer overview page.\n\n\nA reseller cannot be \ndemoted\n from reseller status while there are resold customers assigned to it.\n\n\nIn the reseller customer overview page, there is a new tab listing all the customers they have resold to the IXP.\n\n\nIn the reseller customer overview page, the ports are separated into reseller uplink ports, the reseller's own peering ports and the fanout ports used to deliver the reseller's customers' traffic.\n\n\n\n\nReseller and Fanout Ports.\n\n\nFor resellers, we need to enforce the \none port - one mac - one address\n rule on the peering LAN.\n\n\nDepending on switch technology, this can be done using\n\n\n\n\na virtual ethernet port; or\n\n\na dedicated fanout switch / port.\n\n\n\n\n\n\nCurrently the schema cannot adequately handle a virtual ethernet port.\n\n\n\n\nTypically, we'd assign a dedicated switch (or bunch of switch ports) as a \nfanout\n switch with a \nreseller uplink port\n (or LAG). The reseller delivers their customer traffic in dedicated VLANs over this uplink port. We then break each individual customer's traffic into dedicated \nfanout ports\n. These physical fanout ports have a one to one relationship with peering ports for that customer (these can be single physical ports or LAGs).\n\n\nThe reseller functionality includes:\n\n\n\n\nnew switch port types for \nreseller\n (reseller uplink ports) and \nfanout\n;\n\n\na clear 1:1 relationship between peering ports that come via fanout ports;\n\n\na reseller has all their peering, reseller uplink and associated fanout ports listed in their overview and portal page;\n\n\nthe add physical interface form and the add interface wizard support linking a peering port to a new fanout port as part of the process.\n\n\n\n\nOptions\n\n\nThe following are set in \n.env\n:\n\n\nTo enable reseller functionality, set the following to \ntrue\n:\n\n\nIXP_RESELLER_ENABLED=false\n\n\n\n\n\nIf your resold customers are billed directly by the reseller and not the IXP, set this to true to remove billing details from their admin and member areas.\n\n\nIXP_RESELLER_RESOLD_BILLING=false\n\n\n\n\n\nCoding Hints\n\n\nIn the (older Zend Framework) controllers, you can execute reseller code via:\n\n\nif( $this-\nresellerMode() ) {\n\n\n    // your reseller specific code here\n\n\n}\n\n\n\n\n\n\nAnd in (the older Zend Framework) Smarty templates, you can add reseller only content via:\n\n\n{if $resellerMode}\n    \n!-- Your reseller content --\n\n{/if}\n\n\n\n\n\nIf you have a \n$customer\n entity, you can see if it is a reseller via:\n\n\nif( $customer-\nisReseller() ) {}\n\n\n\n\n\n\nTo see if a customer is a resold customer or get the reseller customer entity:\n\n\nif( $customer-\ngetReseller() ) {} // returns false if not a resold customer\n\n\n\n\n\n\nFinally, to get all resold customer entities of a reseller:\n\n\n$customer-\ngetResoldCustomers()\n\n\n\n\n\n\n\n\nReseller functionality was added jointly by \nINEX\n and \nLONAP\n in June 2013.", 
            "title": "Reseller Functionality"
        }, 
        {
            "location": "/features/reseller/#reseller-functionality", 
            "text": "Reseller mode must be explicitly enabled with a  .env  option:  IXP_RESELLER_ENABLED=true", 
            "title": "Reseller Functionality"
        }, 
        {
            "location": "/features/reseller/#introduction", 
            "text": "In our model, a  resold  member is still a fully fledged member, they just happen to reach the exchange via someone else's network. You / we would still have a relationship with the member independent of the reseller and would still be required to carry out the standard turn up (for us, this includes IP assignment, quarantine procedures, route collector session, route server sessions if appropriate, etc.).  IXP Manager's functionality is simply to:   record that a reseller relationship exists  allow you to manage reseller and fanout ports", 
            "title": "Introduction"
        }, 
        {
            "location": "/features/reseller/#features", 
            "text": "A customer / member can now also be a reseller. If you have a non-customer reseller, create them as an associate or internal member as appropriate. This is a boolean switch available in the add / edit customer page.  Any customer can be marked as a  resold customer of a named reseller . This is set in the add / edit customer page.  If a customer is a reseller or a resold customer, this is clearly visible in the customer overview page.  A reseller cannot be  demoted  from reseller status while there are resold customers assigned to it.  In the reseller customer overview page, there is a new tab listing all the customers they have resold to the IXP.  In the reseller customer overview page, the ports are separated into reseller uplink ports, the reseller's own peering ports and the fanout ports used to deliver the reseller's customers' traffic.", 
            "title": "Features"
        }, 
        {
            "location": "/features/reseller/#reseller-and-fanout-ports", 
            "text": "For resellers, we need to enforce the  one port - one mac - one address  rule on the peering LAN.  Depending on switch technology, this can be done using   a virtual ethernet port; or  a dedicated fanout switch / port.    Currently the schema cannot adequately handle a virtual ethernet port.   Typically, we'd assign a dedicated switch (or bunch of switch ports) as a  fanout  switch with a  reseller uplink port  (or LAG). The reseller delivers their customer traffic in dedicated VLANs over this uplink port. We then break each individual customer's traffic into dedicated  fanout ports . These physical fanout ports have a one to one relationship with peering ports for that customer (these can be single physical ports or LAGs).  The reseller functionality includes:   new switch port types for  reseller  (reseller uplink ports) and  fanout ;  a clear 1:1 relationship between peering ports that come via fanout ports;  a reseller has all their peering, reseller uplink and associated fanout ports listed in their overview and portal page;  the add physical interface form and the add interface wizard support linking a peering port to a new fanout port as part of the process.", 
            "title": "Reseller and Fanout Ports."
        }, 
        {
            "location": "/features/reseller/#options", 
            "text": "The following are set in  .env :  To enable reseller functionality, set the following to  true :  IXP_RESELLER_ENABLED=false  If your resold customers are billed directly by the reseller and not the IXP, set this to true to remove billing details from their admin and member areas.  IXP_RESELLER_RESOLD_BILLING=false", 
            "title": "Options"
        }, 
        {
            "location": "/features/reseller/#coding-hints", 
            "text": "In the (older Zend Framework) controllers, you can execute reseller code via:  if( $this- resellerMode() ) {      // your reseller specific code here  }   And in (the older Zend Framework) Smarty templates, you can add reseller only content via:  {if $resellerMode}\n     !-- Your reseller content -- \n{/if}  If you have a  $customer  entity, you can see if it is a reseller via:  if( $customer- isReseller() ) {}   To see if a customer is a resold customer or get the reseller customer entity:  if( $customer- getReseller() ) {} // returns false if not a resold customer   Finally, to get all resold customer entities of a reseller:  $customer- getResoldCustomers()    Reseller functionality was added jointly by  INEX  and  LONAP  in June 2013.", 
            "title": "Coding Hints"
        }, 
        {
            "location": "/features/route-collectors/", 
            "text": "Route Collectors\n\n\n\n\nPrerequisite Reading:\n Ensure you first familiarize yourself with \nthe generic documentation on managing and generating router configurations here\n.\n\n\n\n\nRoute collectors are an important member setup, diagnostic and metric tool for IXPs. Route collects essentially accept all routes and advertise none. \nIXP Manager\n will generate route collector configuration for you. You \ncan see an example of this generated configuration here\n.\n\n\nAt \nINEX\n we use the Bird BGP daemon as our collector using the stock configuration as generated by IXP Manager. We also use this same setup for the quarantine LAN collectors. You can see \nour live looking glasses here\n for more information.\n\n\nSetting Up\n\n\nYou first need to add your route collector(s) to the \nIXP Manager\n routers database. See \nthis page on how to do that\n.\n\n\nTypically an IXP's route collector service will share the ASN of the IXP's own management network (\nbut be different to the route server entry\n). You should also add the route collectors to your initial \ninternal\n customer representing your IXP on to IXP Manager. Here's INEX's example from our peering LAN1 in Dublin:\n\n\n\n\nOther Information\n\n\nQuarantine\n\n\nWe also use a quarantine route collector when provisioning new member connections. This is a Bird BGP daemon running on a virtual machine on our quarantine LAN. For is, this quarantine LAN is:\n\n\n\n\na separate dedicated VLAN on our peering switches;\n\n\nuses the same addressing as the production LAN;\n\n\nour quarantine route collector even has the same MAC as the production version.\n\n\n\n\nWhen \nadding routers to IXP Manager\n, setting the \nquarantine\n flag means that the configuration will only contain interfaces that are on the quarantine VLAN.", 
            "title": "Route Collectors"
        }, 
        {
            "location": "/features/route-collectors/#route-collectors", 
            "text": "Prerequisite Reading:  Ensure you first familiarize yourself with  the generic documentation on managing and generating router configurations here .   Route collectors are an important member setup, diagnostic and metric tool for IXPs. Route collects essentially accept all routes and advertise none.  IXP Manager  will generate route collector configuration for you. You  can see an example of this generated configuration here .  At  INEX  we use the Bird BGP daemon as our collector using the stock configuration as generated by IXP Manager. We also use this same setup for the quarantine LAN collectors. You can see  our live looking glasses here  for more information.", 
            "title": "Route Collectors"
        }, 
        {
            "location": "/features/route-collectors/#setting-up", 
            "text": "You first need to add your route collector(s) to the  IXP Manager  routers database. See  this page on how to do that .  Typically an IXP's route collector service will share the ASN of the IXP's own management network ( but be different to the route server entry ). You should also add the route collectors to your initial  internal  customer representing your IXP on to IXP Manager. Here's INEX's example from our peering LAN1 in Dublin:", 
            "title": "Setting Up"
        }, 
        {
            "location": "/features/route-collectors/#other-information", 
            "text": "", 
            "title": "Other Information"
        }, 
        {
            "location": "/features/route-collectors/#quarantine", 
            "text": "We also use a quarantine route collector when provisioning new member connections. This is a Bird BGP daemon running on a virtual machine on our quarantine LAN. For is, this quarantine LAN is:   a separate dedicated VLAN on our peering switches;  uses the same addressing as the production LAN;  our quarantine route collector even has the same MAC as the production version.   When  adding routers to IXP Manager , setting the  quarantine  flag means that the configuration will only contain interfaces that are on the quarantine VLAN.", 
            "title": "Quarantine"
        }, 
        {
            "location": "/features/route-servers/", 
            "text": "Route Servers\n\n\n\n\nPrerequisite Reading:\n Ensure you first familiarize yourself with \nthe generic documentation on managing and generating router configurations here\n.\n\n\n\n\nNormally on a peering exchange, all connected parties will establish bilateral peering relationships with each other customer connected to the exchange. As the number of connected parties increases, it becomes increasingly more difficult to manage peering relationships with customers of the exchange. A typical peering exchange full-mesh eBGP configuration might look something similar to the diagram on the left hand side.\n\n\n\n\nThe full-mesh BGP session relationship scenario requires that each BGP speaker configure and manage BGP sessions to every other BGP speaker on the exchange. In this example, a full-mesh setup requires 7 BGP sessions per member router, and this increases every time a new member connects to the exchange.\n\n\nHowever, by using a route servers for peering relationships, the number of BGP sessions per router stays at two: one for each route server (assuming a resilient set up). Clearly this is a more sustainable way of maintaining IXP peering relationships with a large number of participants.\n\n\nConfiguration Generation Features\n\n\nThis is \ncovered in the router documentation here\n. Please review that to learn how to automatically generate route server configurations. This section goes into a bit more specific detail on INEX's route server configuration (as shipped with IXP Manager) and why it's safe to use.\n\n\nThe features of the route server configurations that IXP Manager generates include:\n\n\n\n\nfull prefix filtering based on IRRDB entries (can be disabled on a per member basis if required) - see \nthe IRRDB documentation here\n;\n\n\nfull origin ASN filtering based on IRRDB entries (can be disabled on a per member basis if required);\n\n\nin all cases, prefix filtering for IPv4 and v6 based on the IANA special purpose registries (also known as bogon lists);\n\n\nensuring next hop is the neighbor address to ensure no next hop hijacking;\n\n\nmax prefix limits;\n\n\nmultiple VLAN interfaces for a single member supported;\n\n\nlarge BGP communities supported;\n\n\na decade of production use and experience.\n\n\n\n\nThere are \nsome old notes on route server testing here\n which may also be useful.\n\n\nSetting Up\n\n\nYou first need to add your route servers to the \nIXP Manager\n routers database. See \nthis page on how to do that\n.\n\n\nTypically an IXP's route server service will have a dedicated ASN that is different to the IXP's own management / route collector ASN. As such, you need to add a new \ninternal\n customer to IXP Manager. Here's an example from INEX for our \nroute server #1\n:\n\n\n\n\nYou then need to create an interface for this route server on each peering LAN where the service will be offered. Here again is INEX's example from our peering LAN1 in Dublin:\n\n\n\n\nThere's a couple things to note in the above:\n\n\n\n\nAS112 Client\n is checked which means (so long as \nRoute Server Client\n is checked on the \nAS112 service\n) the AS112 service will peer with the route servers.\n\n\nApply IRRDB Filtering\n has no meaning here as this is the route server rather than the route server client.", 
            "title": "Route Servers"
        }, 
        {
            "location": "/features/route-servers/#route-servers", 
            "text": "Prerequisite Reading:  Ensure you first familiarize yourself with  the generic documentation on managing and generating router configurations here .   Normally on a peering exchange, all connected parties will establish bilateral peering relationships with each other customer connected to the exchange. As the number of connected parties increases, it becomes increasingly more difficult to manage peering relationships with customers of the exchange. A typical peering exchange full-mesh eBGP configuration might look something similar to the diagram on the left hand side.   The full-mesh BGP session relationship scenario requires that each BGP speaker configure and manage BGP sessions to every other BGP speaker on the exchange. In this example, a full-mesh setup requires 7 BGP sessions per member router, and this increases every time a new member connects to the exchange.  However, by using a route servers for peering relationships, the number of BGP sessions per router stays at two: one for each route server (assuming a resilient set up). Clearly this is a more sustainable way of maintaining IXP peering relationships with a large number of participants.", 
            "title": "Route Servers"
        }, 
        {
            "location": "/features/route-servers/#configuration-generation-features", 
            "text": "This is  covered in the router documentation here . Please review that to learn how to automatically generate route server configurations. This section goes into a bit more specific detail on INEX's route server configuration (as shipped with IXP Manager) and why it's safe to use.  The features of the route server configurations that IXP Manager generates include:   full prefix filtering based on IRRDB entries (can be disabled on a per member basis if required) - see  the IRRDB documentation here ;  full origin ASN filtering based on IRRDB entries (can be disabled on a per member basis if required);  in all cases, prefix filtering for IPv4 and v6 based on the IANA special purpose registries (also known as bogon lists);  ensuring next hop is the neighbor address to ensure no next hop hijacking;  max prefix limits;  multiple VLAN interfaces for a single member supported;  large BGP communities supported;  a decade of production use and experience.   There are  some old notes on route server testing here  which may also be useful.", 
            "title": "Configuration Generation Features"
        }, 
        {
            "location": "/features/route-servers/#setting-up", 
            "text": "You first need to add your route servers to the  IXP Manager  routers database. See  this page on how to do that .  Typically an IXP's route server service will have a dedicated ASN that is different to the IXP's own management / route collector ASN. As such, you need to add a new  internal  customer to IXP Manager. Here's an example from INEX for our  route server #1 :   You then need to create an interface for this route server on each peering LAN where the service will be offered. Here again is INEX's example from our peering LAN1 in Dublin:   There's a couple things to note in the above:   AS112 Client  is checked which means (so long as  Route Server Client  is checked on the  AS112 service ) the AS112 service will peer with the route servers.  Apply IRRDB Filtering  has no meaning here as this is the route server rather than the route server client.", 
            "title": "Setting Up"
        }, 
        {
            "location": "/features/routers/", 
            "text": "Routers\n\n\nIXP Manager can generate router configuration for typical IXP services such as:\n\n\n\n\nroute collectors\n;\n\n\nroute servers\n (with \nIRRDB filtering\n); and\n\n\nAS112 services\n.\n\n\n\n\nSee the above pages for specific information on each of those use cases and below for instructions on how to generate configuration.\n\n\nManaging Routers\n\n\nThe basic elements of \na router\n are configured in \nIXP Manager\n under the \nIXP Admin Actions - Routers\n option on the left hand menu.\n\n\nWhen you goto add / edit a router, the green help button willl provide explanatory details on each field of information required:\n\n\n\n\nFrom the router management page, you can:\n\n\n\n\nadd / edit / delete a router;\n\n\nview all the details of a router;\n\n\ngenerate and view a router's configuration.\n\n\n\n\nConfiguration Generation Overview\n\n\nThe simplest configuration to generate is the route collector configuration. A route collector is an IXP router which serves only to \naccept all routes and export no routes\n. It is used for problem diagnosis, to aid customer monitoring and for looking glasses (see \nINEX's here\n).\n\n\nThe \nstandard configuration\n simply pulls in a fairly standard header (sets up router ID, listening address and - for the collector at least - some unused filters) and creates a session for all customer routers on the given VLAN.\n\n\nWhen adding a router, you give it a \nhandle\n. For example: \nrc1-lan1-ipv4\n which, for INEX, would mean a route collector on peering LAN1 using IPv4. Then - for the given router handle - the configuration can be generated and pulled using the API as follows:\n\n\n#! /bin/sh\n\n\n\n# The API Key.\n\n\n# This is generated in IXP Manager via the top right menu: *My Account -\n API Keys*\n\n\nKEY\n=\nyour-admin-ixp-manager-api-key\n\n\n\n# The base URL of your IXP Manager install plus: \napi/v4/router/gen-config\n\n\nURL\n=\nhttps://ixp.example.com/api/v4/router/gen-config\n\n\n\n# The handle is as described above:\n\n\nHANDLE\n=\nrc1-lan1-ipv4\n\n\n\n# Then the configuration can be pulled as follows:\n\ncurl --fail -s -H \nX-IXP-Manager-API-Key: \n${\nKEY\n}\n \n${\nURL\n}\n/\n${\nHANDLE\n}\n \n${\nHANDLE\n}\n.conf\n\n\n\n\n\nConfigurations for the route server and AS112 templates can be configured just as easily.\n\n\nThe stock templates for both are secure and well tested and can be used by setting the \ntemplate\n element of the router to one of the following:\n\n\n\n\nAS112: \n'api/v4/router/as112/bird/standard'\n\n\nRoute Server: \n'api/v4/router/server/bird/standard'\n\n\n\n\nWe also provide sample scripts for automating the re-configuration of these services by cron. See the \n-v4\n scripts \nin this directory\n. These are quite robust and have been in production for ~3 years at INEX (as of Jan 2017).\n\n\nExamples\n\n\nWe use \nTravis CI\n to test IXP Manager before pushing new releases. The primary purpose of this is to ensure that the configuration for routers generated matches known good configurations from the same sample database.\n\n\nThese known good configurations also serve as useful examples of what the standard IXP Manager configuration generates.\n\n\nSee \nthese known good configurations here\n with the prefix \nci-apiv4-\n and:\n\n\n\n\nas112\n: AS112 router configurations conforming to \nrfc7534\n (AS112 Nameserver Operations) and implementing \nrfc7535\n (AS112 Redirection Using DNAME). There are configs to serve queries over both IPv4 and IPv6. See \nthe AS112 documentation for more details\n.\n\n\nrc1\n: route collector configurations. Peering with the route collector is mandatory at many IXPs including INEX. These are incredably useful for monitoring, diagnosing issues and providing looking glasses. We also use the quarantine version of these for turning up new member connections.\n\n\nrs1\n: route collector configurations. See below for full details of what these implement. Note also that the \nci-apiv4-rs1-lan2-ipv4.conf\n file includes BGP large communities (\nrfc8092\n). See \nthe route servers documentation for more details\n.", 
            "title": "Router Configuration"
        }, 
        {
            "location": "/features/routers/#routers", 
            "text": "IXP Manager can generate router configuration for typical IXP services such as:   route collectors ;  route servers  (with  IRRDB filtering ); and  AS112 services .   See the above pages for specific information on each of those use cases and below for instructions on how to generate configuration.", 
            "title": "Routers"
        }, 
        {
            "location": "/features/routers/#managing-routers", 
            "text": "The basic elements of  a router  are configured in  IXP Manager  under the  IXP Admin Actions - Routers  option on the left hand menu.  When you goto add / edit a router, the green help button willl provide explanatory details on each field of information required:   From the router management page, you can:   add / edit / delete a router;  view all the details of a router;  generate and view a router's configuration.", 
            "title": "Managing Routers"
        }, 
        {
            "location": "/features/routers/#configuration-generation-overview", 
            "text": "The simplest configuration to generate is the route collector configuration. A route collector is an IXP router which serves only to  accept all routes and export no routes . It is used for problem diagnosis, to aid customer monitoring and for looking glasses (see  INEX's here ).  The  standard configuration  simply pulls in a fairly standard header (sets up router ID, listening address and - for the collector at least - some unused filters) and creates a session for all customer routers on the given VLAN.  When adding a router, you give it a  handle . For example:  rc1-lan1-ipv4  which, for INEX, would mean a route collector on peering LAN1 using IPv4. Then - for the given router handle - the configuration can be generated and pulled using the API as follows:  #! /bin/sh  # The API Key.  # This is generated in IXP Manager via the top right menu: *My Account -  API Keys*  KEY = your-admin-ixp-manager-api-key  # The base URL of your IXP Manager install plus:  api/v4/router/gen-config  URL = https://ixp.example.com/api/v4/router/gen-config  # The handle is as described above:  HANDLE = rc1-lan1-ipv4  # Then the configuration can be pulled as follows: \ncurl --fail -s -H  X-IXP-Manager-API-Key:  ${ KEY }   ${ URL } / ${ HANDLE }   ${ HANDLE } .conf  Configurations for the route server and AS112 templates can be configured just as easily.  The stock templates for both are secure and well tested and can be used by setting the  template  element of the router to one of the following:   AS112:  'api/v4/router/as112/bird/standard'  Route Server:  'api/v4/router/server/bird/standard'   We also provide sample scripts for automating the re-configuration of these services by cron. See the  -v4  scripts  in this directory . These are quite robust and have been in production for ~3 years at INEX (as of Jan 2017).", 
            "title": "Configuration Generation Overview"
        }, 
        {
            "location": "/features/routers/#examples", 
            "text": "We use  Travis CI  to test IXP Manager before pushing new releases. The primary purpose of this is to ensure that the configuration for routers generated matches known good configurations from the same sample database.  These known good configurations also serve as useful examples of what the standard IXP Manager configuration generates.  See  these known good configurations here  with the prefix  ci-apiv4-  and:   as112 : AS112 router configurations conforming to  rfc7534  (AS112 Nameserver Operations) and implementing  rfc7535  (AS112 Redirection Using DNAME). There are configs to serve queries over both IPv4 and IPv6. See  the AS112 documentation for more details .  rc1 : route collector configurations. Peering with the route collector is mandatory at many IXPs including INEX. These are incredably useful for monitoring, diagnosing issues and providing looking glasses. We also use the quarantine version of these for turning up new member connections.  rs1 : route collector configurations. See below for full details of what these implement. Note also that the  ci-apiv4-rs1-lan2-ipv4.conf  file includes BGP large communities ( rfc8092 ). See  the route servers documentation for more details .", 
            "title": "Examples"
        }, 
        {
            "location": "/features/skinning/", 
            "text": "Templates \n Skinning\n\n\n\n\nRemember that v4 is a transition version of \nIXP Manager\n from Zend Framework / Smarty to Laravel and so much of the frontend / templating still uses v3 templates and code. As such, how to skin a page will depend on whether the template is found in \nresources/views\n (v4) or \napplication/[modules/xxx/]views\n (v3). Both are covered here.\n\n\n\n\nIXP Manager\n supports template/view skinning allowing users to substitute any of their own templates in place of the default ones shipped with IXP Manager.\n\n\nSkinning in Version 4+\n\n\nFirst, set the following parameter in \n.env\n:\n\n\nVIEW_SKIN=\nexample\n\n\n\n\n\n\nSkins should then be placed in the \nresources/skins/example\n directory (\nexample\n should be substituted for whatever you want to call your own skin). The default templates can be found in \nresources/views\n directory. INEX bundles its own skinned templates in \nresources/skins/inex\n as an example.\n\n\nOnce a skin is enabled from \n.env\n, then any templates found in the skin directory \n(using the same directory structure as found under \nresouces/views\n)\n will take precedence over the default template file. This means you do not need to recreate / copy all the default files - just replace the ones you want.\n\n\nIn previous versions of \nIXP Manager\n, we used Smarty as the templating engine. This meant that if someone wanted to help improve \nIXP Manager\n then they would need to become familiar with PHP \nand\n Smarty. In v4 we dropped Smarty and, rather than using another compiled templating engine, we have decided to go with native PHP templates.\n\n\nFor this, we are using \nFoil\n - \nFoil brings all the flexibility and power of modern template engines to native PHP templates. Write simple, clean and concise templates with nothing more than PHP.\n Also, simulaneously supported are Lavael's own \nBlade templates\n which we sometimes use for simple pages.\n\n\nExample\n\n\nThe \ngraphing\n MRTG configuration generator allows for custom configuration content at the top and bottom of the file. In order to have your custom configuration enabled, you need to skin two files.\n\n\nHere's an example:\n\n\n# position ourselves in the IXP Manager root directory\ncd /path/to/ixp4\n\n# make the skin directory\nmkdir resources/skins/example\n\n# create the full path required for the MRTG configuration files:\nmkdir -p resources/skins/example/services/grapher/mrtg\n\n# copy over the customisation files:\ncp views/services/grapher/mrtg/custom-header.foil.php resources/skins/example/services/grapher/mrtg\ncp views/services/grapher/mrtg/custom-footer.foil.php resources/skins/example/services/grapher/mrtg\n\n# edit the above files as required\nvi resources/skins/example/services/grapher/mrtg/custom-header.plates.php\nvi resources/skins/example/services/grapher/mrtg/custom-footer.plates.php\n\n\n\n\n\nThen, finally, edit \n.env\n and set the skin to use:\n\n\nVIEW_SKINS=\nexample\n\n\n\n\n\n\nYou can of course skin any file including the non-custom MRTG files as suits your needs.\n\n\nCustom Variables / Configuration Options\n\n\nWhen you are skinning your own templates, you may find you need to create custom configuration options for values you do not want to store directly in your own templates. For this, we have a configuration file which is excluded from Git. Initiate it via::\n\n\ncp config/custom.php.dist config/custom.php\n\n\n\n\n\nThis is \nLaravel's standard configuration file format\n (which is an associative PHP array). You can also use Laravel's dotenv variables here too.\n\n\nAs an example, if you were to create a configuration option:\n\n\n?php\n\n\nexample\n \n=\n \n[\n\n    \nkey\n \n=\n \nmy own config value\n,\n\n\n],\n\n\n\n\n\n\nthen in code this would be accessible as:\n\n\n?php\n\n\nconfig\n(\n \ncustom.example.key\n,\n \ndefault value if not set|null\n \n)\n\n\n\n\n\n\nwhere the second parameter is a default option if the requested configuration setting has not been defined (which defaults to \nnull\n). In templates, this can be accessed the same way or rendered in the template with::\n\n\n?\n=\n \nconfig\n(\n \ncustom.example.key\n,\n \ndefault\n \n)\n \n?\n\n\n\n\n\n\nSkinning Old Templates\n\n\nThis is still important as \nIXP Manager\n v4 still uses most of the previous templates.\n\n\nTo skin files found under \napplication/[modules/xxx/]views\n, proceed as follows:\n\n\n\n\n\n\nset a skin name in \n.env\n:\n   \nVIEW_SMARTY_SKIN=\nmyskin\n\n\n\n\n\n\n\n\n\n\ncreate a directory with a matching name: \napplication/views/_skins/myskin\n.\n\n\n\n\n\n\nOnce the above \n.env\n option is set, then any pages in its skin directory (using the same directory structure as \napplication/views\n will take precedence over the default template files. This means you do not need to recreate / copy all the default files - just replace the ones you want.\n\n\nFinding Templates\n\n\nUsually there is one of two places to find a template:\n\n\n\n\nNew pages in \n=v4: \nresources/views/$controller/$action\n\n\nOld pages from \nv4: \napplication/views/$controller/$action\n\n\n\n\nIf you're skinning, then there's an extra two places:\n\n\n\n\nNew pages in \n=v4: \nresources/skins/$skin/$controller/$action\n\n\nOld pages from \nv4: \napplication/views/_skins/$skin/$controller/$action\n\n\n\n\nThe indicated variables above mean:\n\n\n\n\n$controller\n: typically the first part of the URL (after the main IXP Manager site) for the page you are looking at. Examples include: \npatch-panel\n, \nrouter\n but they may also be deeper API paths such as \napi/v4/router\n.\n\n\n$action\n: the last part of the URL such as \nedit\n.\n\n\n$skin\n: the name of your skin as defined above.\n\n\n\n\nTypically\n, following the URL path in the views directory will yield the template file you need.\n\n\nTo help identify if the page you are looking at is from the \n=v4 code base, we have added a HTML comment to the templates which appears just after the \nhead\n tag as follows:\n\n\n\n\n\n\nFor \n=v4 (new codebase):\n\n\n!--  IXP MANAGER - template directory: resources/[views|skins] --\n\n\n\n\n\n\n\n\n\n\nFor \nv4 (old codebase):\n\n\n!--  IXP MANAGER - template directory: application/views --", 
            "title": "Skinning"
        }, 
        {
            "location": "/features/skinning/#templates-skinning", 
            "text": "Remember that v4 is a transition version of  IXP Manager  from Zend Framework / Smarty to Laravel and so much of the frontend / templating still uses v3 templates and code. As such, how to skin a page will depend on whether the template is found in  resources/views  (v4) or  application/[modules/xxx/]views  (v3). Both are covered here.   IXP Manager  supports template/view skinning allowing users to substitute any of their own templates in place of the default ones shipped with IXP Manager.", 
            "title": "Templates &amp; Skinning"
        }, 
        {
            "location": "/features/skinning/#skinning-in-version-4", 
            "text": "First, set the following parameter in  .env :  VIEW_SKIN= example   Skins should then be placed in the  resources/skins/example  directory ( example  should be substituted for whatever you want to call your own skin). The default templates can be found in  resources/views  directory. INEX bundles its own skinned templates in  resources/skins/inex  as an example.  Once a skin is enabled from  .env , then any templates found in the skin directory  (using the same directory structure as found under  resouces/views )  will take precedence over the default template file. This means you do not need to recreate / copy all the default files - just replace the ones you want.  In previous versions of  IXP Manager , we used Smarty as the templating engine. This meant that if someone wanted to help improve  IXP Manager  then they would need to become familiar with PHP  and  Smarty. In v4 we dropped Smarty and, rather than using another compiled templating engine, we have decided to go with native PHP templates.  For this, we are using  Foil  -  Foil brings all the flexibility and power of modern template engines to native PHP templates. Write simple, clean and concise templates with nothing more than PHP.  Also, simulaneously supported are Lavael's own  Blade templates  which we sometimes use for simple pages.", 
            "title": "Skinning in Version 4+"
        }, 
        {
            "location": "/features/skinning/#example", 
            "text": "The  graphing  MRTG configuration generator allows for custom configuration content at the top and bottom of the file. In order to have your custom configuration enabled, you need to skin two files.  Here's an example:  # position ourselves in the IXP Manager root directory\ncd /path/to/ixp4\n\n# make the skin directory\nmkdir resources/skins/example\n\n# create the full path required for the MRTG configuration files:\nmkdir -p resources/skins/example/services/grapher/mrtg\n\n# copy over the customisation files:\ncp views/services/grapher/mrtg/custom-header.foil.php resources/skins/example/services/grapher/mrtg\ncp views/services/grapher/mrtg/custom-footer.foil.php resources/skins/example/services/grapher/mrtg\n\n# edit the above files as required\nvi resources/skins/example/services/grapher/mrtg/custom-header.plates.php\nvi resources/skins/example/services/grapher/mrtg/custom-footer.plates.php  Then, finally, edit  .env  and set the skin to use:  VIEW_SKINS= example   You can of course skin any file including the non-custom MRTG files as suits your needs.", 
            "title": "Example"
        }, 
        {
            "location": "/features/skinning/#custom-variables-configuration-options", 
            "text": "When you are skinning your own templates, you may find you need to create custom configuration options for values you do not want to store directly in your own templates. For this, we have a configuration file which is excluded from Git. Initiate it via::  cp config/custom.php.dist config/custom.php  This is  Laravel's standard configuration file format  (which is an associative PHP array). You can also use Laravel's dotenv variables here too.  As an example, if you were to create a configuration option:  ?php  example   =   [ \n     key   =   my own config value ,  ],   then in code this would be accessible as:  ?php  config (   custom.example.key ,   default value if not set|null   )   where the second parameter is a default option if the requested configuration setting has not been defined (which defaults to  null ). In templates, this can be accessed the same way or rendered in the template with::  ? =   config (   custom.example.key ,   default   )   ?", 
            "title": "Custom Variables / Configuration Options"
        }, 
        {
            "location": "/features/skinning/#skinning-old-templates", 
            "text": "This is still important as  IXP Manager  v4 still uses most of the previous templates.  To skin files found under  application/[modules/xxx/]views , proceed as follows:    set a skin name in  .env :\n    VIEW_SMARTY_SKIN= myskin      create a directory with a matching name:  application/views/_skins/myskin .    Once the above  .env  option is set, then any pages in its skin directory (using the same directory structure as  application/views  will take precedence over the default template files. This means you do not need to recreate / copy all the default files - just replace the ones you want.", 
            "title": "Skinning Old Templates"
        }, 
        {
            "location": "/features/skinning/#finding-templates", 
            "text": "Usually there is one of two places to find a template:   New pages in  =v4:  resources/views/$controller/$action  Old pages from  v4:  application/views/$controller/$action   If you're skinning, then there's an extra two places:   New pages in  =v4:  resources/skins/$skin/$controller/$action  Old pages from  v4:  application/views/_skins/$skin/$controller/$action   The indicated variables above mean:   $controller : typically the first part of the URL (after the main IXP Manager site) for the page you are looking at. Examples include:  patch-panel ,  router  but they may also be deeper API paths such as  api/v4/router .  $action : the last part of the URL such as  edit .  $skin : the name of your skin as defined above.   Typically , following the URL path in the views directory will yield the template file you need.  To help identify if the page you are looking at is from the  =v4 code base, we have added a HTML comment to the templates which appears just after the  head  tag as follows:    For  =v4 (new codebase):  !--  IXP MANAGER - template directory: resources/[views|skins] --     For  v4 (old codebase):  !--  IXP MANAGER - template directory: application/views --", 
            "title": "Finding Templates"
        }, 
        {
            "location": "/dev/api/", 
            "text": "API\n\n\nYou'll find API documentation when logged into IXP manager under \nMy Account / API Keys\n.", 
            "title": "API"
        }, 
        {
            "location": "/dev/api/#api", 
            "text": "You'll find API documentation when logged into IXP manager under  My Account / API Keys .", 
            "title": "API"
        }, 
        {
            "location": "/dev/ci/", 
            "text": "Continuous Integration\n\n\nIXP Manager grew out of a code base and schema that started in the early '90s. Long before \ntest driven development\n or \nbehaviour driven development\n was fashionable for PHP. However, as IXP Manager is taking over more and more critical configuration tasks, we need to back fill some automated testing with continuous integration.\n\n\nFor this we have chosen \nTravis-CI\n which provides free cloud based CI linked with GitHub for open source projects. Our current build status is: \n\n\nWe won't be aggressively writing tests for the existing codebase but will add tests as appropriate as we continue development. What follows is some basic instructions on how to set up tests and an overview (or links) to tests we have implemented.\n\n\nSetting Up PHPUnit Tests\n\n\nDISCLAIMER:\n This is not a tutorial on unit testing, phpunit or anything else. If you have no experience with these tools, please read up on them elsewhere first.\n\n\nDocumentation by real example can be found via the \n.travis.yml\n file and \nthe Travis data directory\n which contains scripts, database dumps and configurations.\n\n\nTesting assumes \na known good sample database\n which contains a small mix of customers with different configuration options. The files generated from this database are tested against \nknown good\n configuration files. You first need to create a database, add a database user, import this testing database and then configure a \n.env\n section for testing.\n\n\nIn MySQL:\n\n\nCREATE\n \nDATABASE\n \nixp_ci\n \nCHARACTER\n \nSET\n \n=\n \nutf8mb4\n \nCOLLATE\n \n=\n \nutf8mb4_unicode_ci\n;\n\n\nGRANT\n \nALL\n \nON\n \n`ixp_ci`\n.\n*\n \nTO\n \n`ixp_ci`\n@\n`localhost`\n \nIDENTIFIED\n \nBY\n \nsomepassword\n;\n\n\nFLUSH\n \nPRIVILEGES\n;\n\n\n\n\n\n\nThen import the sample database:\n\n\nbzcat data/travis-ci/travis_ci_test_db.sql.bz2  \n|\n mysql -h localhost -u ixp_ci -psomepassword ixp_ci\n\n\n\n\n\nNow, create your \n.env\n for testing, such as:\n\n\nDB_HOST\n=\nlocalhost\n\n\nDB_DATABASE\n=\nixp_ci\n\n\nDB_USERNAME\n=\nixp_ci\n\n\nDB_PASSWORD\n=\nsomepassword\n\n\n\n\n\n\nNote that the \nphpunit.xml\n file in the root directory has some default settings matching the test database. You should not need to edit these.\n\n\nRunning Tests\n\n\nIn one console session, start the artisan / Laravel web server:\n\n\n# move to the root directory of IXP Manager\n\n\ncd\n \n$IXPROOT\n\nphp artisan serve\n\n\n\n\n\nAnd then kick off the tests:\n\n\nphpunit\n\n\n\n\n\nSample output:\n\n\nPHPUnit 6.1.0 by Sebastian Bergmann and contributors.\n\n...............                                                   15 / 15 (100%)\n\nTime: 1.65 seconds, Memory: 32.00MB\n\nOK (15 tests, 67 assertions)", 
            "title": "Continuous Integration"
        }, 
        {
            "location": "/dev/ci/#continuous-integration", 
            "text": "IXP Manager grew out of a code base and schema that started in the early '90s. Long before  test driven development  or  behaviour driven development  was fashionable for PHP. However, as IXP Manager is taking over more and more critical configuration tasks, we need to back fill some automated testing with continuous integration.  For this we have chosen  Travis-CI  which provides free cloud based CI linked with GitHub for open source projects. Our current build status is:   We won't be aggressively writing tests for the existing codebase but will add tests as appropriate as we continue development. What follows is some basic instructions on how to set up tests and an overview (or links) to tests we have implemented.", 
            "title": "Continuous Integration"
        }, 
        {
            "location": "/dev/ci/#setting-up-phpunit-tests", 
            "text": "DISCLAIMER:  This is not a tutorial on unit testing, phpunit or anything else. If you have no experience with these tools, please read up on them elsewhere first.  Documentation by real example can be found via the  .travis.yml  file and  the Travis data directory  which contains scripts, database dumps and configurations.  Testing assumes  a known good sample database  which contains a small mix of customers with different configuration options. The files generated from this database are tested against  known good  configuration files. You first need to create a database, add a database user, import this testing database and then configure a  .env  section for testing.  In MySQL:  CREATE   DATABASE   ixp_ci   CHARACTER   SET   =   utf8mb4   COLLATE   =   utf8mb4_unicode_ci ;  GRANT   ALL   ON   `ixp_ci` . *   TO   `ixp_ci` @ `localhost`   IDENTIFIED   BY   somepassword ;  FLUSH   PRIVILEGES ;   Then import the sample database:  bzcat data/travis-ci/travis_ci_test_db.sql.bz2   |  mysql -h localhost -u ixp_ci -psomepassword ixp_ci  Now, create your  .env  for testing, such as:  DB_HOST = localhost  DB_DATABASE = ixp_ci  DB_USERNAME = ixp_ci  DB_PASSWORD = somepassword   Note that the  phpunit.xml  file in the root directory has some default settings matching the test database. You should not need to edit these.", 
            "title": "Setting Up PHPUnit Tests"
        }, 
        {
            "location": "/dev/ci/#running-tests", 
            "text": "In one console session, start the artisan / Laravel web server:  # move to the root directory of IXP Manager  cd   $IXPROOT \nphp artisan serve  And then kick off the tests:  phpunit  Sample output:  PHPUnit 6.1.0 by Sebastian Bergmann and contributors.\n\n...............                                                   15 / 15 (100%)\n\nTime: 1.65 seconds, Memory: 32.00MB\n\nOK (15 tests, 67 assertions)", 
            "title": "Running Tests"
        }, 
        {
            "location": "/dev/docs/", 
            "text": "Documentation\n\n\nFrom v4 onwards, we use \nGitHub Pages\n with \nMkDocs\n to build the documentation.\n\n\nBoth the site and the content are hosted on \nGitHub\n.\n\n\nContributing / Suggesting Errata\n\n\nWe welcome contributions or errata that improve the quality of our documenation. Please use one of the following two channels:\n\n\n\n\nVia the standard GitHub workflow of forking \nour documentation repository\n, making your edits in your fork and them opening a pull request.\n\n\nIf you are not familiar with GitHub, then please \nopen an issue on the documentation repository\n with your suggestions.\n\n\n\n\nBuilding Locally\n\n\nIf you haven't already, install MkDocs:\n\n\npip install mkdocs\npip install pymdown-extensions\n\n\n\n\n\nThe documentation can then be built locally as follows:\n\n\ngit clone https://github.com/inex/ixp-manager-docs-md.git\n\ncd \nixp-manager-docs-md\nmkdocs build\n\n\n\n\n\nYou can \nserve\n them locally with the following and then access them via http://127.0.0.1:8000 -\n\n\nmkdocs serve\n\n\n\n\n\nTo automatically deploy to GitHub and make live:\n\n\nmkdocs gh-deploy\n\n\n\n\n\nYou must be an authorised user for this but we \nwelcome pull requests against the documentation repository!", 
            "title": "Documentation"
        }, 
        {
            "location": "/dev/docs/#documentation", 
            "text": "From v4 onwards, we use  GitHub Pages  with  MkDocs  to build the documentation.  Both the site and the content are hosted on  GitHub .", 
            "title": "Documentation"
        }, 
        {
            "location": "/dev/docs/#contributing-suggesting-errata", 
            "text": "We welcome contributions or errata that improve the quality of our documenation. Please use one of the following two channels:   Via the standard GitHub workflow of forking  our documentation repository , making your edits in your fork and them opening a pull request.  If you are not familiar with GitHub, then please  open an issue on the documentation repository  with your suggestions.", 
            "title": "Contributing / Suggesting Errata"
        }, 
        {
            "location": "/dev/docs/#building-locally", 
            "text": "If you haven't already, install MkDocs:  pip install mkdocs\npip install pymdown-extensions  The documentation can then be built locally as follows:  git clone https://github.com/inex/ixp-manager-docs-md.git cd  ixp-manager-docs-md\nmkdocs build  You can  serve  them locally with the following and then access them via http://127.0.0.1:8000 -  mkdocs serve  To automatically deploy to GitHub and make live:  mkdocs gh-deploy  You must be an authorised user for this but we  welcome pull requests against the documentation repository!", 
            "title": "Building Locally"
        }, 
        {
            "location": "/dev/grapher/", 
            "text": "Grapher\n\n\nOutline of Adding a New Graph Type\n\n\nThis is a quick write up as I commit a new graph type. To be fleshed out.\n\n\nOur new graphing backend, \nGrapher\n, supports different graph types from different backends. To add a new graph type - let's call it \nExample\n - you need to do the following:\n\n\n\n\nCreate a graph class for this new type called \napp/Services/Grapher/Graph/Example.php\n. This must extend the abstract class \napp/Services/Grapher/Graph.php\n.\n\n\nAdd an \nexample()\n function to \napp/Services/Grapher.php\n which instantiates the above graph object.\n\n\nUpdate the appropriate backend file(s) (\napp/Services/Grapher/Backend/xxx\n) to handle this new graph file. I.e. create the actual implementation for getting the data to process this graph.\n\n\nAdd your graph to the \nsupports()\n function in the appropriate backends (and the \napp/Services/Grapher/Backend/Dummy\n backend).\n\n\n\n\nTo serve this graph over HTTP:\n\n\n\n\n\n\nCreate a GET route in \napp/Providers/GrapherServiceProvider.php\n\n\n\n\nCreate a function to handle the GET request in \napp/Http/Controllers/Services/Grapher.php\n\n\nAdd functionality to the middleware to process a graph request: \napp/Http/Middleware/Services/Grapher.php\n\n\n\n\nHere's a great example from a \nGithub commit\n.\n\n\nAdding a New MRTG Graph\n\n\nHere is an example of adding \nbroadcast graphs\n to MRTG.", 
            "title": "Grapher"
        }, 
        {
            "location": "/dev/grapher/#grapher", 
            "text": "", 
            "title": "Grapher"
        }, 
        {
            "location": "/dev/grapher/#outline-of-adding-a-new-graph-type", 
            "text": "This is a quick write up as I commit a new graph type. To be fleshed out.  Our new graphing backend,  Grapher , supports different graph types from different backends. To add a new graph type - let's call it  Example  - you need to do the following:   Create a graph class for this new type called  app/Services/Grapher/Graph/Example.php . This must extend the abstract class  app/Services/Grapher/Graph.php .  Add an  example()  function to  app/Services/Grapher.php  which instantiates the above graph object.  Update the appropriate backend file(s) ( app/Services/Grapher/Backend/xxx ) to handle this new graph file. I.e. create the actual implementation for getting the data to process this graph.  Add your graph to the  supports()  function in the appropriate backends (and the  app/Services/Grapher/Backend/Dummy  backend).   To serve this graph over HTTP:    Create a GET route in  app/Providers/GrapherServiceProvider.php   Create a function to handle the GET request in  app/Http/Controllers/Services/Grapher.php  Add functionality to the middleware to process a graph request:  app/Http/Middleware/Services/Grapher.php   Here's a great example from a  Github commit .", 
            "title": "Outline of Adding a New Graph Type"
        }, 
        {
            "location": "/dev/grapher/#adding-a-new-mrtg-graph", 
            "text": "Here is an example of adding  broadcast graphs  to MRTG.", 
            "title": "Adding a New MRTG Graph"
        }, 
        {
            "location": "/dev/helpders/", 
            "text": "Helpers\n\n\nVarious helpers we use within IXP Manager.\n\n\nAlerts\n\n\nTo show Bootstrap-styled alerts on view (Foil) templates, add them in your controllers as follows:\n\n\n?php\n\n    \nuse\n \nIXP\\Utils\\View\\Alert\\Container\n \nas\n \nAlertContainer\n;\n\n    \nuse\n \nIXP\\Utils\\View\\Alert\\Alert\n;\n\n\n    \n...\n\n\n    \nAlertContainer\n::\npush\n(\n \nb\nExample\n:\n/\nb\n \nThis\n \nis\n \na\n \nsuccess\n \nalert\n!\n,\n \nAlert\n::\nSUCCESS\n \n);\n\n\n\n\n\n\nwhere the types available are: \nSUCCESS, INFO (default), DANGER, WARNING\n.\n\n\nTo then display (all) the alerts, in your foil template add:\n\n\n?\n=\n \n$t\n-\nalerts\n()\n \n?\n\n\n\n\n\n\nThese alerts are HTML-safe as they display the message using HTML Purifier's ''clean()''.", 
            "title": "Helpers"
        }, 
        {
            "location": "/dev/helpders/#helpers", 
            "text": "Various helpers we use within IXP Manager.", 
            "title": "Helpers"
        }, 
        {
            "location": "/dev/helpders/#alerts", 
            "text": "To show Bootstrap-styled alerts on view (Foil) templates, add them in your controllers as follows:  ?php \n     use   IXP\\Utils\\View\\Alert\\Container   as   AlertContainer ; \n     use   IXP\\Utils\\View\\Alert\\Alert ; \n\n     ... \n\n     AlertContainer :: push (   b Example : / b   This   is   a   success   alert ! ,   Alert :: SUCCESS   );   where the types available are:  SUCCESS, INFO (default), DANGER, WARNING .  To then display (all) the alerts, in your foil template add:  ? =   $t - alerts ()   ?   These alerts are HTML-safe as they display the message using HTML Purifier's ''clean()''.", 
            "title": "Alerts"
        }, 
        {
            "location": "/dev/vagrant/", 
            "text": "Vagrant\n\n\nTo aid development (as well as allowing easier evaluation), we use \nVagrant\n from v4 onwards.\n\n\nQuick Vagrant\n\n\n\n\nTemporary issue:\n Ubuntu Xenial has a known issue and a couple extra steps are required right now (in the \nnf-graphs-decix\n branch): https://github.com/inex/IXP-Manager/commit/dd8d256712ec2564eee29aab7cc2eabdf33466d6\n\n\n\n\nIf you want to get IXP Manager with Vagrant up and running quickly, follow these steps:\n\n\n\n\nInstall Vagrant (see: http://docs.vagrantup.com/v2/installation/index.html)\n\n\nInstall VirtualBox (see: https://www.virtualbox.org/)\n\n\n\n\nClone IXP Manager to a directory:\n\n\ngit clone https://github.com/inex/IXP-Manager.git ixpmanager\n\ncd \nixpmanager\n\n\n\n\n\n\n\n\n\nSpin up a Vagrant virtual machine:\n\n\nvagrant up\n\n\n\n\n\n\n\n\n\nAccess IXP Manager on: http://localhost:8088/\n\n\n\n\n\n\nLog in with one of the following username / passwords:\n\n\n\n\n\n\nAdmin user: \nvagrant / vagrant1\n\n\n\n\nCustomer Admin: \nas112 / as112as112\n\n\nCustomer User: \nasii2user / as112as112\n\n\n\n\nPlease see Vagrant's own documentation for a full description of how to use it fully. To access the virtual machine that the above has spun up, just run the following from the \nixpmanager\n directory:\n\n\nvagrant ssh\n\n\n\n\n\nYou'll find the \nixpmanager\n directory mounted under \n/vagrant\n, you can \nsudo su -\n and you can access MySQL via:\n\n\nmysql -u root -ppassword ixp\n\n\n\n\n\nIf you prefer to use phpMyAdmin, you'll find it at http://localhost:8088/phpmyadmin and you can log in with \nroot / password\n.\n\n\nDatabase Details\n\n\nSpinning up Vagrant in the above manner loads a sample database from \nixpmanager/database/vagrant-base.sql\n. If you have a preferred development database, place a bzip'd copy of it at \nixpmanager/ixpmanager-preferred.sql.bz2\n before step 5 above.", 
            "title": "Vagrant"
        }, 
        {
            "location": "/dev/vagrant/#vagrant", 
            "text": "To aid development (as well as allowing easier evaluation), we use  Vagrant  from v4 onwards.", 
            "title": "Vagrant"
        }, 
        {
            "location": "/dev/vagrant/#quick-vagrant", 
            "text": "Temporary issue:  Ubuntu Xenial has a known issue and a couple extra steps are required right now (in the  nf-graphs-decix  branch): https://github.com/inex/IXP-Manager/commit/dd8d256712ec2564eee29aab7cc2eabdf33466d6   If you want to get IXP Manager with Vagrant up and running quickly, follow these steps:   Install Vagrant (see: http://docs.vagrantup.com/v2/installation/index.html)  Install VirtualBox (see: https://www.virtualbox.org/)   Clone IXP Manager to a directory:  git clone https://github.com/inex/IXP-Manager.git ixpmanager cd  ixpmanager    Spin up a Vagrant virtual machine:  vagrant up    Access IXP Manager on: http://localhost:8088/    Log in with one of the following username / passwords:    Admin user:  vagrant / vagrant1   Customer Admin:  as112 / as112as112  Customer User:  asii2user / as112as112   Please see Vagrant's own documentation for a full description of how to use it fully. To access the virtual machine that the above has spun up, just run the following from the  ixpmanager  directory:  vagrant ssh  You'll find the  ixpmanager  directory mounted under  /vagrant , you can  sudo su -  and you can access MySQL via:  mysql -u root -ppassword ixp  If you prefer to use phpMyAdmin, you'll find it at http://localhost:8088/phpmyadmin and you can log in with  root / password .", 
            "title": "Quick Vagrant"
        }, 
        {
            "location": "/dev/vagrant/#database-details", 
            "text": "Spinning up Vagrant in the above manner loads a sample database from  ixpmanager/database/vagrant-base.sql . If you have a preferred development database, place a bzip'd copy of it at  ixpmanager/ixpmanager-preferred.sql.bz2  before step 5 above.", 
            "title": "Database Details"
        }
    ]
}