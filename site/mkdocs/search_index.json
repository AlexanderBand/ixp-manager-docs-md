{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to IXP Manager\n\uf0c1\n\n\n\n\nThis documentation relates to IXP Manager \n= v4. For v3, please see \nthe older documentation here\n.\n\n\nIXP Manager\n is a full stack management system for Internet eXchange Points (IXPs) which includes an administration and customer portal; provides end to end provisioning; and both teaches and implements best practice.\n\n\nINEX\n are pleased to release \nIXP Manager\n under an open source license (the GNU Public License V2) which we hope will benefit the wider IXP community, and especially new and small IXPs looking to expand.\n\n\nAdditional information: \nhttp://www.ixpmanager.org/\n\n\nOther Links\n\uf0c1\n\n\n\n\nIXP Manager Website\n\n\nDocumentation\n (this site!) including:\n\n\nInstallation \noverview\n,\n\nby automated script\n,\n\nmanually\n,\nand \nupgrading from v3\n.\n\n\nUpgrade Instructions\n\n\n\n\n\n\nReleases\n\n\nList of Users\n (contact us if you are missing!)\n\n\nHow to Get Help\n\n\nCommercial Support\n\n\nPresentations \n Talks\n\n\nSponsors and Sponsorship\n\n\nFollow \n@ixpmanager\n on Twitter\n\n\n\n\nDocumentation\n\uf0c1\n\n\nFrom v4 onwards, our documentation is now hosted on this site.\n\n\nFor a period, some older v3 documentation may still be useful. You can find that on the \nwiki\n.\n\n\nAbout IXP Manager\n\uf0c1\n\n\nFor detailed information, see: https://www.ixpmanager.org/\n\n\nIXP Manager is primarily a web application with associated scripts and utilities which will allow IXPs to manage new customers, provision new connections / services and monitor traffic usage. It also has a self contained customer portal allowing IXP members to view their IXP traffic statistics and a unique tool called My Peering Manager enabling IXP members to request, manage and track peerings with other members.\n\n\nINEX\n is an Internet eXchange Point and Ireland's IP peering hub. It is a neutral, industry-owned Association, founded in 1996, that provides IP peering facilities for its members. INEX membership is open to all organisations that can benefit from peering their IP traffic.\n\n\nSee: https://www.inex.ie/\n\n\nAuthors:\n\n\n\n\nBarry O'Donovan\n / \n@barryo79\n\n\nNick Hilliard\n\n\nContact us via: operations (at) inex.ie\n\n\n\n\nSince the end of 2016, IXP Manager has a new full time developer: \nYann Robin\n.\n\n\nWe are also grateful \nfor all the individuals who have contributing code\n, issues, mailing list help and feature requests.\n\n\nCopyright (C) 2009-2017 Internet Neutral Exchange Association Company Limited By Guarantee.\nAll Rights Reserved.\n\n\nSponsors\n\uf0c1\n\n\nIXP Manager is extremely grateful to its \nexisting sponsors\n and continues to seek sponsors for on going development. If you are interested, please \nsee out call for sponsorship\n.\n\n\nLicense\n\uf0c1\n\n\nIXP Manager is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version v2.0 of the License.\n\n\nIXP Manager is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.\n\n\nYou should have received a copy of the GNU General Public License v2.0 along with IXP Manager.  If not, see:\n\n\nhttp://www.gnu.org/licenses/gpl-2.0.html\n\n\nDocumentation License\n\uf0c1\n\n\nThis documentation is licensed under a \nCreative Commons Attribution-ShareAlike 4.0 International License\n.", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-ixp-manager", 
            "text": "This documentation relates to IXP Manager  = v4. For v3, please see  the older documentation here .  IXP Manager  is a full stack management system for Internet eXchange Points (IXPs) which includes an administration and customer portal; provides end to end provisioning; and both teaches and implements best practice.  INEX  are pleased to release  IXP Manager  under an open source license (the GNU Public License V2) which we hope will benefit the wider IXP community, and especially new and small IXPs looking to expand.  Additional information:  http://www.ixpmanager.org/", 
            "title": "Welcome to IXP Manager"
        }, 
        {
            "location": "/#other-links", 
            "text": "IXP Manager Website  Documentation  (this site!) including:  Installation  overview , by automated script , manually ,\nand  upgrading from v3 .  Upgrade Instructions    Releases  List of Users  (contact us if you are missing!)  How to Get Help  Commercial Support  Presentations   Talks  Sponsors and Sponsorship  Follow  @ixpmanager  on Twitter", 
            "title": "Other Links"
        }, 
        {
            "location": "/#documentation", 
            "text": "From v4 onwards, our documentation is now hosted on this site.  For a period, some older v3 documentation may still be useful. You can find that on the  wiki .", 
            "title": "Documentation"
        }, 
        {
            "location": "/#about-ixp-manager", 
            "text": "For detailed information, see: https://www.ixpmanager.org/  IXP Manager is primarily a web application with associated scripts and utilities which will allow IXPs to manage new customers, provision new connections / services and monitor traffic usage. It also has a self contained customer portal allowing IXP members to view their IXP traffic statistics and a unique tool called My Peering Manager enabling IXP members to request, manage and track peerings with other members.  INEX  is an Internet eXchange Point and Ireland's IP peering hub. It is a neutral, industry-owned Association, founded in 1996, that provides IP peering facilities for its members. INEX membership is open to all organisations that can benefit from peering their IP traffic.  See: https://www.inex.ie/  Authors:   Barry O'Donovan  /  @barryo79  Nick Hilliard  Contact us via: operations (at) inex.ie   Since the end of 2016, IXP Manager has a new full time developer:  Yann Robin .  We are also grateful  for all the individuals who have contributing code , issues, mailing list help and feature requests.  Copyright (C) 2009-2017 Internet Neutral Exchange Association Company Limited By Guarantee.\nAll Rights Reserved.", 
            "title": "About IXP Manager"
        }, 
        {
            "location": "/#sponsors", 
            "text": "IXP Manager is extremely grateful to its  existing sponsors  and continues to seek sponsors for on going development. If you are interested, please  see out call for sponsorship .", 
            "title": "Sponsors"
        }, 
        {
            "location": "/#license", 
            "text": "IXP Manager is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version v2.0 of the License.  IXP Manager is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License v2.0 along with IXP Manager.  If not, see:  http://www.gnu.org/licenses/gpl-2.0.html", 
            "title": "License"
        }, 
        {
            "location": "/#documentation-license", 
            "text": "This documentation is licensed under a  Creative Commons Attribution-ShareAlike 4.0 International License .", 
            "title": "Documentation License"
        }, 
        {
            "location": "/install/", 
            "text": "Installation\n\uf0c1\n\n\nWe've tried out best to make installing IXP Manager as easy as possible via the install script(s) we provide. These scripts are opinionated about what version of Linux is used and how IXP Manager is installed. It's targeted at people who don't have a huge amount of system administration skills or want to take a quick look to evaluate the product.\n\n\nIf you want to install on your own preferred platform or with your own tweaks, we provide detailed instructions below also but we only offer whatever support you'll find on the \npublic mailing list\n.\n\n\nThe installation of IXP Manager doesn't end when you have the web interface up and running (which is mostly what we cover in this section and the installation script) - that's really just the beginning. Completing the installation is about all the features that work around and via IXP Manager such as route server configurations, graphing, peer to peer graphs via sflow, etc. Each of these require different amounts of effort and are covered in their individual feature pages.", 
            "title": "Introduction"
        }, 
        {
            "location": "/install/#installation", 
            "text": "We've tried out best to make installing IXP Manager as easy as possible via the install script(s) we provide. These scripts are opinionated about what version of Linux is used and how IXP Manager is installed. It's targeted at people who don't have a huge amount of system administration skills or want to take a quick look to evaluate the product.  If you want to install on your own preferred platform or with your own tweaks, we provide detailed instructions below also but we only offer whatever support you'll find on the  public mailing list .  The installation of IXP Manager doesn't end when you have the web interface up and running (which is mostly what we cover in this section and the installation script) - that's really just the beginning. Completing the installation is about all the features that work around and via IXP Manager such as route server configurations, graphing, peer to peer graphs via sflow, etc. Each of these require different amounts of effort and are covered in their individual feature pages.", 
            "title": "Installation"
        }, 
        {
            "location": "/install/automated-script/", 
            "text": "Automated Installation Script\n\uf0c1\n\n\nThe available installation script(s) can be found at: \nhttps://github.com/inex/IXP-Manager/tree/master/tools/installers\n.\n\n\nEven if you choose not to use these, the scripts under the above link show the accurate and complete installation process and should be used as a reference guide.", 
            "title": "Automated Script"
        }, 
        {
            "location": "/install/automated-script/#automated-installation-script", 
            "text": "The available installation script(s) can be found at:  https://github.com/inex/IXP-Manager/tree/master/tools/installers .  Even if you choose not to use these, the scripts under the above link show the accurate and complete installation process and should be used as a reference guide.", 
            "title": "Automated Installation Script"
        }, 
        {
            "location": "/install/maint-mode/", 
            "text": "Maintenance Mode\n\uf0c1\n\n\nWhile most updates of \nIXP Manager\n are quick, some may be more involved with schema updates or complicated migration steps. In these cases it's useful and advisable to put \nIXP Manager\n in maintenance mode.\n\n\nMaintenance mode is now handled by Laravel's built in tool for this. You can review \ntheir own documentation for this\n which us copied here.\n\n\nWhen your application is in maintenance mode, a custom view will be displayed for all requests into your application. This makes it easy to \"disable\" your application while it is updating or when you are performing maintenance. A maintenance mode check is included in the default middleware stack for your application. If the application is in maintenance mode, a \nMaintenanceModeException\n will be thrown with a status code of 503.\n\n\nTo enable maintenance mode, simply execute the down Artisan command:\n\n\nphp artisan down\n\n\n\n\n\nYou may also provide message and retry options to the down command. The message value may be used to display or log a custom message, while the retry value will be set as the Retry-After HTTP header's value::\n\n\nphp artisan down --message=\nUpgrading Database\n --retry=60\n\n\n\n\n\nTo disable maintenance mode, use the up command::\n\n\nphp artisan up", 
            "title": "Maintenance Mode"
        }, 
        {
            "location": "/install/maint-mode/#maintenance-mode", 
            "text": "While most updates of  IXP Manager  are quick, some may be more involved with schema updates or complicated migration steps. In these cases it's useful and advisable to put  IXP Manager  in maintenance mode.  Maintenance mode is now handled by Laravel's built in tool for this. You can review  their own documentation for this  which us copied here.  When your application is in maintenance mode, a custom view will be displayed for all requests into your application. This makes it easy to \"disable\" your application while it is updating or when you are performing maintenance. A maintenance mode check is included in the default middleware stack for your application. If the application is in maintenance mode, a  MaintenanceModeException  will be thrown with a status code of 503.  To enable maintenance mode, simply execute the down Artisan command:  php artisan down  You may also provide message and retry options to the down command. The message value may be used to display or log a custom message, while the retry value will be set as the Retry-After HTTP header's value::  php artisan down --message= Upgrading Database  --retry=60  To disable maintenance mode, use the up command::  php artisan up", 
            "title": "Maintenance Mode"
        }, 
        {
            "location": "/install/manually/", 
            "text": "Requirements\n\uf0c1\n\n\nIXP Manager tries to stay current in terms of technology. Typically, this means some element of framework refresh(es) every couple of years and other more incremental package upgrades with minor version upgrades. As well as the obvious reasons for this, there is also the requirement to prevent developer apathy - insisting on legacy frameworks and packages that have been EOL'd provides a major stumbling block for bringing on new developers and contributors.\n\n\nThe current requirements for the web application are:\n\n\n\n\na Linux / BSD host.\n\n\nMySQL version 5.7 or later.\n\n\nApache / Nginx / etc.\n\n\nPHP \n= 7.0. \nNote that IXP Manager will not run on older versions of PHP.\n\n\nMemcached - optional but highly recommended.\n\n\n\n\nTo complete the installation using the included config/scripts, you will also need to have installed git (\napt-get install git\n) and a number of PHP extensions (see the example \napt-get install\n below).\n\n\nRegrettably the potential combinations of operating systems, versions of\nsame and then versions of PHP are too numerous to provide individual\nsupport. As such, we recommend installing IXP Manager on Ubuntu LTS 16.04 and we officially support this platform.\n\n\nIn fact we provide a complete installation script for this - see \nthe automated installation page\n for details. If you have any issues with the manual installation, the automated script should be your first reference to compare what you are doing to what we recommend.\n\n\nFor completeness, the IXP Manager installation script for Ubuntu 16.04 LTS installs:\n\n\napt-get install -qy apache2 php7.0 php7.0-intl php-rrd php7.0-cgi php7.0-cli       \n\\\n\n    php7.0-snmp php7.0-curl php7.0-mcrypt php-memcached libapache2-mod-php7.0      \n\\\n\n    mysql-server mysql-client php7.0-mysql memcached snmp nodejs nodejs-legacy npm \n\\\n\n    php7.0-mbstring php7.0-xml php7.0-gd php7.0-bcmath php-gettext bgpq3           \n\\\n\n    php-memcache unzip php7.0-zip git php-yaml php-ds libconfig-general-perl       \n\\\n\n    libnetaddr-ip-perl mrtg  libconfig-general-perl libnetaddr-ip-perl rrdtool     \n\\\n\n    librrds-perl\n\n\n\n\n\nIf you are using a different platform, you will need to replicate the above as appropriate for your chosen platform.\n\n\nGet the IXP Manager Source\n\uf0c1\n\n\nThe code for IXP Manager is maintained on GitHub and the canonical repository is \ninex/IXP-Manager\n.\n\n\nLog into the server where you wish to install IXP Manager. Move to the directory where you wish to store the source (our examples use \n/srv/ixpmanager\n which we refer to as \n$IXPROOT\n). Note that it \nshould not\n be checked out into any web exposed directory (e.g. do not checkout to \n/var/www\n).\n\n\nIXPROOT\n=\n/srv/ixpmanager\n\ncd\n /srv\ngit clone https://github.com/inex/IXP-Manager.git ixpmanager\n\ncd\n \n$IXPROOT\n   \n# /srv/ixpmanager\n\ngit checkout master\nchown -R www-data: \n$IXPROOT\n\n\n\n\n\n\nInstall Composer and Bower\n\uf0c1\n\n\nIXP Manager uses \nComposer\n to manage its PHP dependencies. First, download a copy of the composer.phar. Once you have the PHAR archive, you can either keep it in your local project directory or move to \n/usr/local/bin\n to use it globally on your system.\n\n\nThe installation script for Ubuntu 16.04 LTS installs these via:\n\n\ncd\n \n$IXPROOT\n\n\nEXPECTED_SIGNATURE\n=\n$(\nwget https://composer.github.io/installer.sig -O - -q\n)\n\nphp -r \ncopy(\nhttps://getcomposer.org/installer\n, \ncomposer-setup.php\n);\n\n\nACTUAL_SIGNATURE\n=\n$(\nphp -r \necho hash_file(\nSHA384\n, \ncomposer-setup.php\n);\n)\n\n\n\nif\n \n[\n \n$EXPECTED_SIGNATURE\n \n=\n \n$ACTUAL_SIGNATURE\n \n]\n;\n \nthen\n\n    sudo -u www-data bash -c \nHOME=\n$IXPROOT\n \n cd \n$IXPROOT\n \n php composer-setup.php --quiet\n\n    rm \n$IXPROOT\n/composer-setup.php\n\nelse\n\n    \necho\n -e \n\\n\\nERROR: Invalid installer signature for composer installation\n\n    rm \n$IXPROOT\n/composer-setup.php\n    \nexit \n1\n\nfi\n\n\n\n\n\n\nand:\n\n\nnpm install -g bower\n\n\n\n\n\nInitial Setup and Dependancies\n\uf0c1\n\n\nDependencies\n\uf0c1\n\n\nInstall the required PHP libraries and frontend CSS/JS packages:\n\n\ncd\n \n$IXPROOT\n\nphp composer.phar install\nbower install\ncp .env.example .env\nphp artisan key:generate\n\n\n\n\n\nDatabase Setup\n\uf0c1\n\n\nUse whatever means you like to create a database and user for IXP Manager. For example:\n\n\nCREATE\n \nDATABASE\n \n`ixp`\n \nCHARACTER\n \nSET\n \n=\n \nutf8mb4\n \nCOLLATE\n \n=\n \nutf8mb4_unicode_ci\n;\n\n\nGRANT\n \nALL\n \nON\n \n`ixp`\n.\n*\n \nTO\n \n`ixp`\n@\n`localhost`\n \nIDENTIFIED\n \nBY\n \npick a password!\n;\n\n\nFLUSH\n \nPRIVILEGES\n;\n\n\n\n\n\n\nThen edit \n$IXPROOT/.env\n and set the database options:\n\n\nDB_HOST=localhost\nDB_DATABASE=ixp\nDB_USERNAME=ixp\nDB_PASSWORD=password\n\n\n\n\n\nNow create the database schema:\n\n\nphp artisan doctrine:schema:create\n\n\n\n\n\nSome older scripts still rely on MySQL view tables. Create these with:\n\n\nmysql -u ixp -p ixp \n \n$IXPROOT\n/tools/sql/views.sql\n\n\n\n\n\nConfiguration\n\uf0c1\n\n\nEdit \n$IXPROOT/.env\n and review and set/change all parameters. Hopefully this is mostly documented or clear but please start a discussion on the mailing list if you have difficultly and we'll update this and the example file's documentation as appropriate.\n\n\nInitial Database Objects\n\uf0c1\n\n\nUsing the settings you edited in \n.env\n we'll create some database objects. [Yes, a setup wizard needs to be built!].\n\n\nFirst let's create the password for the admin user. The following will create a secure random password and hash it with bcrypt:\n\n\nUSERNAME\n=\nadmin\n\nUSEREMAIL\n=\nyour@email.address\n\nIXPM_ADMIN_PW\n=\n$(\n openssl rand -base64 \n12\n \n)\n\n\nADMIN_PW_SALT\n=\n$(\n openssl rand -base64 \n16\n \n)\n\n\nHASH_PW\n=\n$(\n php -r \necho escapeshellarg( crypt( \n${\nIXPM_ADMIN_PW\n}\n, sprintf( \n\\$2a\\$%02d\\$%s\n, 10, substr( \n${\nADMIN_PW_SALT\n}\n, 0, 22 ) ) ) );\n \n)\n\n\necho \nYour password is: \n$IXPM_ADMIN_PW\n\n\n\n\n\n\nThe following is taken from the IXP Manager installation script:\n\n\nmysql\n \n-\nu\n \nroot\n \n-p${MYSQL_ROOT_PW}\n \n$\nDBNAME\n \nEND_SQL\n\n\nINSERT\n \nINTO\n \nixp\n \n(\n \nname\n,\n \nshortname\n,\n \naddress1\n,\n \ncountry\n \n)\n\n    \nVALUES\n \n(\n \n${IXPNAME}\n,\n \n${IXPSNAME}\n,\n \n${IXPCITY}\n,\n \n${IXPCOUNTRY}\n \n);\n\n\nSET\n \n@\nixpid\n \n=\n \nLAST_INSERT_ID\n();\n\n\n\nINSERT\n \nINTO\n \ninfrastructure\n \n(\n \nixp_id\n,\n \nname\n,\n \nshortname\n,\n \nisPrimary\n \n)\n\n    \nVALUES\n \n(\n \n@\nixpid\n,\n \nInfrastructure #1\n,\n \n#1\n,\n \n1\n \n);\n\n\nSET\n \n@\ninfraid\n \n=\n \nLAST_INSERT_ID\n();\n\n\n\nINSERT\n \nINTO\n \ncompany_registration_detail\n \n(\n \nregisteredName\n \n)\n \nVALUES\n \n(\n \n${IXPNAME}\n \n);\n\n\nSET\n \n@\ncrdid\n \n=\n \nLAST_INSERT_ID\n();\n\n\n\nINSERT\n \nINTO\n \ncompany_billing_detail\n \n(\n \nbillingContactName\n,\n \ninvoiceMethod\n,\n \nbillingFrequency\n \n)\n\n    \nVALUES\n \n(\n \n${NAME}\n,\n \nEMAIL\n,\n \nNOBILLING\n \n);\n\n\nSET\n \n@\ncbdid\n \n=\n \nLAST_INSERT_ID\n();\n\n\n\nINSERT\n \nINTO\n \ncust\n \n(\n \nname\n,\n \nshortname\n,\n \ntype\n,\n \nabbreviatedName\n,\n \nautsys\n,\n \nmaxprefixes\n,\n \npeeringemail\n,\n \nnocphone\n,\n \nnoc24hphone\n,\n\n        \nnocemail\n,\n \nnochours\n,\n \nnocwww\n,\n \npeeringpolicy\n,\n \ncorpwww\n,\n \ndatejoin\n,\n \nstatus\n,\n \nactivepeeringmatrix\n,\n \nisReseller\n,\n\n        \ncompany_registered_detail_id\n,\n \ncompany_billing_details_id\n \n)\n\n    \nVALUES\n \n(\n \n${IXPNAME}\n,\n \n${IXPSNAME}\n,\n \n3\n,\n \n${IXPSNAME}\n,\n \n${IXPASN}\n,\n \n100\n,\n \n${IXPPEEREMAIL}\n,\n \n${IXPNOCPHONE}\n,\n\n        \n${IXPNOCPHONE}\n,\n \n${IXPNOCEMAIL}\n,\n \n24x7\n,\n \n,\n \nmandatory\n,\n \n${IXPWWW}\n,\n \nNOW\n(),\n \n1\n,\n \n1\n,\n \n0\n,\n \n@\ncrdid\n,\n \n@\ncbdid\n \n);\n\n\nSET\n \n@\ncustid\n \n=\n \nLAST_INSERT_ID\n();\n\n\n\nINSERT\n \nINTO\n \ncustomer_to_ixp\n \n(\n \ncustomer_id\n,\n \nixp_id\n \n)\n \nVALUES\n \n(\n \n@\ncustid\n,\n \n@\nixpid\n \n);\n\n\n\nINSERT\n \nINTO\n \nuser\n \n(\n \ncustid\n,\n \nusername\n,\n \npassword\n,\n \nemail\n,\n \nprivs\n,\n \ndisabled\n,\n \ncreated\n \n)\n\n    \nVALUES\n \n(\n \n@\ncustid\n,\n \n${USERNAME}\n,\n \n${\nHASH_PW\n}\n,\n \n${USEREMAIL}\n,\n \n3\n,\n \n0\n,\n \nNOW\n()\n \n);\n\n\nSET\n \n@\nuserid\n \n=\n \nLAST_INSERT_ID\n();\n\n\n\nINSERT\n \nINTO\n \ncontact\n \n(\n \ncustid\n,\n \nname\n,\n \nemail\n,\n \ncreated\n,\n \nuser_id\n \n)\n \nVALUES\n \n(\n \n@\ncustid\n,\n \n${NAME}\n,\n \n${USEREMAIL}\n,\n \nNOW\n(),\n \n@\nuserid\n \n);\n\n\nEND_SQL\n\n\n\n\n\n\nAnd finally seed the database:\n\n\ncd\n \n$IXPROOT\n\nphp artisan db:seed --class\n=\nIRRDBs\nphp artisan db:seed --class\n=\nVendors\nphp artisan db:seed --class\n=\nContactGroups\n\n\n\n\n\nFile Permissions\n\uf0c1\n\n\nThe web server needs write access to some directories:\n\n\ncd\n \n$IXPROOT\n\nchown -R www-data: var/ storage/ bootstrap/cache/ database/Proxies/\nchmod -R u+rwX var/ storage/ bootstrap/cache/ database/Proxies/\n\n\n\n\n\nSetting Up Apache\n\uf0c1\n\n\nHere is a sample virtual hosts file for IXP Manager (replace \n{$IXPROOT}\n as appropriate!):\n\n\nVirtualHost\n \n*:80\n\n    \nServerAdmin\n webmaster@localhost\n    \nDocumentRoot\n ${IXPROOT}/public\n    \nDirectory\n \n${IXPROOT}/public\n\n        \nOptions\n FollowSymLinks\n        \nAllowOverride\n \nNone\n\n        \nRequire\n \nall\n granted\n        \nRewriteEngine\n \nOn\n\n        \nRewriteCond\n %{REQUEST_FILENAME} -s [OR]\n        \nRewriteCond\n %{REQUEST_FILENAME} -l [OR]\n        \nRewriteCond\n %{REQUEST_FILENAME} -d\n        \nRewriteRule\n ^.*$ - [NC,L]\n        \nRewriteRule\n ^.*$ \n/index.php\n [NC,L]\n    \n/Directory\n\n    \nErrorLog\n \\${APACHE_LOG_DIR}/error.log\n    \nCustomLog\n \\${APACHE_LOG_DIR}/access.log combined\n\n/VirtualHost\n\n\n\n\n\n\nYou also need to enable rewrite:\n\n\na2enmod rewrite\nservice apache2 restart\n\n\n\n\n\nCongratulations!\n\uf0c1\n\n\nYour new IXP Manager installation should be accessible via your server's IP address using the username (\n$USERNAME\n) and password (\n$IXPM_ADMIN_PW\n) you set above.\n\n\nIf you plan to use this in production, you should:\n\n\n\n\nsecure your server with an iptables firewall\n\n\ninstall an SSL certificate and redirect HTTP access to HTTPS\n\n\ncomplete the installation of the many features of IXP Manager such as route server generation, member stats, peer to peer graphs, etc.\n\n\nPLEASE TELL US! We'd like to add you to the users list at http://www.ixpmanager.org/users.php - just drop us an email to \noperations \nat\n inex \ndot\n ie\n.", 
            "title": "Manual Installation"
        }, 
        {
            "location": "/install/manually/#requirements", 
            "text": "IXP Manager tries to stay current in terms of technology. Typically, this means some element of framework refresh(es) every couple of years and other more incremental package upgrades with minor version upgrades. As well as the obvious reasons for this, there is also the requirement to prevent developer apathy - insisting on legacy frameworks and packages that have been EOL'd provides a major stumbling block for bringing on new developers and contributors.  The current requirements for the web application are:   a Linux / BSD host.  MySQL version 5.7 or later.  Apache / Nginx / etc.  PHP  = 7.0.  Note that IXP Manager will not run on older versions of PHP.  Memcached - optional but highly recommended.   To complete the installation using the included config/scripts, you will also need to have installed git ( apt-get install git ) and a number of PHP extensions (see the example  apt-get install  below).  Regrettably the potential combinations of operating systems, versions of\nsame and then versions of PHP are too numerous to provide individual\nsupport. As such, we recommend installing IXP Manager on Ubuntu LTS 16.04 and we officially support this platform.  In fact we provide a complete installation script for this - see  the automated installation page  for details. If you have any issues with the manual installation, the automated script should be your first reference to compare what you are doing to what we recommend.  For completeness, the IXP Manager installation script for Ubuntu 16.04 LTS installs:  apt-get install -qy apache2 php7.0 php7.0-intl php-rrd php7.0-cgi php7.0-cli        \\ \n    php7.0-snmp php7.0-curl php7.0-mcrypt php-memcached libapache2-mod-php7.0       \\ \n    mysql-server mysql-client php7.0-mysql memcached snmp nodejs nodejs-legacy npm  \\ \n    php7.0-mbstring php7.0-xml php7.0-gd php7.0-bcmath php-gettext bgpq3            \\ \n    php-memcache unzip php7.0-zip git php-yaml php-ds libconfig-general-perl        \\ \n    libnetaddr-ip-perl mrtg  libconfig-general-perl libnetaddr-ip-perl rrdtool      \\ \n    librrds-perl  If you are using a different platform, you will need to replicate the above as appropriate for your chosen platform.", 
            "title": "Requirements"
        }, 
        {
            "location": "/install/manually/#get-the-ixp-manager-source", 
            "text": "The code for IXP Manager is maintained on GitHub and the canonical repository is  inex/IXP-Manager .  Log into the server where you wish to install IXP Manager. Move to the directory where you wish to store the source (our examples use  /srv/ixpmanager  which we refer to as  $IXPROOT ). Note that it  should not  be checked out into any web exposed directory (e.g. do not checkout to  /var/www ).  IXPROOT = /srv/ixpmanager cd  /srv\ngit clone https://github.com/inex/IXP-Manager.git ixpmanager cd   $IXPROOT     # /srv/ixpmanager \ngit checkout master\nchown -R www-data:  $IXPROOT", 
            "title": "Get the IXP Manager Source"
        }, 
        {
            "location": "/install/manually/#install-composer-and-bower", 
            "text": "IXP Manager uses  Composer  to manage its PHP dependencies. First, download a copy of the composer.phar. Once you have the PHAR archive, you can either keep it in your local project directory or move to  /usr/local/bin  to use it globally on your system.  The installation script for Ubuntu 16.04 LTS installs these via:  cd   $IXPROOT  EXPECTED_SIGNATURE = $( wget https://composer.github.io/installer.sig -O - -q ) \nphp -r  copy( https://getcomposer.org/installer ,  composer-setup.php );  ACTUAL_SIGNATURE = $( php -r  echo hash_file( SHA384 ,  composer-setup.php ); )  if   [   $EXPECTED_SIGNATURE   =   $ACTUAL_SIGNATURE   ] ;   then \n    sudo -u www-data bash -c  HOME= $IXPROOT    cd  $IXPROOT    php composer-setup.php --quiet \n    rm  $IXPROOT /composer-setup.php else \n     echo  -e  \\n\\nERROR: Invalid installer signature for composer installation \n    rm  $IXPROOT /composer-setup.php\n     exit  1 fi   and:  npm install -g bower", 
            "title": "Install Composer and Bower"
        }, 
        {
            "location": "/install/manually/#initial-setup-and-dependancies", 
            "text": "", 
            "title": "Initial Setup and Dependancies"
        }, 
        {
            "location": "/install/manually/#dependencies", 
            "text": "Install the required PHP libraries and frontend CSS/JS packages:  cd   $IXPROOT \nphp composer.phar install\nbower install\ncp .env.example .env\nphp artisan key:generate", 
            "title": "Dependencies"
        }, 
        {
            "location": "/install/manually/#database-setup", 
            "text": "Use whatever means you like to create a database and user for IXP Manager. For example:  CREATE   DATABASE   `ixp`   CHARACTER   SET   =   utf8mb4   COLLATE   =   utf8mb4_unicode_ci ;  GRANT   ALL   ON   `ixp` . *   TO   `ixp` @ `localhost`   IDENTIFIED   BY   pick a password! ;  FLUSH   PRIVILEGES ;   Then edit  $IXPROOT/.env  and set the database options:  DB_HOST=localhost\nDB_DATABASE=ixp\nDB_USERNAME=ixp\nDB_PASSWORD=password  Now create the database schema:  php artisan doctrine:schema:create  Some older scripts still rely on MySQL view tables. Create these with:  mysql -u ixp -p ixp    $IXPROOT /tools/sql/views.sql", 
            "title": "Database Setup"
        }, 
        {
            "location": "/install/manually/#configuration", 
            "text": "Edit  $IXPROOT/.env  and review and set/change all parameters. Hopefully this is mostly documented or clear but please start a discussion on the mailing list if you have difficultly and we'll update this and the example file's documentation as appropriate.", 
            "title": "Configuration"
        }, 
        {
            "location": "/install/manually/#initial-database-objects", 
            "text": "Using the settings you edited in  .env  we'll create some database objects. [Yes, a setup wizard needs to be built!].  First let's create the password for the admin user. The following will create a secure random password and hash it with bcrypt:  USERNAME = admin USEREMAIL = your@email.address IXPM_ADMIN_PW = $(  openssl rand -base64  12   )  ADMIN_PW_SALT = $(  openssl rand -base64  16   )  HASH_PW = $(  php -r  echo escapeshellarg( crypt(  ${ IXPM_ADMIN_PW } , sprintf(  \\$2a\\$%02d\\$%s , 10, substr(  ${ ADMIN_PW_SALT } , 0, 22 ) ) ) );   )  echo  Your password is:  $IXPM_ADMIN_PW   The following is taken from the IXP Manager installation script:  mysql   - u   root   -p${MYSQL_ROOT_PW}   $ DBNAME   END_SQL  INSERT   INTO   ixp   (   name ,   shortname ,   address1 ,   country   ) \n     VALUES   (   ${IXPNAME} ,   ${IXPSNAME} ,   ${IXPCITY} ,   ${IXPCOUNTRY}   );  SET   @ ixpid   =   LAST_INSERT_ID ();  INSERT   INTO   infrastructure   (   ixp_id ,   name ,   shortname ,   isPrimary   ) \n     VALUES   (   @ ixpid ,   Infrastructure #1 ,   #1 ,   1   );  SET   @ infraid   =   LAST_INSERT_ID ();  INSERT   INTO   company_registration_detail   (   registeredName   )   VALUES   (   ${IXPNAME}   );  SET   @ crdid   =   LAST_INSERT_ID ();  INSERT   INTO   company_billing_detail   (   billingContactName ,   invoiceMethod ,   billingFrequency   ) \n     VALUES   (   ${NAME} ,   EMAIL ,   NOBILLING   );  SET   @ cbdid   =   LAST_INSERT_ID ();  INSERT   INTO   cust   (   name ,   shortname ,   type ,   abbreviatedName ,   autsys ,   maxprefixes ,   peeringemail ,   nocphone ,   noc24hphone , \n         nocemail ,   nochours ,   nocwww ,   peeringpolicy ,   corpwww ,   datejoin ,   status ,   activepeeringmatrix ,   isReseller , \n         company_registered_detail_id ,   company_billing_details_id   ) \n     VALUES   (   ${IXPNAME} ,   ${IXPSNAME} ,   3 ,   ${IXPSNAME} ,   ${IXPASN} ,   100 ,   ${IXPPEEREMAIL} ,   ${IXPNOCPHONE} , \n         ${IXPNOCPHONE} ,   ${IXPNOCEMAIL} ,   24x7 ,   ,   mandatory ,   ${IXPWWW} ,   NOW (),   1 ,   1 ,   0 ,   @ crdid ,   @ cbdid   );  SET   @ custid   =   LAST_INSERT_ID ();  INSERT   INTO   customer_to_ixp   (   customer_id ,   ixp_id   )   VALUES   (   @ custid ,   @ ixpid   );  INSERT   INTO   user   (   custid ,   username ,   password ,   email ,   privs ,   disabled ,   created   ) \n     VALUES   (   @ custid ,   ${USERNAME} ,   ${ HASH_PW } ,   ${USEREMAIL} ,   3 ,   0 ,   NOW ()   );  SET   @ userid   =   LAST_INSERT_ID ();  INSERT   INTO   contact   (   custid ,   name ,   email ,   created ,   user_id   )   VALUES   (   @ custid ,   ${NAME} ,   ${USEREMAIL} ,   NOW (),   @ userid   );  END_SQL   And finally seed the database:  cd   $IXPROOT \nphp artisan db:seed --class = IRRDBs\nphp artisan db:seed --class = Vendors\nphp artisan db:seed --class = ContactGroups", 
            "title": "Initial Database Objects"
        }, 
        {
            "location": "/install/manually/#file-permissions", 
            "text": "The web server needs write access to some directories:  cd   $IXPROOT \nchown -R www-data: var/ storage/ bootstrap/cache/ database/Proxies/\nchmod -R u+rwX var/ storage/ bootstrap/cache/ database/Proxies/", 
            "title": "File Permissions"
        }, 
        {
            "location": "/install/manually/#setting-up-apache", 
            "text": "Here is a sample virtual hosts file for IXP Manager (replace  {$IXPROOT}  as appropriate!):  VirtualHost   *:80 \n     ServerAdmin  webmaster@localhost\n     DocumentRoot  ${IXPROOT}/public\n     Directory   ${IXPROOT}/public \n         Options  FollowSymLinks\n         AllowOverride   None \n         Require   all  granted\n         RewriteEngine   On \n         RewriteCond  %{REQUEST_FILENAME} -s [OR]\n         RewriteCond  %{REQUEST_FILENAME} -l [OR]\n         RewriteCond  %{REQUEST_FILENAME} -d\n         RewriteRule  ^.*$ - [NC,L]\n         RewriteRule  ^.*$  /index.php  [NC,L]\n     /Directory \n     ErrorLog  \\${APACHE_LOG_DIR}/error.log\n     CustomLog  \\${APACHE_LOG_DIR}/access.log combined /VirtualHost   You also need to enable rewrite:  a2enmod rewrite\nservice apache2 restart", 
            "title": "Setting Up Apache"
        }, 
        {
            "location": "/install/manually/#congratulations", 
            "text": "Your new IXP Manager installation should be accessible via your server's IP address using the username ( $USERNAME ) and password ( $IXPM_ADMIN_PW ) you set above.  If you plan to use this in production, you should:   secure your server with an iptables firewall  install an SSL certificate and redirect HTTP access to HTTPS  complete the installation of the many features of IXP Manager such as route server generation, member stats, peer to peer graphs, etc.  PLEASE TELL US! We'd like to add you to the users list at http://www.ixpmanager.org/users.php - just drop us an email to  operations  at  inex  dot  ie .", 
            "title": "Congratulations!"
        }, 
        {
            "location": "/install/upgrading/", 
            "text": "Upgrading IXP Manager\n\uf0c1\n\n\n\n\nThese upgrade instructions relate to upgrading when you are already using IXP Manager v4.x.\n\n\n\n\nWe track \nreleases on GitHub\n.\n\n\nYou will find standard instructions for upgrading IXP Manager below. Note that the release notes for each version may contain specific upgrade instructions including schema changes.\n\n\nIf you have missed some versions, the most sensible approach is to upgrade to each minor release in sequence (4.5.0 -\n 4.6.0 -\n 4.7.0 -\n ...) and then to the latest patch version in the latest minor version.\n\n\nIn the below, we assume the following installation directory - alter this to suit your own situation:\n\n\nIXPROOT=/srv/ixpmanager\n\n\n\n\n\nThe general process is:\n\n\n\n\n\n\nSet up some variables and ensure directory permissions are okay:\n\n\n# set this to your IXP Manager installation directory\n\n\nIXPROOT\n=\n/srv/ixpmanager\n\n\n# fix as appropriate to your operating system\n\n\nMY_WWW_USER\n=\nwww-data  \n\n\n# ensure the web server daemon user can write to necessary directories:\n\nchown -R \n$MY_WWW_USER\n: \n$IXPROOT\n/public/bower_components \n${\nIXPROOT\n}\n/bower.json \n\\\n\n    \n${\nIXPROOT\n}\n/storage \n$IXPROOT\n/vendor\nchmod -R u+rwX \n$IXPROOT\n/public/bower_components \n${\nIXPROOT\n}\n/bower.json         \n\\\n\n    \n${\nIXPROOT\n}\n/storage \n$IXPROOT\n/vendor\n\n\n\n\n\n\n\n\n\nEnable maintenance mode:\n\n\ncd\n \n$IXPROOT\n\n./artisan down\n\n\n\n\n\n\n\n\n\nUsing Git, checkout the next minor / latest patch version up from yours. For IXP Manager v4.\n\n\n# (assuming we\nre still in $IXPROOT)\n\n\n# pull the latest code\n\ngit fetch\n\n# check out the version you are upgrading to\n\ngit checkout v4.x.y\n\n\n\n\n\n\n\n\n\nInstall latest required libraries from composer \n(see notes below)\n:\n\n\n# this assumes composer.phar is in the IXP Manager install directory. YMMV - see notes below.\n\nsudo -u \n$MY_WWW_USER\n bash -c \nHOME=\n${\nIXPROOT\n}\n/storage \n cd \n${\nIXPROOT\n}\n \n php ./composer.phar install\n\n\n\n\n\n\n\n\n\n\nInstall latest frontend dependencies \n(see notes below)\n:\n\n\n# if asked to chose a jquery version, chose the latest / highest version offered\n\nsudo -u \n$MY_WWW_USER\n bash -c \nHOME=\n${\nIXPROOT\n}\n/storage \n cd \n${\nIXPROOT\n}\n \n \\\n\n\n    bower --config.interactive=false -f prune\n\nsudo -u \n$MY_WWW_USER\n bash -c \nHOME=\n${\nIXPROOT\n}\n/storage \n cd \n${\nIXPROOT\n}\n \n \\\n\n\n    bower --config.interactive=false -f update\n\n\n\n\n\n\n\n\n\n\nRestart Memcached and clear the cache. Do not forget / skip this step!\n\n\n# (assuming we\nre still in $IXPROOT)\n\nsystemctl restart memcached.service\n./artisan cache:clear\n\n\n\n\n\n\n\n\n\nUpdate the database schema:\n\n\n# (assuming we\nre still in $IXPROOT)\n\n\n# review / sanity check first:\n\n./artisan doctrine:schema:update --sql\n\n# If in doubt, take a mysqldump of your database first.\n\n\n# migrate:\n\n./artisan doctrine:schema:update --force\n\n\n\n\n\n\n\n\n\nRestart Memcached (yes, again). Do not forget / skip this step!\n\n\nsystemctl restart memcached.service\n\n\n\n\n\n\n\n\n\nEnsure there are no version specific changes required in the release notes.\n\n\n\n\n\n\nEnsure file permissions are correct.\n\n\nchown -R \n$MY_WWW_USER\n: \n$IXPROOT\n/public/bower_components \n${\nIXPROOT\n}\n/bower.json \n\\\n\n    \n${\nIXPROOT\n}\n/storage \n$IXPROOT\n/vendor \n$IXPROOT\n/var \n$IXPROOT\n/bootstrap/cache\nchmod -R u+rwX \n$IXPROOT\n/public/bower_components \n${\nIXPROOT\n}\n/bower.json         \n\\\n\n    \n${\nIXPROOT\n}\n/storage \n$IXPROOT\n/vendor \n$IXPROOT\n/var \n$IXPROOT\n/bootstrap/cache\n\n\n\n\n\n\n\n\n\nDisable maintenance mode:\n\n\n# (assuming we\nre still in $IXPROOT)\n\n./artisan up\n\n\n\n12. Recreate SQL views\n\n\n\n\n\n\nSome older scripts, including the sflow modules, rely on MySQL view tables that may be affected by SQL updates. You can safely run this to recreate them:\n\n\n```sh\nmysql -u ixp -p ixp \n $IXPROOT/tools/sql/views.sql\n```\n\n\n\nUpdating Bower Dependancies\n\uf0c1\n\n\nIt is not advisable to run bower as root but how you run it will depend on your own installation. The following options would work on Ubuntu (run these as root and the bower commands themselves will be run as \n$MY_WWW_USER\n):\n\n\n# set this to your IXP Manager installation directory\n\n\nIXPROOT\n=\n/srv/ixpmanager\n\n\nMY_WWW_USER\n=\nwww-data  \n# fix as appropriate to your operating system\n\n\n\n# ensure www-data can write to bower:\n\nchown -R \n$MY_WWW_USER\n: \n$IXPROOT\n/public/bower_components \n${\nIXPROOT\n}\n/bower.json \n${\nIXPROOT\n}\n/storage\nchmod -R u+rwX \n$IXPROOT\n/public/bower_components \n${\nIXPROOT\n}\n/bower.json \n${\nIXPROOT\n}\n/storage\n\n\n# update bower\n\nsudo -u \n$MY_WWW_USER\n bash -c \nHOME=\n${\nIXPROOT\n}\n/storage \n cd \n${\nIXPROOT\n}\n \n bower --config.interactive=false -f update\n\n\n\n\n\n\nThe above command is structured as it is because typically the \nwww-data\n user has a \nnologin\n shell specified.\n\n\nUpdating Composer Dependancies\n\uf0c1\n\n\nThis is similar to the bower section above so please read that if you have not already.\n\n\nNote that we assume here what you have installed Composer (see: https://getcomposer.org/ ) in the \n${IXPROOT}\n directory as \ncomposer.phar\n. This is where and how the IXP Manager installation scripts and documentation instructions install it.\n\n\nThe following options would work on Ubuntu (run these as root and the composer commands themselves will be run as \n$MY_WWW_USER\n):\n\n\n# set this to your IXP Manager installation directory\n\n\nIXPROOT\n=\n/srv/ixpmanager\n\n\nMY_WWW_USER\n=\nwww-data  \n# fix as appropriate to your operating system\n\n\n\n# ensure www-data can write to vendor:\n\nchown -R \n$MY_WWW_USER\n: \n$IXPROOT\n/vendor \n${\nIXPROOT\n}\n/storage\nchmod -R u+rwX \n$IXPROOT\n/vendor \n${\nIXPROOT\n}\n/storage\n\n\n# update composer\n\nsudo -u \n$MY_WWW_USER\n bash -c \nHOME=\n${\nIXPROOT\n}\n/storage \n cd \n${\nIXPROOT\n}\n \n php ./composer.phar install\n\n\n\n\n\n\nNB: If composer is not managed by your package management system, you should keep it up to date via the following (using the same definitions from the composer update example above):\n\n\nchown -R \n$MY_WWW_USER\n: \n${\nIXPROOT\n}\n/composer.phar\nchmod -R u+rwx \n${\nIXPROOT\n}\n/composer.phar\nsudo -u \n$MY_WWW_USER\n bash -c \nHOME=\n${\nIXPROOT\n}\n/storage \n cd \n${\nIXPROOT\n}\n \n php ./composer.phar selfupdate\n\n\n\n\n\n\nCorrecting Database Issues / Verifying Your Schema\n\uf0c1\n\n\nBecause of the manual process of database updates, it is possible your database schema may fall out of sync.\n\n\nIf you are having issues, first and foremost, restart Memcached. Doctrine2 caches entities and schema information in Memcached so, after an upgrade, you must restart Memcached.\n\n\nYou can verify and update your schema using the \nartisan\n script. The first action should be validation - here is a working example with no database issues:\n\n\ncd $IXPROOT\n./artisan doctrine:schema:validate\n\nValidating for default entity manager...\n[Mapping]  OK - The mapping files are correct.\n[Database] OK - The database schema is in sync with the mapping files.\n\n\n\n\n\nIf there are issues, you can use the following to show what SQL commands are required to bring your schema into line:\n\n\n./artisan doctrine:schema:update --sql\n\n\n\n\n\nAnd you can let Doctrine make the changes for you via:\n\n\n./artisan doctrine:schema:update --force\n\n\n\n\n\nDoctrine2 maintains the entities, proxies and repository classes. Ideally you should never need to do the following on a production installation - as we maintain these files with Git - but if you're developing / testing IXP Manager, you may need to.\n\n\nThe process for updating these files with schema changes / updates is:\n\n\ncd $IXPROOT\nsystemctl restart memcached.service           # (or as appropriate for your system)\n./artisan doctrine:generate:entities database\n./artisan doctrine:generate:proxies", 
            "title": "Upgrading"
        }, 
        {
            "location": "/install/upgrading/#upgrading-ixp-manager", 
            "text": "These upgrade instructions relate to upgrading when you are already using IXP Manager v4.x.   We track  releases on GitHub .  You will find standard instructions for upgrading IXP Manager below. Note that the release notes for each version may contain specific upgrade instructions including schema changes.  If you have missed some versions, the most sensible approach is to upgrade to each minor release in sequence (4.5.0 -  4.6.0 -  4.7.0 -  ...) and then to the latest patch version in the latest minor version.  In the below, we assume the following installation directory - alter this to suit your own situation:  IXPROOT=/srv/ixpmanager  The general process is:    Set up some variables and ensure directory permissions are okay:  # set this to your IXP Manager installation directory  IXPROOT = /srv/ixpmanager # fix as appropriate to your operating system  MY_WWW_USER = www-data   # ensure the web server daemon user can write to necessary directories: \nchown -R  $MY_WWW_USER :  $IXPROOT /public/bower_components  ${ IXPROOT } /bower.json  \\ \n     ${ IXPROOT } /storage  $IXPROOT /vendor\nchmod -R u+rwX  $IXPROOT /public/bower_components  ${ IXPROOT } /bower.json          \\ \n     ${ IXPROOT } /storage  $IXPROOT /vendor    Enable maintenance mode:  cd   $IXPROOT \n./artisan down    Using Git, checkout the next minor / latest patch version up from yours. For IXP Manager v4.  # (assuming we re still in $IXPROOT)  # pull the latest code \ngit fetch # check out the version you are upgrading to \ngit checkout v4.x.y    Install latest required libraries from composer  (see notes below) :  # this assumes composer.phar is in the IXP Manager install directory. YMMV - see notes below. \nsudo -u  $MY_WWW_USER  bash -c  HOME= ${ IXPROOT } /storage   cd  ${ IXPROOT }    php ./composer.phar install     Install latest frontend dependencies  (see notes below) :  # if asked to chose a jquery version, chose the latest / highest version offered \nsudo -u  $MY_WWW_USER  bash -c  HOME= ${ IXPROOT } /storage   cd  ${ IXPROOT }    \\      bower --config.interactive=false -f prune \nsudo -u  $MY_WWW_USER  bash -c  HOME= ${ IXPROOT } /storage   cd  ${ IXPROOT }    \\      bower --config.interactive=false -f update     Restart Memcached and clear the cache. Do not forget / skip this step!  # (assuming we re still in $IXPROOT) \nsystemctl restart memcached.service\n./artisan cache:clear    Update the database schema:  # (assuming we re still in $IXPROOT)  # review / sanity check first: \n./artisan doctrine:schema:update --sql # If in doubt, take a mysqldump of your database first.  # migrate: \n./artisan doctrine:schema:update --force    Restart Memcached (yes, again). Do not forget / skip this step!  systemctl restart memcached.service    Ensure there are no version specific changes required in the release notes.    Ensure file permissions are correct.  chown -R  $MY_WWW_USER :  $IXPROOT /public/bower_components  ${ IXPROOT } /bower.json  \\ \n     ${ IXPROOT } /storage  $IXPROOT /vendor  $IXPROOT /var  $IXPROOT /bootstrap/cache\nchmod -R u+rwX  $IXPROOT /public/bower_components  ${ IXPROOT } /bower.json          \\ \n     ${ IXPROOT } /storage  $IXPROOT /vendor  $IXPROOT /var  $IXPROOT /bootstrap/cache    Disable maintenance mode:  # (assuming we re still in $IXPROOT) \n./artisan up \n\n12. Recreate SQL views    Some older scripts, including the sflow modules, rely on MySQL view tables that may be affected by SQL updates. You can safely run this to recreate them:  ```sh\nmysql -u ixp -p ixp   $IXPROOT/tools/sql/views.sql\n```", 
            "title": "Upgrading IXP Manager"
        }, 
        {
            "location": "/install/upgrading/#updating-bower-dependancies", 
            "text": "It is not advisable to run bower as root but how you run it will depend on your own installation. The following options would work on Ubuntu (run these as root and the bower commands themselves will be run as  $MY_WWW_USER ):  # set this to your IXP Manager installation directory  IXPROOT = /srv/ixpmanager MY_WWW_USER = www-data   # fix as appropriate to your operating system  # ensure www-data can write to bower: \nchown -R  $MY_WWW_USER :  $IXPROOT /public/bower_components  ${ IXPROOT } /bower.json  ${ IXPROOT } /storage\nchmod -R u+rwX  $IXPROOT /public/bower_components  ${ IXPROOT } /bower.json  ${ IXPROOT } /storage # update bower \nsudo -u  $MY_WWW_USER  bash -c  HOME= ${ IXPROOT } /storage   cd  ${ IXPROOT }    bower --config.interactive=false -f update   The above command is structured as it is because typically the  www-data  user has a  nologin  shell specified.", 
            "title": "Updating Bower Dependancies"
        }, 
        {
            "location": "/install/upgrading/#updating-composer-dependancies", 
            "text": "This is similar to the bower section above so please read that if you have not already.  Note that we assume here what you have installed Composer (see: https://getcomposer.org/ ) in the  ${IXPROOT}  directory as  composer.phar . This is where and how the IXP Manager installation scripts and documentation instructions install it.  The following options would work on Ubuntu (run these as root and the composer commands themselves will be run as  $MY_WWW_USER ):  # set this to your IXP Manager installation directory  IXPROOT = /srv/ixpmanager MY_WWW_USER = www-data   # fix as appropriate to your operating system  # ensure www-data can write to vendor: \nchown -R  $MY_WWW_USER :  $IXPROOT /vendor  ${ IXPROOT } /storage\nchmod -R u+rwX  $IXPROOT /vendor  ${ IXPROOT } /storage # update composer \nsudo -u  $MY_WWW_USER  bash -c  HOME= ${ IXPROOT } /storage   cd  ${ IXPROOT }    php ./composer.phar install   NB: If composer is not managed by your package management system, you should keep it up to date via the following (using the same definitions from the composer update example above):  chown -R  $MY_WWW_USER :  ${ IXPROOT } /composer.phar\nchmod -R u+rwx  ${ IXPROOT } /composer.phar\nsudo -u  $MY_WWW_USER  bash -c  HOME= ${ IXPROOT } /storage   cd  ${ IXPROOT }    php ./composer.phar selfupdate", 
            "title": "Updating Composer Dependancies"
        }, 
        {
            "location": "/install/upgrading/#correcting-database-issues-verifying-your-schema", 
            "text": "Because of the manual process of database updates, it is possible your database schema may fall out of sync.  If you are having issues, first and foremost, restart Memcached. Doctrine2 caches entities and schema information in Memcached so, after an upgrade, you must restart Memcached.  You can verify and update your schema using the  artisan  script. The first action should be validation - here is a working example with no database issues:  cd $IXPROOT\n./artisan doctrine:schema:validate\n\nValidating for default entity manager...\n[Mapping]  OK - The mapping files are correct.\n[Database] OK - The database schema is in sync with the mapping files.  If there are issues, you can use the following to show what SQL commands are required to bring your schema into line:  ./artisan doctrine:schema:update --sql  And you can let Doctrine make the changes for you via:  ./artisan doctrine:schema:update --force  Doctrine2 maintains the entities, proxies and repository classes. Ideally you should never need to do the following on a production installation - as we maintain these files with Git - but if you're developing / testing IXP Manager, you may need to.  The process for updating these files with schema changes / updates is:  cd $IXPROOT\nsystemctl restart memcached.service           # (or as appropriate for your system)\n./artisan doctrine:generate:entities database\n./artisan doctrine:generate:proxies", 
            "title": "Correcting Database Issues / Verifying Your Schema"
        }, 
        {
            "location": "/install/upgrade-v3/", 
            "text": "Upgrade From v3\n\uf0c1\n\n\nDue to the significant changes between IXP Manager v3 and v4, there is no in place upgrade process. The advised way to handle this is to install v4 in parallel and then switch over (by adjusting your DNS or Apache configuration for example) to the new v4 directory/server.\n\n\nThis documentation was compiled while performing an upgrade on three separate IXP Manager installations.\n\n\nBefore you proceed, please check the requirements listed in \nthe official installation instructions\n.\n\n\nIf you need help, please \ncontact us via the public mailing list\n.\n\n\nIf you find that this guide is insufficient, please \ncontribute back to this documentation\n.\n\n\nOverview\n\uf0c1\n\n\nThe upgrade process is quite involved and, depending how many IXP Manager features you use, may take the best part of a day.\n\n\nThe general steps are:\n\n\n\n\nDuplicate the Database (see below)\n\n\nInstall IXP Manager v4 (see below)\n\n\nInitial configuration tasks (see below), including:\n\n\nConfiguration\n\n\nUpdate the database schema\n\n\nIf appropriate, migrate plaintext passwords to bcrypt\n\n\nMRTG Graphing Migration (including peer to peer changes) (see below)\n\n\nRoute collector / servers / AS112 configuration has changed - \nsee here\n\n\nDNS / ARPA export has changed - \nsee here\n\n\nExamine the new layer2 addresses feature and consideration migration - \nsee here\n\n\nIf you are using Bird, set up looking glasses - \nsee here\n\n\nSet up you cross connect / patch panel management - \nsee here\n\n\nRead up on \nthe new skinning features\n and see if you need to update / duplicate any skinned files.\n\n\n\n\nYou will note from the above that a number of features have been deprecated in favor of doing it in new ways. Our advice is to keep both v3 and v4 live in parallel and then migrate services piece meal. That way your route server configuration can continue pulling from v3 until you have set-up the v4 method. Just ensure that people do not make customer changes in either IXP Manager during this period (or, if they do, do it in both!).\n\n\nDeprecations / Removed Features\n\uf0c1\n\n\nAs of IXP Manager v4 (certainly \n=v4.5), the following are no longer available:\n\n\n\n\nv3 methods for generating route collector. configuration\n - \nsee here for the v4 method\n.\n\n\nv3 methods for generating route server configuration\n - \nsee here for the v4 method\n.\n\n\nv3 methods for generating AS112 BGP configuration\n - \nsee here for the v4 method\n.\n\n\nv3 method for IRRDB updates\n - \nsee here for the v4 method\n.\n\n\nTACACS+ and RADIUS templates - see old details \nhere for TACACS+\n and \nhere for RADIUS\n.\n\n\nv3 method for DNS/ARPA generation\n - \nsee here for the v4 method\n.\n\n\nSupport for plaintext passwords - see below.\n\n\n\n\nDuplicating the Database\n\uf0c1\n\n\nAs we're installing in parallel, we want to duplicate the database.\n\n\nWhen granting permissions on the new database, use your existing IXP Manager database credentials for ease of configuration.\n\n\nmysql -u root -pXXX -e \nCREATE DATABASE ixp4 CHARACTER SET = \nutf8mb4\n COLLATE = \nutf8mb4_unicode_ci\n;\n\n\nmysqldump -u root -pXXX ixp \n|\n mysql -u root -pXXX ixp4\n\nmysql -u root -pXXX -e \nGRANT ALL ON ixp4.* TO `ixp`@`localhost` IDENTIFIED BY \nYYY\n;\n\n\n\n# and test:\n\nmysql -u ixp -pYYY -h localhost ixp4\n\n\n\n\n\nInstall IXP Manager\n\uf0c1\n\n\nThis is very much a tl;dr version of \nthe official installation instructions\n which you should review if you need additional help.\n\n\nCritically, these upgrade instructions were designed and tested against IXP Manager v4.5.0. You need to upgrade to this version first and then \nfollow the v4 upgrade instructions from there\n.\n\n\nThe code for IXP Manager is maintained on GitHub and the canonical repository is \ninex/IXP-Manager\n.\n\n\nLog into the server where you wish to install IXP Manager and move to the directory where you wish to install (we use \n/srv/ixpmanager\n here as an example and which will be referred to as \n$IXPROOT\n below).\n\n\nNote that it should not be checked out into any web exposed directory (e.g. do not checkout to \n/var/www\n).\n\n\nIXPROOT\n=\n/srv/ixpmanager\n\n\n# get the source / application\n\ngit clone https://github.com/inex/IXP-Manager.git \n$IXPROOT\n\n\ncd\n \n$IXPROOT\n\ngit checkout v4.5.0\n\n\n# Using https://getcomposer.org/\n\ncomposer.phar install\n\n\n# Using https://bower.io/\n\nbower install\n\n\n# Start with the example configuration and edit.\n\n\n# Read the official documentation for help.\n\n\n# Ensure you configure the database.\n\n\n# More notes on this follow below.\n\ncp .env.example .env\nphp artisan key:generate\njoe .env\n\n\n# File system permissions\n\nchown -R www-data: var/ storage/ bootstrap/cache database/Proxies\n\n\n\n\n\nInitial Configuration Tasks\n\uf0c1\n\n\nNew Local Settings / Configuration (Laravel)\n\uf0c1\n\n\nIXP Manager v4 uses a new PHP framework (Zend Framework swapped for Laravel). As such, all the older configuration options (from \napplication/configs/application.ini\n) need to be ported to \n.env\n.\n\n\nThe \nphp dotenv\n file (\n.env\n) is where all the new configuration options go. These in turn are used by the configuration files under \nconfig/\n.\n\n\nNB: Where possible, place local changes into \n.env\n rather than changing the config files as these files are under version control. See \nLaravel's documentation on this\n and email the mailing list for help.\n\n\nOnce you have worked your way through \n.env\n, move into the \n$IXPROOT/config\n directory and - as appropriate for your own installation - examine each config file that ends in \n.dist\n. If you use / need any features in these files, copy then such as:\n\n\ncd\n \n$IXPROOT\n/config\ncp xxxx.php.dist xxxx.php\n\n\n\n\n\nThen edit the resultant \n.php\n file (or, better, where \nconfig()\n options exist, add them to \n.env\n).\n\n\nThese \n.dist\n files represent v3 funtionality that has not yet been fully ported to v4/Laravel.\n\n\nUpdate the Database Schema\n\uf0c1\n\n\nThere's about 50 schema changed between the end of v3 and v4.4.\n\n\nView the required changes with:\n\n\n./artisan doctrine:schema:update --sql\n\n\n\n\n\nAnd apply with:\n\n\n./artisan doctrine:schema:update --force\n\n\n\n Note that this may take a few minutes if you have a lot of data such as BGP session data.\n\n\nMigrate Plaintext Passwords to Bcrypt\n\uf0c1\n\n\nSince v4.5, we \nno longer allow plaintext passwords\n. If you were using plaintext passwords, you need to convert them to bcrypt as follows:\n\n\ncd\n \n$IXPROOT\n\n\n\n# dummy run to see what happens:\n\nphp artisan utils:convert-plaintext-password\n\n\n# really convert passwords and save to database:\n\nphp artisan utils:convert-plaintext-password --force\n\n\n\n\n\nStage One Complete\n\uf0c1\n\n\nYou should be able to point Apache / your web server at the new IXP Manager installation and log in.\n\n\nMRTG Graphing Migration\n\uf0c1\n\n\nWe've implemented a new graphing backend called \nGrapher\n. One of the changes is that the graphing directory structure and file-naming conventions have changed. Primarily, we've replaced non-static handles (such as database fields like \ncustomer.shortname\n, \nphysicalinterface.monitorindex\n and \nswitcher.name\n with immutable primary keys).\n\n\nAs such, you need to both rename the statistics directory structure and regenerate the configuration.\n\n\nIt is strongly recommended you copy your existing files and do this in parallel or, at least keep a backup.\n Also, stop the MRTG daemon before starting.\n\n\nPerforming the Migration\n\uf0c1\n\n\nFirst, you'll need to update your local configuration in \n.env\n by setting something like:\n\n\nGRAPHER_BACKENDS=\nmrtg\n\nGRAPHER_BACKEND_MRTG_LOGDIR=\n/path/to/new/mrtg/data\n\nGRAPHER_BACKEND_MRTG_WORKDIR=\n/path/to/new/mrtg/data\n\nGRAPHER_CACHE_ENABLED=true\n\n\n\n\n\nSee the \nGrapher\n documentation for full details of what these mean.\n\n\nYou'll then need to migrate all your MRTG files to the new naming scheme. Run the commands below twice. Once to verify the output and a second time piped to sh (\n| sh\n) to actually execute the commands.\n\n\n# set a variable for what will become the \nold\n files for convenience\n\n\nOLDMRTG\n=\n/srv/old-mrtg\n\n\n# position ourselves in the IXP Manager root directory\n\n\ncd\n \n$IXPROOT\n\n\n\n# stop mrtg\n\nservice mrtg stop  \n# or as appropriate for your platform\n\n\n\n# Migrate IXP graphs.\n\n\n#\n\n\n# In v3 of IXP Manager, the name of this was set by a database\n\n\n# parameter in the IXP table called \naggregate graph name\n.\n\n\n# You will be able to spot it in the old MRTG files where the\n\n\n# old IXP file is named something like: \nixp_peering-XXXXX-bits.log\n.\n\n\n# The \nXXXXXX\n bit is the aggregate name you need to replace in the below:\n\nphp artisan grapher:backend:mrtg:upgrade mv -L \n$OLDMRTG\n -X --agg-name\n=\nXXXXXX\nphp artisan grapher:backend:mrtg:upgrade mv -L \n$OLDMRTG\n -X --agg-name\n=\nXXXXXX \n|\n sh\n\n\n# Migrate infrastructure graphs.\n\n\n#\n\n\n# In v3 of IXP Manager, the name of this was set by a database\n\n\n# parameter in the infrastructure table called \naggregate graph name\n.\n\n\n# You will be able to spot it in the old MRTG files where the\n\n\n# old IXP file is named something like: \nixp_peering-XXXXX-bits.log\n.\n\n\n# The \nXXXXXX\n bit is the aggregate name you need to replace in the below:\n\nphp artisan grapher:backend:mrtg:upgrade mv -L \n$OLDMRTG\n -I\nphp artisan grapher:backend:mrtg:upgrade mv -L \n$OLDMRTG\n -I \n|\n sh\n\n\n# Migrate switch graphs\n\nphp artisan grapher:backend:mrtg:upgrade mv -L \n$OLDMRTG\n -S\nphp artisan grapher:backend:mrtg:upgrade mv -L \n$OLDMRTG\n -S \n|\n sh\n\n\n# Migrate trunk graphs and configuration.\n\n\n# If you had not configured trunk graphs you can skip this. We are\n\n\n# planning to (very soon - Q2/3 2017) fully integrate this into IXP\n\n\n# Manager.\n\nphp artisan grapher:backend:mrtg:upgrade mv -L \n$OLDMRTG\n -T\nphp artisan grapher:backend:mrtg:upgrade mv -L \n$OLDMRTG\n -T \n|\n sh\nphp artisan grapher:backend:mrtg:upgrade migrate-trunk-config\n\n\n# Create member directories\n\nphp artisan grapher:backend:mrtg:upgrade mkdir -L \n$OLDMRTG\n -M\nphp artisan grapher:backend:mrtg:upgrade mkdir -L \n$OLDMRTG\n -M \n|\n sh\n\n\n# Migrate member physical interface graphs\n\nphp artisan grapher:backend:mrtg:upgrade mv -L \n$OLDMRTG\n -P\nphp artisan grapher:backend:mrtg:upgrade mv -L \n$OLDMRTG\n -P \n|\n sh\n\n\n# Migrate member LAG graphs\n\nphp artisan grapher:backend:mrtg:upgrade mv -L \n$OLDMRTG\n -Q\nphp artisan grapher:backend:mrtg:upgrade mv -L \n$OLDMRTG\n -Q \n|\n sh\n\n\n# Migrate member aggregate graphs\n\nphp artisan grapher:backend:mrtg:upgrade mv -L \n$OLDMRTG\n -C\nphp artisan grapher:backend:mrtg:upgrade mv -L \n$OLDMRTG\n -C \n|\n sh\n\n\n# Regenerate mrtg configuration\n\nphp artisan grapher:generate-configuration -B mrtg \n path/to/mrtg.conf\n\n\n# Start mrtg\n\nservice mrtg start  \n# or as appropriate for your platform\n\n\n\n\n\n\nPeer to Peer / sflow Changes\n\uf0c1\n\n\nThe previous version of IXP Manager used a script called \nsflow-graph.php\n which was installed on the sflow server to create graphs on demand. IXP Manager v4 does not use this but pulls the required RRD files directly.\n\n\nIf you have this on the same server or can expose it using NFS for example, then set the path accordingly in \n.env\n:\n\n\nGRAPHER_BACKEND_SFLOW_ROOT=\n/srv/ixpmatrix\n\n\n\n\n\n\nIf you have implemented this via a web server on the sflow server (as we typically do at INEX), then you need to expose the RRD data directory to IXP Manager using an Apache config such as:\n\n\nAlias /grapher-sflow /srv/ixpmatrix\n\n\nDirectory \n/srv/ixpmatrix\n\n    Options None\n    AllowOverride None\n    \nRequireAny\n\n            Require ip 192.0.2.0/24\n            Require ip 2001:db8::/32\n    \n/RequireAny\n\n\n/Directory\n\n\n\n\n\n\nand update \n.env\n for this with something like:\n\n\nGRAPHER_BACKEND_SFLOW_ROOT=\nhttp://www.example.com/grapher-sflow", 
            "title": "Upgrade From v3"
        }, 
        {
            "location": "/install/upgrade-v3/#upgrade-from-v3", 
            "text": "Due to the significant changes between IXP Manager v3 and v4, there is no in place upgrade process. The advised way to handle this is to install v4 in parallel and then switch over (by adjusting your DNS or Apache configuration for example) to the new v4 directory/server.  This documentation was compiled while performing an upgrade on three separate IXP Manager installations.  Before you proceed, please check the requirements listed in  the official installation instructions .  If you need help, please  contact us via the public mailing list .  If you find that this guide is insufficient, please  contribute back to this documentation .", 
            "title": "Upgrade From v3"
        }, 
        {
            "location": "/install/upgrade-v3/#overview", 
            "text": "The upgrade process is quite involved and, depending how many IXP Manager features you use, may take the best part of a day.  The general steps are:   Duplicate the Database (see below)  Install IXP Manager v4 (see below)  Initial configuration tasks (see below), including:  Configuration  Update the database schema  If appropriate, migrate plaintext passwords to bcrypt  MRTG Graphing Migration (including peer to peer changes) (see below)  Route collector / servers / AS112 configuration has changed -  see here  DNS / ARPA export has changed -  see here  Examine the new layer2 addresses feature and consideration migration -  see here  If you are using Bird, set up looking glasses -  see here  Set up you cross connect / patch panel management -  see here  Read up on  the new skinning features  and see if you need to update / duplicate any skinned files.   You will note from the above that a number of features have been deprecated in favor of doing it in new ways. Our advice is to keep both v3 and v4 live in parallel and then migrate services piece meal. That way your route server configuration can continue pulling from v3 until you have set-up the v4 method. Just ensure that people do not make customer changes in either IXP Manager during this period (or, if they do, do it in both!).", 
            "title": "Overview"
        }, 
        {
            "location": "/install/upgrade-v3/#deprecations-removed-features", 
            "text": "As of IXP Manager v4 (certainly  =v4.5), the following are no longer available:   v3 methods for generating route collector. configuration  -  see here for the v4 method .  v3 methods for generating route server configuration  -  see here for the v4 method .  v3 methods for generating AS112 BGP configuration  -  see here for the v4 method .  v3 method for IRRDB updates  -  see here for the v4 method .  TACACS+ and RADIUS templates - see old details  here for TACACS+  and  here for RADIUS .  v3 method for DNS/ARPA generation  -  see here for the v4 method .  Support for plaintext passwords - see below.", 
            "title": "Deprecations / Removed Features"
        }, 
        {
            "location": "/install/upgrade-v3/#duplicating-the-database", 
            "text": "As we're installing in parallel, we want to duplicate the database.  When granting permissions on the new database, use your existing IXP Manager database credentials for ease of configuration.  mysql -u root -pXXX -e  CREATE DATABASE ixp4 CHARACTER SET =  utf8mb4  COLLATE =  utf8mb4_unicode_ci ; \n\nmysqldump -u root -pXXX ixp  |  mysql -u root -pXXX ixp4\n\nmysql -u root -pXXX -e  GRANT ALL ON ixp4.* TO `ixp`@`localhost` IDENTIFIED BY  YYY ;  # and test: \nmysql -u ixp -pYYY -h localhost ixp4", 
            "title": "Duplicating the Database"
        }, 
        {
            "location": "/install/upgrade-v3/#install-ixp-manager", 
            "text": "This is very much a tl;dr version of  the official installation instructions  which you should review if you need additional help.  Critically, these upgrade instructions were designed and tested against IXP Manager v4.5.0. You need to upgrade to this version first and then  follow the v4 upgrade instructions from there .  The code for IXP Manager is maintained on GitHub and the canonical repository is  inex/IXP-Manager .  Log into the server where you wish to install IXP Manager and move to the directory where you wish to install (we use  /srv/ixpmanager  here as an example and which will be referred to as  $IXPROOT  below).  Note that it should not be checked out into any web exposed directory (e.g. do not checkout to  /var/www ).  IXPROOT = /srv/ixpmanager # get the source / application \ngit clone https://github.com/inex/IXP-Manager.git  $IXPROOT  cd   $IXPROOT \ngit checkout v4.5.0 # Using https://getcomposer.org/ \ncomposer.phar install # Using https://bower.io/ \nbower install # Start with the example configuration and edit.  # Read the official documentation for help.  # Ensure you configure the database.  # More notes on this follow below. \ncp .env.example .env\nphp artisan key:generate\njoe .env # File system permissions \nchown -R www-data: var/ storage/ bootstrap/cache database/Proxies", 
            "title": "Install IXP Manager"
        }, 
        {
            "location": "/install/upgrade-v3/#initial-configuration-tasks", 
            "text": "", 
            "title": "Initial Configuration Tasks"
        }, 
        {
            "location": "/install/upgrade-v3/#new-local-settings-configuration-laravel", 
            "text": "IXP Manager v4 uses a new PHP framework (Zend Framework swapped for Laravel). As such, all the older configuration options (from  application/configs/application.ini ) need to be ported to  .env .  The  php dotenv  file ( .env ) is where all the new configuration options go. These in turn are used by the configuration files under  config/ .  NB: Where possible, place local changes into  .env  rather than changing the config files as these files are under version control. See  Laravel's documentation on this  and email the mailing list for help.  Once you have worked your way through  .env , move into the  $IXPROOT/config  directory and - as appropriate for your own installation - examine each config file that ends in  .dist . If you use / need any features in these files, copy then such as:  cd   $IXPROOT /config\ncp xxxx.php.dist xxxx.php  Then edit the resultant  .php  file (or, better, where  config()  options exist, add them to  .env ).  These  .dist  files represent v3 funtionality that has not yet been fully ported to v4/Laravel.", 
            "title": "New Local Settings / Configuration (Laravel)"
        }, 
        {
            "location": "/install/upgrade-v3/#update-the-database-schema", 
            "text": "There's about 50 schema changed between the end of v3 and v4.4.  View the required changes with:  ./artisan doctrine:schema:update --sql  And apply with:  ./artisan doctrine:schema:update --force \n\n Note that this may take a few minutes if you have a lot of data such as BGP session data.", 
            "title": "Update the Database Schema"
        }, 
        {
            "location": "/install/upgrade-v3/#migrate-plaintext-passwords-to-bcrypt", 
            "text": "Since v4.5, we  no longer allow plaintext passwords . If you were using plaintext passwords, you need to convert them to bcrypt as follows:  cd   $IXPROOT  # dummy run to see what happens: \nphp artisan utils:convert-plaintext-password # really convert passwords and save to database: \nphp artisan utils:convert-plaintext-password --force", 
            "title": "Migrate Plaintext Passwords to Bcrypt"
        }, 
        {
            "location": "/install/upgrade-v3/#stage-one-complete", 
            "text": "You should be able to point Apache / your web server at the new IXP Manager installation and log in.", 
            "title": "Stage One Complete"
        }, 
        {
            "location": "/install/upgrade-v3/#mrtg-graphing-migration", 
            "text": "We've implemented a new graphing backend called  Grapher . One of the changes is that the graphing directory structure and file-naming conventions have changed. Primarily, we've replaced non-static handles (such as database fields like  customer.shortname ,  physicalinterface.monitorindex  and  switcher.name  with immutable primary keys).  As such, you need to both rename the statistics directory structure and regenerate the configuration.  It is strongly recommended you copy your existing files and do this in parallel or, at least keep a backup.  Also, stop the MRTG daemon before starting.", 
            "title": "MRTG Graphing Migration"
        }, 
        {
            "location": "/install/upgrade-v3/#performing-the-migration", 
            "text": "First, you'll need to update your local configuration in  .env  by setting something like:  GRAPHER_BACKENDS= mrtg \nGRAPHER_BACKEND_MRTG_LOGDIR= /path/to/new/mrtg/data \nGRAPHER_BACKEND_MRTG_WORKDIR= /path/to/new/mrtg/data \nGRAPHER_CACHE_ENABLED=true  See the  Grapher  documentation for full details of what these mean.  You'll then need to migrate all your MRTG files to the new naming scheme. Run the commands below twice. Once to verify the output and a second time piped to sh ( | sh ) to actually execute the commands.  # set a variable for what will become the  old  files for convenience  OLDMRTG = /srv/old-mrtg # position ourselves in the IXP Manager root directory  cd   $IXPROOT  # stop mrtg \nservice mrtg stop   # or as appropriate for your platform  # Migrate IXP graphs.  #  # In v3 of IXP Manager, the name of this was set by a database  # parameter in the IXP table called  aggregate graph name .  # You will be able to spot it in the old MRTG files where the  # old IXP file is named something like:  ixp_peering-XXXXX-bits.log .  # The  XXXXXX  bit is the aggregate name you need to replace in the below: \nphp artisan grapher:backend:mrtg:upgrade mv -L  $OLDMRTG  -X --agg-name = XXXXXX\nphp artisan grapher:backend:mrtg:upgrade mv -L  $OLDMRTG  -X --agg-name = XXXXXX  |  sh # Migrate infrastructure graphs.  #  # In v3 of IXP Manager, the name of this was set by a database  # parameter in the infrastructure table called  aggregate graph name .  # You will be able to spot it in the old MRTG files where the  # old IXP file is named something like:  ixp_peering-XXXXX-bits.log .  # The  XXXXXX  bit is the aggregate name you need to replace in the below: \nphp artisan grapher:backend:mrtg:upgrade mv -L  $OLDMRTG  -I\nphp artisan grapher:backend:mrtg:upgrade mv -L  $OLDMRTG  -I  |  sh # Migrate switch graphs \nphp artisan grapher:backend:mrtg:upgrade mv -L  $OLDMRTG  -S\nphp artisan grapher:backend:mrtg:upgrade mv -L  $OLDMRTG  -S  |  sh # Migrate trunk graphs and configuration.  # If you had not configured trunk graphs you can skip this. We are  # planning to (very soon - Q2/3 2017) fully integrate this into IXP  # Manager. \nphp artisan grapher:backend:mrtg:upgrade mv -L  $OLDMRTG  -T\nphp artisan grapher:backend:mrtg:upgrade mv -L  $OLDMRTG  -T  |  sh\nphp artisan grapher:backend:mrtg:upgrade migrate-trunk-config # Create member directories \nphp artisan grapher:backend:mrtg:upgrade mkdir -L  $OLDMRTG  -M\nphp artisan grapher:backend:mrtg:upgrade mkdir -L  $OLDMRTG  -M  |  sh # Migrate member physical interface graphs \nphp artisan grapher:backend:mrtg:upgrade mv -L  $OLDMRTG  -P\nphp artisan grapher:backend:mrtg:upgrade mv -L  $OLDMRTG  -P  |  sh # Migrate member LAG graphs \nphp artisan grapher:backend:mrtg:upgrade mv -L  $OLDMRTG  -Q\nphp artisan grapher:backend:mrtg:upgrade mv -L  $OLDMRTG  -Q  |  sh # Migrate member aggregate graphs \nphp artisan grapher:backend:mrtg:upgrade mv -L  $OLDMRTG  -C\nphp artisan grapher:backend:mrtg:upgrade mv -L  $OLDMRTG  -C  |  sh # Regenerate mrtg configuration \nphp artisan grapher:generate-configuration -B mrtg   path/to/mrtg.conf # Start mrtg \nservice mrtg start   # or as appropriate for your platform", 
            "title": "Performing the Migration"
        }, 
        {
            "location": "/install/upgrade-v3/#peer-to-peer-sflow-changes", 
            "text": "The previous version of IXP Manager used a script called  sflow-graph.php  which was installed on the sflow server to create graphs on demand. IXP Manager v4 does not use this but pulls the required RRD files directly.  If you have this on the same server or can expose it using NFS for example, then set the path accordingly in  .env :  GRAPHER_BACKEND_SFLOW_ROOT= /srv/ixpmatrix   If you have implemented this via a web server on the sflow server (as we typically do at INEX), then you need to expose the RRD data directory to IXP Manager using an Apache config such as:  Alias /grapher-sflow /srv/ixpmatrix Directory  /srv/ixpmatrix \n    Options None\n    AllowOverride None\n     RequireAny \n            Require ip 192.0.2.0/24\n            Require ip 2001:db8::/32\n     /RequireAny  /Directory   and update  .env  for this with something like:  GRAPHER_BACKEND_SFLOW_ROOT= http://www.example.com/grapher-sflow", 
            "title": "Peer to Peer / sflow Changes"
        }, 
        {
            "location": "/install/runtime/", 
            "text": "Runtime Configuration\n\uf0c1\n\n\nBehind a HTTP[S] Proxy\n\uf0c1\n\n\nIf you are running IXP Manager behind a load balancer / proxy that terminates TLS / SSL connections, you may notice your application sometimes does not generate HTTPS links. Typically this is because your application is being forwarded traffic from your load balancer on port 80 and does not know it should generate secure links.\n\n\nFrom \nv4.7.2\n, IXP Manager supports trusted proxies via \nLaravel's support\n for \nfideloper/TrustedProxy\n.\n\n\nSee the above links for complete documentation. To just get it working, you need to:\n\n\n\n\n\n\nPublish the default trusted proxies configuration file:\n    \ncd $IXPROOT\n./artisan vendor:publish --provider=\nFideloper\\Proxy\\TrustedProxyServiceProvider\n\n\n\n\n\n\n\n\n\n\nThe above will create a file \n${IXPROOT}/config/trustedproxy.php\n. For the most part, you now just need to change the IP address(es) in the array \nproxies\n to those of your own proxy/proxies.\n\n\n\n\n\n\nNB:\n as well as the above, it is also critical that your have correctly set \nAPP_URL\n in the \n.env\n file for URL generation to correctly work.\n\n\nDisabling Controllers\n\uf0c1\n\n\nControllers can be disabled by setting the following config item in \nconfig/ixp_fe.php\n:\n\n\n?php\n\n\n[\n\n    \n// ...,\n\n\n    \nfrontend\n \n=\n \n[\n\n        \ndisabled\n \n=\n \n[\n\n            \nxxx\n   \n=\n \ntrue\n,\n\n        \n],\n\n    \n],\n\n\n];\n\n\n\n\n\n\nwhere \nxxx\n is the controller name. This name is in kebab-case format including any non-\nIXP\\Http\\Controllers\n namespace. Here are some controller - xxx examples:\n\n\n\n\n\\IXP\\Http\\Controllers\\InfrastructureController =\n infrastructure\n\n\n\\IXP\\Http\\Controllers\\CustKitController =\n cust-kit\n\n\n\\IXP\\Http\\Controllers\\Interfaces\\PhysicalInterfaceController =\n interfaces-physical-interface\n\n\n\n\nThis action is controlled by the \nIXP\\Http\\Middleware\\ControllerEnabled\n middleware.\n\n\nNote that in the configuration file, we have some pre-defined dotenv settings for commonly disabled controllers. It is a bad idea to manually edit the configuration files. If you find a controller than should be disabled and there there is no dotenv option, please \nopen an issue\n.", 
            "title": "Runtime Configuration"
        }, 
        {
            "location": "/install/runtime/#runtime-configuration", 
            "text": "", 
            "title": "Runtime Configuration"
        }, 
        {
            "location": "/install/runtime/#behind-a-https-proxy", 
            "text": "If you are running IXP Manager behind a load balancer / proxy that terminates TLS / SSL connections, you may notice your application sometimes does not generate HTTPS links. Typically this is because your application is being forwarded traffic from your load balancer on port 80 and does not know it should generate secure links.  From  v4.7.2 , IXP Manager supports trusted proxies via  Laravel's support  for  fideloper/TrustedProxy .  See the above links for complete documentation. To just get it working, you need to:    Publish the default trusted proxies configuration file:\n     cd $IXPROOT\n./artisan vendor:publish --provider= Fideloper\\Proxy\\TrustedProxyServiceProvider      The above will create a file  ${IXPROOT}/config/trustedproxy.php . For the most part, you now just need to change the IP address(es) in the array  proxies  to those of your own proxy/proxies.    NB:  as well as the above, it is also critical that your have correctly set  APP_URL  in the  .env  file for URL generation to correctly work.", 
            "title": "Behind a HTTP[S] Proxy"
        }, 
        {
            "location": "/install/runtime/#disabling-controllers", 
            "text": "Controllers can be disabled by setting the following config item in  config/ixp_fe.php :  ?php  [ \n     // ..., \n\n     frontend   =   [ \n         disabled   =   [ \n             xxx     =   true , \n         ], \n     ],  ];   where  xxx  is the controller name. This name is in kebab-case format including any non- IXP\\Http\\Controllers  namespace. Here are some controller - xxx examples:   \\IXP\\Http\\Controllers\\InfrastructureController =  infrastructure  \\IXP\\Http\\Controllers\\CustKitController =  cust-kit  \\IXP\\Http\\Controllers\\Interfaces\\PhysicalInterfaceController =  interfaces-physical-interface   This action is controlled by the  IXP\\Http\\Middleware\\ControllerEnabled  middleware.  Note that in the configuration file, we have some pre-defined dotenv settings for commonly disabled controllers. It is a bad idea to manually edit the configuration files. If you find a controller than should be disabled and there there is no dotenv option, please  open an issue .", 
            "title": "Disabling Controllers"
        }, 
        {
            "location": "/usage/customers/", 
            "text": "Customer / Members\n\uf0c1\n\n\nAdding Customers\n\uf0c1\n\n\nTo add a new customer in \nIXP Manager\n, select the \nCustomers\n option from the left hand side admin menu and then click the \n[+]\n icon on the top right. You'll find yourself with a form such as (may vary over time):\n\n\n\n\nWhat follows is an explanation of each section.\n\n\nCustomer Details\n\uf0c1\n\n\nThe \nName\n field is the customer's name as you/they typically want it to appear in IXP Manager. It is not necessarily their full legal entity name (that goes elsewhere). The \nAbbreviated Name\n is a shorter version of the name that is used in space constrained areas such as graph labels.\n\n\nThe \nType\n field is a dropdown with the following meanings:\n\n\n\n\nFull\n: this is what you will use most of the time. This is a full / normal trafficking IXP member.\n\n\nPro-bono\n: like full but for organisations that you provide IXP access to \nfor the good of the internet / your members\n. Examples at INEX include the \nAS112 service\n, \nPacket Clearing House's\n route collector and DNS TLD/root services and other DNS root servers such as the RIPE K root / Verisign, etc.\n\n\nInternal\n: while not enforced, you should really only have two internal customers which is the IXP itself and, separately, the IXP route servers. Connections / interfaces such as route collectors and core links would be associated with the IXP customer. Because route servers typically have a dedicated ASN, they would have their own customer with their interfaces associated here.\n\n\nAssociate\n: INEX has a concept of \nassociate members\n which enables those organisations who are involved in the IP and networking industry, but who do not have their own IP traffic to peer, an opportunity to participate in the extensive INEX community. See \nfull details here\n. Associate customers in IXP Manager have very limited functionality but it allows us to keep track of them.\n\n\n\n\nThe \nShortname\n field is something we are slowly removing. It is currently visible in some URLs and a couple other areas. It should be a lowercase single word (\n[a-z0-9]\n) and it should not be changed after it is set.\n\n\nThe \nCorporate Website\n is used when linking the customer name in various customer lists. It must be a valid URL. Try and stick to the scheme: \nhttp://www.example.com/\n - i.e. include \nhttp[s]://\n and end with a trailing slash.\n\n\nThe \nDate Joined\n is just that and must be set. However, the \nDate Left\n has real consequences: \nsetting \nDate Left\n effectively closes the customer's account\n. This means configuration will no longer be included for graphing, router configuration, etc. We tend not to delete customers but mark them as closed by setting this field.\n\n\nStatus\n yields three options. The most important of which is \nNormal\n which is what you'll use nearly 100% of the time. Setting either of the other two options (\nSuspended\n / \nNot Connected\n) will have the same effect as closing the account as described above: removing route server / collector sessions, graphing configuration, etc.\n\n\nMD5 Support\n: this is not something that has been fully integrated into all view screens. You should probably default to \nYes\n for now as this will cover 95+% of cases. It is an informational flag only for member to member bilateral peering.\n\n\nPeering Details\n\uf0c1\n\n\nThe \nAS Number\n is just the integer value without any \nAS\n prefix, etc.\n\n\nMax Prefixes\n is known as the \nglobal max prefixes value\n. It is used to work out the appropriate max prefixes value to apply to all router configurations in the stock / default templates (route collector and servers, AS112). The calculated value is also included in emails from the \nPeering Manager\n from customer to customer.\n\n\nThere are two issues with max prefixes:\n\n\n\n\nit is also possible to set a max prefixes value on a per VLAN interface basis. This is not ideal and something we intend to fix.\n\n\nthe same value is used for IPv4 and IPv6 which is also something that needs to be fixed.\n\n\n\n\nThe max prefixes value is worked out in the code when generating router configuration is as follows:\n\n\n\n\nthe greater of the \nglobal\n value as above or the VLAN interface value.\n\n\nif neither is set, a default of 250 is used.\n\n\n\n\nAt INEX, we default to 50 for small members, and 250 for medium sized members (who may already have 50 say), and as advised by larger members.\n\n\nThe \nPeering Email\n is used in member lists and by the \nPeering Manager\n for sending emails. We try and encourage an alias of \npeering@example.com\n but this does not always work out.\n\n\nThe \nIPv4 Peering Macro\n is used instead of the AS number when set to generate inbound prefix filters for the route servers based on the member's published IRR records. \nAS-BTIRE\n in the RIPE database is an example for BT Ireland.\n\n\nThe \nIPv6 Peering Macro\n was added for another IX using IXP Manager that had a customer which used a separate macro for v4 and v6. We only know of that single instance of this. In the event that \nIPv6 Peering Macro\n is set, this will be used to generate IPv6 inbound prefix filters, otherwise the \nIPv4 Peering Macro\n will be used for both. If neither is set, the IRR policy of the AS number will be used. Use \nAS-NULL\n to disable one or the other protocol peering macro if only one is required.\n\n\nIt is not possible to have a different ASN for IPv4 and IPv6. We are not aware of any cases where this should be necessary but if it is, create two customers.\n\n\nThe \nPeering Policy\n is informational only and is displayed in member lists. Typically speaking, route server members should have an open peering policy but others are possible if you use standard route server communities for controlling the distribution of prefixes.\n\n\nThe IRRDB source sets the database where IXP Manager queries the customer's IRR data from. See \nthe IRRDB feature page\n for more information.\n\n\nThe checkbox labelled \nActive Peering Matrix\n indicates whether or not the customer's route server and bilateral peering sessions should appear in the public peering matrix.\n\n\nNOC Details\n\uf0c1\n\n\nAll of this is purely informational and is used by IX staff to contact the member about various issues. It is also available to other customers of the exchange to similarly contact their bilateral peers with any issues.\n\n\nReseller Details\n\uf0c1\n\n\nThis section will only be displayed if reseller functionality is enabled.\n\n\nSee the \nreseller instructions\n for details on this.\n\n\nWelcome Emails\n\uf0c1\n\n\nWhen a new customer is provisioned, you can send them a \nwelcome email\n from IXP Manager which is a useful way to provide all their connectivity details and other on-boarding information for your IX.\n\n\nFrom the \nCustomer Overview\n page, you will find the \nSend Welcome Email...\n option under the tools menu on the top right hand corner of the page:\n\n\n\n\nTo be useful, you need to \nskin\n the welcome email.\n\n\nFrom IXP Manager v4.8.0 onwards, its format is Markdown and it is sent as a HTML email. The file you need to skin is (with an example of how to do it):\n\n\ncd ${IXPROOT}\nmkdir -p resources/skins/example/customer/emails\ncp resources/views/customer/emails/welcome-email.blade.php resources/skins/inex/customer/emails/\n\n\n\n\n\nThe \nexample\n skin name in the above \nis just an example\n. Please read the \nskinning documentation\n.\n\n\nCustomer Logos\n\uf0c1\n\n\nCustomer users and administrators can upload and manage logos for customers. To enable this functionality, set the following in your \n${IXPROOT}/.env\n file:\n\n\nIXP_FE_FRONTEND_DISABLED_LOGO=false\n\n\n\n\n\nWhen you do this, the ability to manage logos will appear:\n\n\n\n\nunder the \nEdit\n menu (top right, pencil icon) for administrators on the \nCustomer Overview\n page;\n\n\nvia a \nYour Logo\n section on the customer user's landing page after logging in.\n\n\n\n\nLogos will then be shown in the customer overview page and a new admin left-hand-side menu option called \nMember Logos\n (which shows all logos).\n\n\nLogos are stored under \n${IXPROOT}/public/logos\n in a sharded directory structure based on the SHA1 of the image content.\n\n\nRegistration and Billing Details\n\uf0c1\n\n\nAfter you add a new customer (or from the customer overview page from the dropdown edit icon on the right of the title area, you can select \nEdit Billing/Registration Details\n), you will get the following form:\n\n\n\n\nAll of these details are informative only and only available to administrative users.\n\n\nNotification of Billing Details Changed\n\uf0c1\n\n\nIf you want notification of a customer's billing details being changed by email, set the following parameter in your \n${IXPROOT}/.env\n file:\n\n\nIXP_FE_CUSTOMER_BILLING_UPDATES_NOTIFY=\nmail@example.com\n\n\n\n\n\n\nThis can be useful to alert your accounts / billing staff of these changes automatically.\n\n\nIf you need multiple people notified, use an alias address encompassing all the users.\n\n\nPrior to v4.8, you had to edit the \nconfig/ixp_tools.php\n configuration file and set the \nbilling_updates_notify\n array element. If this file does not exist, create it from the suggested template: \ncp config/ixp_tools.php.dist config/ixp_tools.php\n.", 
            "title": "Customers / Members"
        }, 
        {
            "location": "/usage/customers/#customer-members", 
            "text": "", 
            "title": "Customer / Members"
        }, 
        {
            "location": "/usage/customers/#adding-customers", 
            "text": "To add a new customer in  IXP Manager , select the  Customers  option from the left hand side admin menu and then click the  [+]  icon on the top right. You'll find yourself with a form such as (may vary over time):   What follows is an explanation of each section.", 
            "title": "Adding Customers"
        }, 
        {
            "location": "/usage/customers/#customer-details", 
            "text": "The  Name  field is the customer's name as you/they typically want it to appear in IXP Manager. It is not necessarily their full legal entity name (that goes elsewhere). The  Abbreviated Name  is a shorter version of the name that is used in space constrained areas such as graph labels.  The  Type  field is a dropdown with the following meanings:   Full : this is what you will use most of the time. This is a full / normal trafficking IXP member.  Pro-bono : like full but for organisations that you provide IXP access to  for the good of the internet / your members . Examples at INEX include the  AS112 service ,  Packet Clearing House's  route collector and DNS TLD/root services and other DNS root servers such as the RIPE K root / Verisign, etc.  Internal : while not enforced, you should really only have two internal customers which is the IXP itself and, separately, the IXP route servers. Connections / interfaces such as route collectors and core links would be associated with the IXP customer. Because route servers typically have a dedicated ASN, they would have their own customer with their interfaces associated here.  Associate : INEX has a concept of  associate members  which enables those organisations who are involved in the IP and networking industry, but who do not have their own IP traffic to peer, an opportunity to participate in the extensive INEX community. See  full details here . Associate customers in IXP Manager have very limited functionality but it allows us to keep track of them.   The  Shortname  field is something we are slowly removing. It is currently visible in some URLs and a couple other areas. It should be a lowercase single word ( [a-z0-9] ) and it should not be changed after it is set.  The  Corporate Website  is used when linking the customer name in various customer lists. It must be a valid URL. Try and stick to the scheme:  http://www.example.com/  - i.e. include  http[s]://  and end with a trailing slash.  The  Date Joined  is just that and must be set. However, the  Date Left  has real consequences:  setting  Date Left  effectively closes the customer's account . This means configuration will no longer be included for graphing, router configuration, etc. We tend not to delete customers but mark them as closed by setting this field.  Status  yields three options. The most important of which is  Normal  which is what you'll use nearly 100% of the time. Setting either of the other two options ( Suspended  /  Not Connected ) will have the same effect as closing the account as described above: removing route server / collector sessions, graphing configuration, etc.  MD5 Support : this is not something that has been fully integrated into all view screens. You should probably default to  Yes  for now as this will cover 95+% of cases. It is an informational flag only for member to member bilateral peering.", 
            "title": "Customer Details"
        }, 
        {
            "location": "/usage/customers/#peering-details", 
            "text": "The  AS Number  is just the integer value without any  AS  prefix, etc.  Max Prefixes  is known as the  global max prefixes value . It is used to work out the appropriate max prefixes value to apply to all router configurations in the stock / default templates (route collector and servers, AS112). The calculated value is also included in emails from the  Peering Manager  from customer to customer.  There are two issues with max prefixes:   it is also possible to set a max prefixes value on a per VLAN interface basis. This is not ideal and something we intend to fix.  the same value is used for IPv4 and IPv6 which is also something that needs to be fixed.   The max prefixes value is worked out in the code when generating router configuration is as follows:   the greater of the  global  value as above or the VLAN interface value.  if neither is set, a default of 250 is used.   At INEX, we default to 50 for small members, and 250 for medium sized members (who may already have 50 say), and as advised by larger members.  The  Peering Email  is used in member lists and by the  Peering Manager  for sending emails. We try and encourage an alias of  peering@example.com  but this does not always work out.  The  IPv4 Peering Macro  is used instead of the AS number when set to generate inbound prefix filters for the route servers based on the member's published IRR records.  AS-BTIRE  in the RIPE database is an example for BT Ireland.  The  IPv6 Peering Macro  was added for another IX using IXP Manager that had a customer which used a separate macro for v4 and v6. We only know of that single instance of this. In the event that  IPv6 Peering Macro  is set, this will be used to generate IPv6 inbound prefix filters, otherwise the  IPv4 Peering Macro  will be used for both. If neither is set, the IRR policy of the AS number will be used. Use  AS-NULL  to disable one or the other protocol peering macro if only one is required.  It is not possible to have a different ASN for IPv4 and IPv6. We are not aware of any cases where this should be necessary but if it is, create two customers.  The  Peering Policy  is informational only and is displayed in member lists. Typically speaking, route server members should have an open peering policy but others are possible if you use standard route server communities for controlling the distribution of prefixes.  The IRRDB source sets the database where IXP Manager queries the customer's IRR data from. See  the IRRDB feature page  for more information.  The checkbox labelled  Active Peering Matrix  indicates whether or not the customer's route server and bilateral peering sessions should appear in the public peering matrix.", 
            "title": "Peering Details"
        }, 
        {
            "location": "/usage/customers/#noc-details", 
            "text": "All of this is purely informational and is used by IX staff to contact the member about various issues. It is also available to other customers of the exchange to similarly contact their bilateral peers with any issues.", 
            "title": "NOC Details"
        }, 
        {
            "location": "/usage/customers/#reseller-details", 
            "text": "This section will only be displayed if reseller functionality is enabled.  See the  reseller instructions  for details on this.", 
            "title": "Reseller Details"
        }, 
        {
            "location": "/usage/customers/#welcome-emails", 
            "text": "When a new customer is provisioned, you can send them a  welcome email  from IXP Manager which is a useful way to provide all their connectivity details and other on-boarding information for your IX.  From the  Customer Overview  page, you will find the  Send Welcome Email...  option under the tools menu on the top right hand corner of the page:   To be useful, you need to  skin  the welcome email.  From IXP Manager v4.8.0 onwards, its format is Markdown and it is sent as a HTML email. The file you need to skin is (with an example of how to do it):  cd ${IXPROOT}\nmkdir -p resources/skins/example/customer/emails\ncp resources/views/customer/emails/welcome-email.blade.php resources/skins/inex/customer/emails/  The  example  skin name in the above  is just an example . Please read the  skinning documentation .", 
            "title": "Welcome Emails"
        }, 
        {
            "location": "/usage/customers/#customer-logos", 
            "text": "Customer users and administrators can upload and manage logos for customers. To enable this functionality, set the following in your  ${IXPROOT}/.env  file:  IXP_FE_FRONTEND_DISABLED_LOGO=false  When you do this, the ability to manage logos will appear:   under the  Edit  menu (top right, pencil icon) for administrators on the  Customer Overview  page;  via a  Your Logo  section on the customer user's landing page after logging in.   Logos will then be shown in the customer overview page and a new admin left-hand-side menu option called  Member Logos  (which shows all logos).  Logos are stored under  ${IXPROOT}/public/logos  in a sharded directory structure based on the SHA1 of the image content.", 
            "title": "Customer Logos"
        }, 
        {
            "location": "/usage/customers/#registration-and-billing-details", 
            "text": "After you add a new customer (or from the customer overview page from the dropdown edit icon on the right of the title area, you can select  Edit Billing/Registration Details ), you will get the following form:   All of these details are informative only and only available to administrative users.", 
            "title": "Registration and Billing Details"
        }, 
        {
            "location": "/usage/customers/#notification-of-billing-details-changed", 
            "text": "If you want notification of a customer's billing details being changed by email, set the following parameter in your  ${IXPROOT}/.env  file:  IXP_FE_CUSTOMER_BILLING_UPDATES_NOTIFY= mail@example.com   This can be useful to alert your accounts / billing staff of these changes automatically.  If you need multiple people notified, use an alias address encompassing all the users.  Prior to v4.8, you had to edit the  config/ixp_tools.php  configuration file and set the  billing_updates_notify  array element. If this file does not exist, create it from the suggested template:  cp config/ixp_tools.php.dist config/ixp_tools.php .", 
            "title": "Notification of Billing Details Changed"
        }, 
        {
            "location": "/usage/interfaces/", 
            "text": "Customer Interfaces\n\uf0c1\n\n\nThis section explains how to set up a customer interface.\n\n\nDatabase Overview\n\uf0c1\n\n\nTo fully understand how IXP Manager treats customer interfaces, you need a little background on the database schema. This will also help explain why we have laid out the UI as it is.\n\n\nThe original database schema dates from pre-2005 and has stood the test of time extremely well.\n\n\n\n\nThe above is described as follows:\n\n\n\n\nCustomers have a 1:n relationship with virtual interfaces (VI). A VI is a container object that represents a customer connection and all the elements that make up that connection.\n\n\nVIs have a 1:n relationship with physical interfaces (PI).\n\n\nA physical interface in turn has a 1:1 relationship with switch ports (SP).\n\n\nPIs represent what we say the customer has (e.g. a 1Gb port). The SP has information from the switch itself and can help identify inconsistencies with what was expected to be configured/billed and what has actually been provisioned).\n\n\nPIs can also move between SPs (e.g. customer upgrades / switch replacements / etc.).\n\n\nBy schematically representing PIs and SPs as different entities, we can associate elements such as usage graphs to the PI so these remain consistent when a SP changes.\n\n\nAdding a second (or more) PI to a VI indicates that the port is a LAG.\n\n\nVIs have a 1:n relationship with VLAN interfaces (VLI). You can consider the PI element the layer2 / physical element and the VLI element the layer3 element.\n\n\nA VLI has a 1:1 mapping with a VLAN (typically the peering LAN).\n\n\nIf IPv4 is enabled, the VLI has a 1:1 mapping to an IPv4 address from the given VLAN.\n\n\nIf IPv6 is enabled, the VLI has a 1:1 mapping to an IPv6 address from the given VLAN.\n\n\nThe VLI also indicates if this interface should have a route server peering session, MD5 passwords, etc. (all explained below).\n\n\n\n\nProvisioning an Interface via the Wizard\n\uf0c1\n\n\nThe best way to provision a new interface for a customer is to use the wizard. This can be accessed from the customer's overview page via a menu on the top right:\n\n\n\n\nWhen you open the wizard, you will see:\n\n\n\n\nThis can be used to provision a single port standard customer connection. If they customer needs a LAG or other non-standard options, these can be added afterwards.\n\n\nGeneral Interface Settings\n\uf0c1\n\n\nThe customer should be prefilled and read-only as you enter the wizard from a specific customer overview page.\n\n\nYou would normally just select your main / primary peering VLAN from the \nVLAN\n dropdown. There are some notable exceptions:\n\n\n\n\nyou may have more than one peering LAN. For example, INEX runs two resilient peering networks in Dublin and a separate regional exchange called INEX Cork. These are all unique VLANs.\n\n\nif you are provisioning a port dedicated to a private VLAN, you would just select that VLAN but leave \nIPv4 Enabled\n and \nIPv6 Enabled\n unchecked as IP addressing on private VLANs in not within an IX's purview.\n\n\nat INEX we also have quarantine VLANs for each peering VLAN. You would \ntypically\n not select a quarantine VLAN here during provisioning unless you are using automation. Just put the interface in the primary peering LAN and let the \nPhysical Interface Settings\n (see below) look after the quarantine flag.\n\n\nYou should check the \nUse 802.1q framing\n checkbox if the port should be tagged facing the customer. If you are not using any automation tools, this will be informational for you rather than production affecting.\n\n\nChecking either or both of \nIPv4 Enabled\n and \nIPv6 Enabled\n will show the \nIPv4 Details\n and \nIPv6 Details\n (as per the above image) and enable these protocols for the customer's connection.\n\n\n\n\nPhysical Interface Settings\n\uf0c1\n\n\nThis section allows you to select the physical interface / switch port for the connection.\n\n\n\n\nSwitch\n: a dropdown list of all switches. Be careful as at present this list is all active switches rather than switches on the same infrastructure as the selected VLAN from \nGeneral Interface Settings\n.\n\n\nPort\n: the switch port to use. This is dynamically populated when the switch is selected and \nwill only show ports of type \nPeering\n or type \nUnset / Unknown\n (these are set on a per port basis when adding / editing switches).\n\n\n\n\nStatus\n: the port status currently has one of five options. They effectively work as a boolean where \nConnected\n means on/enabled and the rest mean disabled as explained below. In practice, we tend to just use three states:\n\n\n\n\n\n\nConnected\n: this is the most important. When a \nvirtual interface\n has \nany\n port with the \nConnected\n state, then IXP Manager will consider this connection active and will generate router configuration, monitoring configuration, etc.\n\n\n\n\nAwaiting X-Connect\n: the customer has requested an upgrade / new port and we are awaiting for the co-location provider / customer to get the cross connect organised.\n\n\nQuarantine\n: the port is connected and is under going quarantine prior to being moved onto the production peering LAN. During quarantine, INEX checks the port to ensure only ARP, IPv4 and IPv6 packets are received (no *-discovery, STP, etc. as well as a number of other things).\n\n\n\n\nThe \nNot Connected\n and \nDisabled\n states have the same effect as (2) and (3) above and can be used as informational settings where (2) and (3) do not apply.\n\n\nSpeed and duplex are self explanatory. These settings in the \nphysical interface\n entity are informational unless you are doing automation. They also have knock on effects to (for example) graphing - where the MRTG max value on an interface is set to this to prevent weird excessive spikes on counter rollovers.\n\n\nGeneral VLAN Settings\n\uf0c1\n\n\nThese settings apply to the VLAN interface.\n\n\nThe \nMax BGP Prefixes\n is a setting used to determine max prefixes on router BGP peers - please \nsee the global version of this as explained in the customer section for details\n.\n\n\nIf \nApply IRRDB Filtering\n is \nnot\n set, then the route servers will accept any prefixes advertised by the customer (note that the default templates will filter martians and apply a max prefix limit). Generally speaking this is a \nvery bad idea\n and should only be used in exceptional cases. \nINEX never uses this setting - but demand from other IX's had it added.\n\n\nMulticast Enabled\n is informational only. INEX used to support multicast on the peering LAN but removed support in 2015 due to lack of interest and added complexity / cost when purchasing new switches.\n\n\nIf \nRoute Server Client\n is checked, then IXP Manager will configure a BGP peer for this connection when generating \nroute server configurations\n. It is also used in other areas to show if a member uses the route servers or not, by the \nPeering Manager\n to calculate missing BGP sessions, etc.\n\n\nSimilarly, if \nAS112 Client\n is checked, then IXP Manager will configure a BGP peer for this connection when generating \nAS112 router configurations\n.\n\n\nIPv4/IPv6 Details\n\uf0c1\n\n\nWhen \nIPv4 / IPv6 Enabled\n is checked under \nGeneral Interface Settings\n above, these two sections will be available.\n\n\nThe same details apply to IPv4 and IPv6 options so we will document them together.\n\n\n\n\nIP Address\n: the IP address to assign to this customer. This is taken from \navailable\n IP addresses for the VLAN selected in \nGeneral Interface Settings\n.\n\n\nIP addresses are added in IXP Manager via the left hand menu under IXP Admin Actions.\n\n\nThe dropdown also works as an input field - this allows you to enter a new IP address that does not already exist in the field. When the wizard form is submitted, the address is added and associated with the VLAN. This is most useful for the IPv6 field if you are using a non-sequential numbering plan.\n\n\nHostname\n: if you use IXP Manager to configure your \nDNS ARPA\n entries, the hostname entered here will be returned when a PTR request is made for the assigned IP address. Enter a complete hostname without trailing period such as: \nwww.example.com\n.\n\n\nBGP MD5 Secret\n: The will be used for \ngenerating router configurations\n.\n\n\nThe \ncircle refresh\n icon in the IPv4 section will generate a cryptographically secure secret in modern browsers.\n\n\nThe \nsquare refresh\n icon in the IPv6 section will copy the value from the IPv4 section.\n\n\nNote that setting a MD5 here does not mean that all router configurations have to include it. MD5 can be disabled entirely by a \nrouters configuration\n or by templating.\n\n\nCan Ping\n: IXP Manager generates configuration for a number of other tools such as \nSmokeping\n and Nagios which ping customer routers. These are invaluable tools for problem solving, monitoring and graphing long term trends. We enable this by default unless a customer specifically asks us not to.\n\n\nCan Monitor RC BGP\n: this is more of a legacy option for configuration builders that used to check for established route collector BGP sessions and warn if not present. This is deprecated and will be removed.\n\n\n\n\nViewing / Editing an Interface\n\uf0c1\n\n\nOnce an interface has been added as per the above wizard instructions, you can view and edit the interface by selecting the edit icon against the connection you are interested in from the \nPorts\n tab on the customer overview page. When you do that, you will see a screen such as the following:\n\n\n\n\nYou can see from the layout of this screen how it ties in with the schema explained above.\n\n\nVirtual Interface Details\n\uf0c1\n\n\nThe screenshot above shows the virtual interface details with the \nAdvanced Options\n shown. The additional fields here that were not in the wizard are described below.\n\n\nLink aggregation / LAG framing\n is mostly informational unless you are doing automation. There are some restrictions. Namely / specifically:\n\n\n\n\nif you have more than one physical interface, it will require you to set this.\n\n\nfor a single interface, checking this indicates you want LACP on a single member LAG. This is useful and often common practice as it allows upgrades without outages.\n\n\n\n\nThe \nVirtual Interface Name\n is again mostly informational unless you are doing automation. It should be the start of the LAG name without the number. On an IOS device this would be \nPort-channel\n for example. Matched with this is the \nChannel Group Number\n with is tacked onto the end of the \nVirtual Interface Name\n. Leave it as 0 and when you check \nLink aggregation / LAG framing\n and save the changes, IXP Manager will set this to the next available unused port channel / bundle / LAG number on that switch.\n\n\nBoth \nDescription\n and \nMTU\n are informational.\n\n\nPhysical Interfaces\n\uf0c1\n\n\nYou can add additional physical interfaces to a connection / virtual interface. This effectivily means you are creating a LAG. The form for adding additional physical interfaces is indentical to that in the wizard.\n\n\nVLAN Interfaces\n\uf0c1\n\n\nThe most common use case of more than one VLAN Interface is when your customer may also have private VLANs on their connection.\n\n\nOther than that, the VLAN interface add / edit form has all the same elements as the wizard with one addition:\n\n\n\n\nBusy host\n: this flag indicates that the customer's router is unusually slow to reply to ICMP echo requests and that when monitoring, the configuraiton should allow for warnings after a 5sec RTT rather than 1sec.", 
            "title": "Customer Connections"
        }, 
        {
            "location": "/usage/interfaces/#customer-interfaces", 
            "text": "This section explains how to set up a customer interface.", 
            "title": "Customer Interfaces"
        }, 
        {
            "location": "/usage/interfaces/#database-overview", 
            "text": "To fully understand how IXP Manager treats customer interfaces, you need a little background on the database schema. This will also help explain why we have laid out the UI as it is.  The original database schema dates from pre-2005 and has stood the test of time extremely well.   The above is described as follows:   Customers have a 1:n relationship with virtual interfaces (VI). A VI is a container object that represents a customer connection and all the elements that make up that connection.  VIs have a 1:n relationship with physical interfaces (PI).  A physical interface in turn has a 1:1 relationship with switch ports (SP).  PIs represent what we say the customer has (e.g. a 1Gb port). The SP has information from the switch itself and can help identify inconsistencies with what was expected to be configured/billed and what has actually been provisioned).  PIs can also move between SPs (e.g. customer upgrades / switch replacements / etc.).  By schematically representing PIs and SPs as different entities, we can associate elements such as usage graphs to the PI so these remain consistent when a SP changes.  Adding a second (or more) PI to a VI indicates that the port is a LAG.  VIs have a 1:n relationship with VLAN interfaces (VLI). You can consider the PI element the layer2 / physical element and the VLI element the layer3 element.  A VLI has a 1:1 mapping with a VLAN (typically the peering LAN).  If IPv4 is enabled, the VLI has a 1:1 mapping to an IPv4 address from the given VLAN.  If IPv6 is enabled, the VLI has a 1:1 mapping to an IPv6 address from the given VLAN.  The VLI also indicates if this interface should have a route server peering session, MD5 passwords, etc. (all explained below).", 
            "title": "Database Overview"
        }, 
        {
            "location": "/usage/interfaces/#provisioning-an-interface-via-the-wizard", 
            "text": "The best way to provision a new interface for a customer is to use the wizard. This can be accessed from the customer's overview page via a menu on the top right:   When you open the wizard, you will see:   This can be used to provision a single port standard customer connection. If they customer needs a LAG or other non-standard options, these can be added afterwards.", 
            "title": "Provisioning an Interface via the Wizard"
        }, 
        {
            "location": "/usage/interfaces/#general-interface-settings", 
            "text": "The customer should be prefilled and read-only as you enter the wizard from a specific customer overview page.  You would normally just select your main / primary peering VLAN from the  VLAN  dropdown. There are some notable exceptions:   you may have more than one peering LAN. For example, INEX runs two resilient peering networks in Dublin and a separate regional exchange called INEX Cork. These are all unique VLANs.  if you are provisioning a port dedicated to a private VLAN, you would just select that VLAN but leave  IPv4 Enabled  and  IPv6 Enabled  unchecked as IP addressing on private VLANs in not within an IX's purview.  at INEX we also have quarantine VLANs for each peering VLAN. You would  typically  not select a quarantine VLAN here during provisioning unless you are using automation. Just put the interface in the primary peering LAN and let the  Physical Interface Settings  (see below) look after the quarantine flag.  You should check the  Use 802.1q framing  checkbox if the port should be tagged facing the customer. If you are not using any automation tools, this will be informational for you rather than production affecting.  Checking either or both of  IPv4 Enabled  and  IPv6 Enabled  will show the  IPv4 Details  and  IPv6 Details  (as per the above image) and enable these protocols for the customer's connection.", 
            "title": "General Interface Settings"
        }, 
        {
            "location": "/usage/interfaces/#physical-interface-settings", 
            "text": "This section allows you to select the physical interface / switch port for the connection.   Switch : a dropdown list of all switches. Be careful as at present this list is all active switches rather than switches on the same infrastructure as the selected VLAN from  General Interface Settings .  Port : the switch port to use. This is dynamically populated when the switch is selected and  will only show ports of type  Peering  or type  Unset / Unknown  (these are set on a per port basis when adding / editing switches).   Status : the port status currently has one of five options. They effectively work as a boolean where  Connected  means on/enabled and the rest mean disabled as explained below. In practice, we tend to just use three states:    Connected : this is the most important. When a  virtual interface  has  any  port with the  Connected  state, then IXP Manager will consider this connection active and will generate router configuration, monitoring configuration, etc.   Awaiting X-Connect : the customer has requested an upgrade / new port and we are awaiting for the co-location provider / customer to get the cross connect organised.  Quarantine : the port is connected and is under going quarantine prior to being moved onto the production peering LAN. During quarantine, INEX checks the port to ensure only ARP, IPv4 and IPv6 packets are received (no *-discovery, STP, etc. as well as a number of other things).   The  Not Connected  and  Disabled  states have the same effect as (2) and (3) above and can be used as informational settings where (2) and (3) do not apply.  Speed and duplex are self explanatory. These settings in the  physical interface  entity are informational unless you are doing automation. They also have knock on effects to (for example) graphing - where the MRTG max value on an interface is set to this to prevent weird excessive spikes on counter rollovers.", 
            "title": "Physical Interface Settings"
        }, 
        {
            "location": "/usage/interfaces/#general-vlan-settings", 
            "text": "These settings apply to the VLAN interface.  The  Max BGP Prefixes  is a setting used to determine max prefixes on router BGP peers - please  see the global version of this as explained in the customer section for details .  If  Apply IRRDB Filtering  is  not  set, then the route servers will accept any prefixes advertised by the customer (note that the default templates will filter martians and apply a max prefix limit). Generally speaking this is a  very bad idea  and should only be used in exceptional cases.  INEX never uses this setting - but demand from other IX's had it added.  Multicast Enabled  is informational only. INEX used to support multicast on the peering LAN but removed support in 2015 due to lack of interest and added complexity / cost when purchasing new switches.  If  Route Server Client  is checked, then IXP Manager will configure a BGP peer for this connection when generating  route server configurations . It is also used in other areas to show if a member uses the route servers or not, by the  Peering Manager  to calculate missing BGP sessions, etc.  Similarly, if  AS112 Client  is checked, then IXP Manager will configure a BGP peer for this connection when generating  AS112 router configurations .", 
            "title": "General VLAN Settings"
        }, 
        {
            "location": "/usage/interfaces/#ipv4ipv6-details", 
            "text": "When  IPv4 / IPv6 Enabled  is checked under  General Interface Settings  above, these two sections will be available.  The same details apply to IPv4 and IPv6 options so we will document them together.   IP Address : the IP address to assign to this customer. This is taken from  available  IP addresses for the VLAN selected in  General Interface Settings .  IP addresses are added in IXP Manager via the left hand menu under IXP Admin Actions.  The dropdown also works as an input field - this allows you to enter a new IP address that does not already exist in the field. When the wizard form is submitted, the address is added and associated with the VLAN. This is most useful for the IPv6 field if you are using a non-sequential numbering plan.  Hostname : if you use IXP Manager to configure your  DNS ARPA  entries, the hostname entered here will be returned when a PTR request is made for the assigned IP address. Enter a complete hostname without trailing period such as:  www.example.com .  BGP MD5 Secret : The will be used for  generating router configurations .  The  circle refresh  icon in the IPv4 section will generate a cryptographically secure secret in modern browsers.  The  square refresh  icon in the IPv6 section will copy the value from the IPv4 section.  Note that setting a MD5 here does not mean that all router configurations have to include it. MD5 can be disabled entirely by a  routers configuration  or by templating.  Can Ping : IXP Manager generates configuration for a number of other tools such as  Smokeping  and Nagios which ping customer routers. These are invaluable tools for problem solving, monitoring and graphing long term trends. We enable this by default unless a customer specifically asks us not to.  Can Monitor RC BGP : this is more of a legacy option for configuration builders that used to check for established route collector BGP sessions and warn if not present. This is deprecated and will be removed.", 
            "title": "IPv4/IPv6 Details"
        }, 
        {
            "location": "/usage/interfaces/#viewing-editing-an-interface", 
            "text": "Once an interface has been added as per the above wizard instructions, you can view and edit the interface by selecting the edit icon against the connection you are interested in from the  Ports  tab on the customer overview page. When you do that, you will see a screen such as the following:   You can see from the layout of this screen how it ties in with the schema explained above.", 
            "title": "Viewing / Editing an Interface"
        }, 
        {
            "location": "/usage/interfaces/#virtual-interface-details", 
            "text": "The screenshot above shows the virtual interface details with the  Advanced Options  shown. The additional fields here that were not in the wizard are described below.  Link aggregation / LAG framing  is mostly informational unless you are doing automation. There are some restrictions. Namely / specifically:   if you have more than one physical interface, it will require you to set this.  for a single interface, checking this indicates you want LACP on a single member LAG. This is useful and often common practice as it allows upgrades without outages.   The  Virtual Interface Name  is again mostly informational unless you are doing automation. It should be the start of the LAG name without the number. On an IOS device this would be  Port-channel  for example. Matched with this is the  Channel Group Number  with is tacked onto the end of the  Virtual Interface Name . Leave it as 0 and when you check  Link aggregation / LAG framing  and save the changes, IXP Manager will set this to the next available unused port channel / bundle / LAG number on that switch.  Both  Description  and  MTU  are informational.", 
            "title": "Virtual Interface Details"
        }, 
        {
            "location": "/usage/interfaces/#physical-interfaces", 
            "text": "You can add additional physical interfaces to a connection / virtual interface. This effectivily means you are creating a LAG. The form for adding additional physical interfaces is indentical to that in the wizard.", 
            "title": "Physical Interfaces"
        }, 
        {
            "location": "/usage/interfaces/#vlan-interfaces", 
            "text": "The most common use case of more than one VLAN Interface is when your customer may also have private VLANs on their connection.  Other than that, the VLAN interface add / edit form has all the same elements as the wizard with one addition:   Busy host : this flag indicates that the customer's router is unusually slow to reply to ICMP echo requests and that when monitoring, the configuraiton should allow for warnings after a 5sec RTT rather than 1sec.", 
            "title": "VLAN Interfaces"
        }, 
        {
            "location": "/usage/users/", 
            "text": "Users \n Contacts\n\uf0c1\n\n\nHistorical Perspective\n\uf0c1\n\n\nIXP Manager's database schema has been in use in production at INEX since the mid-2000's. Since then, how users are represented in web-based applications has evolved and we have some work to do on IXP Manager in this regard.\n\n\nIXP Manager of pre-April 2013 had separate \ncontacts\n and \nusers\n which was quite confusing. \nLONAP\n sponsored a rework of this and now all users are contacts with login privileges. The interface still allows listing of these separately but all links for adding / editing / deleting will \ndo the right thing\n.\n\n\nAs IXP Manager v4 evolves, we would like to make a number of changes:\n\n\n\n\nreconsider the need for \nusers\n and \ncontacts\n - can these be collapsed to one table, be split again or stay as is;\n\n\nremove usernames and have users log in with email addresses;\n\n\nallow a user to be associated with more than one customer;\n\n\nlook at OAuth2 with links to PeeringDB as well as allowing people to log in / link OAuth supported social media accounts;\n\n\nrework the standard \nCUSTUSER\n and \nCUSTADMIN\n privileges into (perhaps) a read-only and a read-write model;\n\n\nadd 2fa.\n\n\n\n\nTypes of Users\n\uf0c1\n\n\nSee the entity definitions \nhere\n.\n\n\nThere are four types of user:\n\n\n\n\nAUTH_PUBLIC\n - a visitor who has not logged into IXP Manager (\npriv == 0\n).\n\n\nAUTH_CUSTUSER\n - a standard customer user with portal access (\npriv == 1\n).\n\n\nAUTH_CUSTADMIN\n - a customer administrative user. The only purpose of this account is to allow customers to create, edit and remove their own users. No other access is available through a CUSTADMIN login (\npriv == 2\n).\n\n\nAUTH_SUPERUSER\n - IXP staff only. \nFULL ACCESS TO ALL CUSTOMERS AND FUNCTIONS\n. This is only for your IXP staff! (\npriv == 3\n)\n\n\n\n\nAdditional Historical Perspective:\n the use of \nAUTH_CUSTADMIN\n was modeled on RIPE's equivalent model at the time. RIPE have since abandoned this model and it is our intention to do likewise.\n\n\nLogging in as Another User\n\uf0c1\n\n\nAdministrative users (\nAUTH_SUPERUSER\n) can \nswitch to\n other users to \nsee what they see\n via the user list or the customer overview page.\n\n\nThe purpose of this is for both development and for support staff to replicate issues as reported by users.\n\n\nPassword Hashing\n\uf0c1\n\n\nPrior to \nIXP Manager\n v4.5, we supported both plaintext and bcrypt password hashing. There was a historical justification at INEX for support plaintext (this \nmay still be documented here\n). However, IXP Manager is meant to represent the best practices for managing IXP's. As such, plaintext support was removed in v4.5.\n\n\nAs of v4.5, all passwords are stored as bcrypt with a cost \n=10.", 
            "title": "Users & Contacts"
        }, 
        {
            "location": "/usage/users/#users-contacts", 
            "text": "", 
            "title": "Users &amp; Contacts"
        }, 
        {
            "location": "/usage/users/#historical-perspective", 
            "text": "IXP Manager's database schema has been in use in production at INEX since the mid-2000's. Since then, how users are represented in web-based applications has evolved and we have some work to do on IXP Manager in this regard.  IXP Manager of pre-April 2013 had separate  contacts  and  users  which was quite confusing.  LONAP  sponsored a rework of this and now all users are contacts with login privileges. The interface still allows listing of these separately but all links for adding / editing / deleting will  do the right thing .  As IXP Manager v4 evolves, we would like to make a number of changes:   reconsider the need for  users  and  contacts  - can these be collapsed to one table, be split again or stay as is;  remove usernames and have users log in with email addresses;  allow a user to be associated with more than one customer;  look at OAuth2 with links to PeeringDB as well as allowing people to log in / link OAuth supported social media accounts;  rework the standard  CUSTUSER  and  CUSTADMIN  privileges into (perhaps) a read-only and a read-write model;  add 2fa.", 
            "title": "Historical Perspective"
        }, 
        {
            "location": "/usage/users/#types-of-users", 
            "text": "See the entity definitions  here .  There are four types of user:   AUTH_PUBLIC  - a visitor who has not logged into IXP Manager ( priv == 0 ).  AUTH_CUSTUSER  - a standard customer user with portal access ( priv == 1 ).  AUTH_CUSTADMIN  - a customer administrative user. The only purpose of this account is to allow customers to create, edit and remove their own users. No other access is available through a CUSTADMIN login ( priv == 2 ).  AUTH_SUPERUSER  - IXP staff only.  FULL ACCESS TO ALL CUSTOMERS AND FUNCTIONS . This is only for your IXP staff! ( priv == 3 )   Additional Historical Perspective:  the use of  AUTH_CUSTADMIN  was modeled on RIPE's equivalent model at the time. RIPE have since abandoned this model and it is our intention to do likewise.", 
            "title": "Types of Users"
        }, 
        {
            "location": "/usage/users/#logging-in-as-another-user", 
            "text": "Administrative users ( AUTH_SUPERUSER ) can  switch to  other users to  see what they see  via the user list or the customer overview page.  The purpose of this is for both development and for support staff to replicate issues as reported by users.", 
            "title": "Logging in as Another User"
        }, 
        {
            "location": "/usage/users/#password-hashing", 
            "text": "Prior to  IXP Manager  v4.5, we supported both plaintext and bcrypt password hashing. There was a historical justification at INEX for support plaintext (this  may still be documented here ). However, IXP Manager is meant to represent the best practices for managing IXP's. As such, plaintext support was removed in v4.5.  As of v4.5, all passwords are stored as bcrypt with a cost  =10.", 
            "title": "Password Hashing"
        }, 
        {
            "location": "/features/api/", 
            "text": "API\n\uf0c1\n\n\nIXP Manager\n has a number of API endpoints which are documented in the appropriate places throughout the documentation.\n\n\nPlease find details below about authenticating for API access to secured functions.\n\n\nCreating an API Key\n\uf0c1\n\n\nWhen logged into \nIXP Manager\n, create an API as follows:\n\n\n\n\nSelect \nMy Account\n on the right hand side of the top menu.\n\n\nSelect \nAPI Keys\n from the \nMy Account\n menu.\n\n\nClick the plus / addition icon on the top right of the resultant \nAPI Keys\n page.\n\n\n\n\nTreat your API key as a password and do not copy the below URLs into public websites and other public forums.\n\n\nAPI Authentication\n\uf0c1\n\n\nThere are two ways to use your API key to authenticate to IXP Manager.\n\n\nYou can test these using the API test endpoint at \napi/v4/test\n. For example:\n\n\nhttps://ixp.example.com/api/v4/test\n\n\n\n\n\nThe plaintext response will also indicate if you are authenticated or not (which can be via existing session or API key).\n\n\n1. HTTP Header Parameter\n\uf0c1\n\n\nYou can pass your API key in the HTTP request as a request header parameter called \nX-IXP-Manager-API-Key\n. For example:\n\n\ncurl -X GET -H \nX-IXP-Manager-API-Key: my-api-key\n https://ixp.example.com/api/v4/test\n\n\n\n\n\n2. As a URL Parameter\n\uf0c1\n\n\nThis is a legacy method that is still supported. You can tack your key on as follows:\n\n\nhttps://ixp.example.com/api/v4/test?apikey=my-api-key", 
            "title": "API"
        }, 
        {
            "location": "/features/api/#api", 
            "text": "IXP Manager  has a number of API endpoints which are documented in the appropriate places throughout the documentation.  Please find details below about authenticating for API access to secured functions.", 
            "title": "API"
        }, 
        {
            "location": "/features/api/#creating-an-api-key", 
            "text": "When logged into  IXP Manager , create an API as follows:   Select  My Account  on the right hand side of the top menu.  Select  API Keys  from the  My Account  menu.  Click the plus / addition icon on the top right of the resultant  API Keys  page.   Treat your API key as a password and do not copy the below URLs into public websites and other public forums.", 
            "title": "Creating an API Key"
        }, 
        {
            "location": "/features/api/#api-authentication", 
            "text": "There are two ways to use your API key to authenticate to IXP Manager.  You can test these using the API test endpoint at  api/v4/test . For example:  https://ixp.example.com/api/v4/test  The plaintext response will also indicate if you are authenticated or not (which can be via existing session or API key).", 
            "title": "API Authentication"
        }, 
        {
            "location": "/features/api/#1-http-header-parameter", 
            "text": "You can pass your API key in the HTTP request as a request header parameter called  X-IXP-Manager-API-Key . For example:  curl -X GET -H  X-IXP-Manager-API-Key: my-api-key  https://ixp.example.com/api/v4/test", 
            "title": "1. HTTP Header Parameter"
        }, 
        {
            "location": "/features/api/#2-as-a-url-parameter", 
            "text": "This is a legacy method that is still supported. You can tack your key on as follows:  https://ixp.example.com/api/v4/test?apikey=my-api-key", 
            "title": "2. As a URL Parameter"
        }, 
        {
            "location": "/features/as112/", 
            "text": "AS112 Service\n\uf0c1\n\n\n\n\nPrerequisite Reading:\n Ensure you first familiarize yourself with \nthe generic documentation on managing and generating router configurations here\n.\n\n\n\n\nAS112\n is a service which provides anycast reverse DNS lookup for several prefixes, namely:\n\n\n\n\n10.0.0.0/8\n\n\n192.168.0.0/16\n\n\n172.16.0.0/12\n\n\n169.254.0.0/16\n\n\n\n\nBecause these IP addresses are widely used for private networking, many end-user systems are configured to perform reverse DNS lookups for these address ranges.  DNS lookups for these ranges should always be null-answered quickly, in order to make sure that DNS retransmits don\u2019t occur (thereby overloading local DNS resolvers), and to prevent end-user systems from hanging due to DNS lookups.\n\n\nAS112 services are provided around the world by a group of volunteers and, very often, by IXP operators for the benefit of their members.\n\n\nINEX\n has always provided an AS112 service to our members on all peering LANs and so it is an integral part of \nIXP Manager\n. You can read all about INEX's implementation at https://www.inex.ie/technical/as112-service/ including graphs for the service. Feel free to use our test and examples from that page for your own IXP.\n\n\nBuilding an AS112 Service\n\uf0c1\n\n\nYou can find instructions for building an AS112 service in \nrfc7534\n. You should also add AS112 redirection using DNAME functionality as per \nrfc7535\n.\n\n\nYou will also find a lot more information and how-tos on the official website at: \nhttps://www.as112.net/\n.\n\n\nFollow these instructions in every way to build the AS112 service on a (virtual) machine with an appropriate DNS server - \nexcept skip the installation and configuration of the BGP daemon\n. When using IXP Manager, you will need to use Bird for this and IXP Manager will create the configuration.\n\n\nManaging Your AS112 Service from IXP Manager\n\uf0c1\n\n\nAS112 is disabled by default in IXP Manager. This really just means UI elements are hidden. To enable these, set the following in your \n.env\n file:\n\n\nIXP_AS112_UI_ACTIVE=true\n\n\n\n\n\nThis will add UI elements including:\n\n\n\n\nan \nAS112 Client\n checkbox on VLAN interface forms. Checking this toggles a database field to indicate if the customer's VLAN interface should have the AS112 service enabled.\n\n\nan indication as to whether the user has AS112 services enabled on various overview screens.\n\n\n\n\nEnabling the AS112 service simply indicates if a BGP peering session should be created in the AS112 BGP configuration when downloading the AS112 router's BGP configuration from IXP Manager.\n\n\nCreating the Pro-Bono AS112 Customer\n\uf0c1\n\n\nYou need to add the AS112 service as a pro-bono member of your IXP in IXP Manager. Here's INEX's example:\n\n\n\n\nYou then need to create an interface for the AS112 service on each peering LAN where the service will be offered. Here again is INEX's example from our peering LAN1 in Dublin:\n\n\n\n\nNote that historically INEX has not used MD5 on our AS112 service. This is because the service dates from over 20 years ago at INEX when MD5 support was not available. There is no reason not to use MD5 on the service if you wish.\n\n\nGenerating the Bird Configuration\n\uf0c1\n\n\nPlease see the \nrouter configuration generation\n for this.\n\n\nFor your AS112 server, we have a \nsample script(s)\n for pulling and updating the configuration from IXP Manager. We typically put this in an hourly cron.\n\n\nOther Notes\n\uf0c1\n\n\nAt INEX, we typically have our AS112 service peer with our route servers.\n\n\nThis will happen automatically if you check the \nRoute Server Client\n on the AS112 VLAN interface configuration (see above screen shot) and also check the \nAS112 Client\n checkbox on the VLAN interfaces of your route servers in IXP Manager. \nNote that in the same way as you create an AS112 \npro-bono\n customer, you should also have a dedicated route server \ninternal\n customer.", 
            "title": "AS112"
        }, 
        {
            "location": "/features/as112/#as112-service", 
            "text": "Prerequisite Reading:  Ensure you first familiarize yourself with  the generic documentation on managing and generating router configurations here .   AS112  is a service which provides anycast reverse DNS lookup for several prefixes, namely:   10.0.0.0/8  192.168.0.0/16  172.16.0.0/12  169.254.0.0/16   Because these IP addresses are widely used for private networking, many end-user systems are configured to perform reverse DNS lookups for these address ranges.  DNS lookups for these ranges should always be null-answered quickly, in order to make sure that DNS retransmits don\u2019t occur (thereby overloading local DNS resolvers), and to prevent end-user systems from hanging due to DNS lookups.  AS112 services are provided around the world by a group of volunteers and, very often, by IXP operators for the benefit of their members.  INEX  has always provided an AS112 service to our members on all peering LANs and so it is an integral part of  IXP Manager . You can read all about INEX's implementation at https://www.inex.ie/technical/as112-service/ including graphs for the service. Feel free to use our test and examples from that page for your own IXP.", 
            "title": "AS112 Service"
        }, 
        {
            "location": "/features/as112/#building-an-as112-service", 
            "text": "You can find instructions for building an AS112 service in  rfc7534 . You should also add AS112 redirection using DNAME functionality as per  rfc7535 .  You will also find a lot more information and how-tos on the official website at:  https://www.as112.net/ .  Follow these instructions in every way to build the AS112 service on a (virtual) machine with an appropriate DNS server -  except skip the installation and configuration of the BGP daemon . When using IXP Manager, you will need to use Bird for this and IXP Manager will create the configuration.", 
            "title": "Building an AS112 Service"
        }, 
        {
            "location": "/features/as112/#managing-your-as112-service-from-ixp-manager", 
            "text": "AS112 is disabled by default in IXP Manager. This really just means UI elements are hidden. To enable these, set the following in your  .env  file:  IXP_AS112_UI_ACTIVE=true  This will add UI elements including:   an  AS112 Client  checkbox on VLAN interface forms. Checking this toggles a database field to indicate if the customer's VLAN interface should have the AS112 service enabled.  an indication as to whether the user has AS112 services enabled on various overview screens.   Enabling the AS112 service simply indicates if a BGP peering session should be created in the AS112 BGP configuration when downloading the AS112 router's BGP configuration from IXP Manager.", 
            "title": "Managing Your AS112 Service from IXP Manager"
        }, 
        {
            "location": "/features/as112/#creating-the-pro-bono-as112-customer", 
            "text": "You need to add the AS112 service as a pro-bono member of your IXP in IXP Manager. Here's INEX's example:   You then need to create an interface for the AS112 service on each peering LAN where the service will be offered. Here again is INEX's example from our peering LAN1 in Dublin:   Note that historically INEX has not used MD5 on our AS112 service. This is because the service dates from over 20 years ago at INEX when MD5 support was not available. There is no reason not to use MD5 on the service if you wish.", 
            "title": "Creating the Pro-Bono AS112 Customer"
        }, 
        {
            "location": "/features/as112/#generating-the-bird-configuration", 
            "text": "Please see the  router configuration generation  for this.  For your AS112 server, we have a  sample script(s)  for pulling and updating the configuration from IXP Manager. We typically put this in an hourly cron.", 
            "title": "Generating the Bird Configuration"
        }, 
        {
            "location": "/features/as112/#other-notes", 
            "text": "At INEX, we typically have our AS112 service peer with our route servers.  This will happen automatically if you check the  Route Server Client  on the AS112 VLAN interface configuration (see above screen shot) and also check the  AS112 Client  checkbox on the VLAN interfaces of your route servers in IXP Manager.  Note that in the same way as you create an AS112  pro-bono  customer, you should also have a dedicated route server  internal  customer.", 
            "title": "Other Notes"
        }, 
        {
            "location": "/features/contact-groups/", 
            "text": "Contact Groups\n\uf0c1\n\n\nContacts can now be assigned to multiple arbitrary groups.\n\n\nActivating the Configuration\n\uf0c1\n\n\nYour database will already be set-up via the database seeds during installation.\n\n\nTo activate this feature, you just need to create the configuration file. From the root directory of IXP Manager just::\n\n\ncp config/contact_group.php.dist config/contact_group.php\n\n\n\n\n\nCreating / Editing / Deleting Groups\n\uf0c1\n\n\nA group is defined by:\n\n\n\n\na name (e.g. beer);\n\n\na type (e.g. Likes); and\n\n\na description (e.g. Contacts in this group like to drink beer).\n\n\n\n\nYou define the group types in \nconfig/contact_group.php\n.\n\n\nIn these examples, \nROLE\n will be entered in the database column and \nRole\n will be displayed in the interface.\n\n\nGroups can then be added / edited / deleted via \nhttps://www.example/com/ixp-manager/contact-group\n. This can be reached by clicking \nContacts\n and then \nContact Groups\n in the left menu.\n\n\nAssigning Contacts to Groups\n\uf0c1\n\n\nAssigning contacts to groups is done in the contact add / edit page.\n\n\nExporting Contact Groups\n\uf0c1\n\n\nContact groups can be exported using the \nixptool.php\n command, for example::\n\nbin/ixptool.php -a cli.cli-export-group -p type=ROLE,format=csv,cid=1\n\n\n\n\n\nwhere the possible comma separated parameters are:\n\n\n\n\ntype=XXX\n: Contact group type (e.g. ROLE); or\n\n\n\n\nname=XXX\n: Contact group name (e.g. beer).\n\n\n\n\n\n\nformat=XXX\n: Output format - one of json (default) or csv\n\n\n\n\nsn\n: Customer shortname to limit results to; or\n\n\ncid\n: Customer id to limit results to.\n\n\n\n\nSpecial Group: \nRoles\n\uf0c1\n\n\nThe default sample configuration file (\nconfig/contact_group.php\n) and the database seeds create a \nROLE\n group type populated with groups \nAdmin\n, \nBilling\n, \nTechnical\n and \nMarketing\n. There is a dedicated form element when editing contacts for any groups defined in the Role type.\n\n\nIf the role type is removed from the configuration, the form element for the contact's roles will not be shown.", 
            "title": "Contact Groups"
        }, 
        {
            "location": "/features/contact-groups/#contact-groups", 
            "text": "Contacts can now be assigned to multiple arbitrary groups.", 
            "title": "Contact Groups"
        }, 
        {
            "location": "/features/contact-groups/#activating-the-configuration", 
            "text": "Your database will already be set-up via the database seeds during installation.  To activate this feature, you just need to create the configuration file. From the root directory of IXP Manager just::  cp config/contact_group.php.dist config/contact_group.php", 
            "title": "Activating the Configuration"
        }, 
        {
            "location": "/features/contact-groups/#creating-editing-deleting-groups", 
            "text": "A group is defined by:   a name (e.g. beer);  a type (e.g. Likes); and  a description (e.g. Contacts in this group like to drink beer).   You define the group types in  config/contact_group.php .  In these examples,  ROLE  will be entered in the database column and  Role  will be displayed in the interface.  Groups can then be added / edited / deleted via  https://www.example/com/ixp-manager/contact-group . This can be reached by clicking  Contacts  and then  Contact Groups  in the left menu.", 
            "title": "Creating / Editing / Deleting Groups"
        }, 
        {
            "location": "/features/contact-groups/#assigning-contacts-to-groups", 
            "text": "Assigning contacts to groups is done in the contact add / edit page.", 
            "title": "Assigning Contacts to Groups"
        }, 
        {
            "location": "/features/contact-groups/#exporting-contact-groups", 
            "text": "Contact groups can be exported using the  ixptool.php  command, for example:: bin/ixptool.php -a cli.cli-export-group -p type=ROLE,format=csv,cid=1   where the possible comma separated parameters are:   type=XXX : Contact group type (e.g. ROLE); or   name=XXX : Contact group name (e.g. beer).    format=XXX : Output format - one of json (default) or csv   sn : Customer shortname to limit results to; or  cid : Customer id to limit results to.", 
            "title": "Exporting Contact Groups"
        }, 
        {
            "location": "/features/contact-groups/#special-group-roles", 
            "text": "The default sample configuration file ( config/contact_group.php ) and the database seeds create a  ROLE  group type populated with groups  Admin ,  Billing ,  Technical  and  Marketing . There is a dedicated form element when editing contacts for any groups defined in the Role type.  If the role type is removed from the configuration, the form element for the contact's roles will not be shown.", 
            "title": "Special Group: Roles"
        }, 
        {
            "location": "/features/patch-panels/", 
            "text": "Patch Panels / Cross Connects\n\uf0c1\n\n\nOne of the more difficult things for an IXP to manage is the sheer volume of patch panels / cross connects they need to manage. We have approached the issue a number of times in IXP Manger but abandoned the attempt every time. Typically our original solutions were over-engineered where all we really needed was something which could replace a spreadsheet per panel.\n\n\nWe believe we have now developed a feature complete and useful means of managing patch panels and associated cross connects.\n\n\nFeatures\n\uf0c1\n\n\n\n\nAdd / edit patch panels  (which includes cable and connector types).\n\n\nList associated patch panel ports which includes:\n\n\ntheir state (such as available / prewired, awaiting cross connect, connected, awaiting cease, reserved, broken).\n\n\nassociated customer and/or switchport.\n\n\nco-location provider's circuit reference.\n\n\ninternal ticket references.\n\n\nTransition ports from available / prewired to awaiting x-connect to connected to awaiting cease to ceased and then available again.\n\n\nCustomer view of their cross connects.\n\n\nPublic (visible to customers) and private notes per cross connect.\n\n\nAttach public and private files to cross connects (such as test results, completion documents, order forms, etc).\n\n\nMaintain complete history of a patch panel port.\n\n\nGenerate and email LoAs (as PDF) with a URL verification function for co-location providers.\n\n\nGenerate emails for connection and cease requests as well as an email providing full customer view of a cross connect.\n\n\nTypically fibre ports are \nduplex\n ports but there is a growing use of BiDi optics meaning simplex ports. Our implementation treats all ports as simplex but you can mark it as duplex and set its partner port.\n\n\n\n\nDuplex Fibre Ports\n\uf0c1\n\n\nWe suggest adding fibre ports as two ports per duplex port. I.e. if your patch panel has 12 duplex ports, enter this as 24 ports. When allocating ports later, you can set it as a duplex port and select its \npartner / slave port\n. This will future proof your patch panels for the growing use of bidi optics and other simplex based xWDM fibre solutions.\n\n\nFrom our experience, duplex fibre ports are often identified as their individual strands. For example, \nduplex port 5\n would be referenced as \nF9/F10\n.\n\n\nYour mileage may vary on this but we need to allow this flexibility to cover both use-cases. You always have options however:\n\n\n\n\nyou can change the presentation of how these ports are referenced externally by \nskinning\n the templates.\n\n\nyou have the option to edit emails before they are sent to also present this as you wish.\n\n\nyou can chose to treat duplex ports as single ports rather than doubling them up.\n\n\nwhen you have duplex ports on a patch panel, IXP Manager will provide a duplex view by default with a CSS-based toggle to reveal the typical partner ports.\n\n\nif you think IXP Manager can make this easier, please talk to us. \nBut we cannot cover every use case programatically. We've opted to allow flexibility rather than dictate a particular format.\n\n\n\n\nAdding a Patch Panel\n\uf0c1\n\n\nThe following image shows a typical \nadd a new patch panel\n form (as of v4.3). You'll note that clicking \nHelp\n provides detailed context aware help messages.\n\n\n\n\nMost of this is self-explanatory but:\n\n\n\n\nBy default, we set the \nColocation Reference\n to the \nPatch Panel Name\n. We are not sure it's a good idea for IXPs to create a second name different to the co-location provider's but this option is available to you. \nSeriously, think about what you are doing here - more references means more confusion!\n The cabinet and cable type is displayed in the list of patch panels so even with obscure data centre references, it should be easy to find what you need.\n\n\nLocation Notes\n: Data centre / co-location providers do a lot of weird, wonderful and strange things! They provide multiple references for a single patch panel (IXP cabinet, MMR, etc.), they get taken over and re-reference everything or even provide no discernable reference. The field is a freetext field that will be included (and parsed as Markdown) in all emails generated by IXP Manager to help you help them identify a patch panel!\n\n\n\n\nIn addition to that, we will also use a cabinets \nU's are counted from top/bottom\n, and a patch panel's \nU position\n and \nmounted at front/rear\n to also create a location description.\n\n When setting the \nNumber of Ports\n, ensure you count duplex fibre ports as \ntwo ports\n. So 12 duplex fibre ports would be entered as 24. When editing a patch panel, this input field represents the number of additional ports you want to add to a patch panel and thus defaults to 0 in that situation.\n\n \nPort Name Prefix\n: This is an optional field intended for use on fibre patch panels. As an example, you may wish to prefix individual fibre strands in a duplex port with F which would mean the name of a duplex port would be displayed as F1/F2.\n* \nChargeable\n: Usually IXPs request their members to come to them and bear the costs of that. However, sometimes a co-location facility may charge the IXP for a half circuit or the IXP may need order and pay for the connection. Setting this only sets the default option when allocating ports to members later. The options are Yes / No / Half / Other.\n\n\nFiltering Patch Panel Ports\n\uf0c1\n\n\nQuite often, all you are looking for is a free in a particular location (data centre) or cabinet of a particular cable type (UTP / SMF / etc.).\n\n\nIXP Manager makes this easy from the \nPatch Panels\n page via the top right button labeled \nFilter Options\n. When clicked, this yields an advanced search as follows:\n\n\n\n\nCabinets auto-fills when you chose (or change) a location.\n\n\nPatch Panel Port States\n\uf0c1\n\n\nA patch panel port can have the following states:\n\n\n\n\nAvailable\n: The port is free and available for use.\n\n\nPrewired\n: This is equivalent to available but it means the port is prewired to a given switchport (you set the port when setting the prewired status). This is useful for IXPs that prewire a bunch of ports to avoid remote hands costs / data centre visits.\n\n\nAwaiting Xconnect\n: Port has been assigned to a member and we are awaiting the co-location provider to install the cross connect. In this state, context aware actions such as emailing connection requests, LoA generation and \nSet Connected\n are all available.\n\n\nConnected\n: Connected and in use.\n\n\nAwaiting Cease\n: This connection is no longer required and we are awaiting the end user / co-location provider to cease the connection.\n\n\nCeased\n: You will never see a ceased state. When a cross connect is marked as ceased, it's current state is archived (for history, include files) and the port is reset to \nAvailable\n. We do not revert to \nPrewired\n but an information message is shown to the user to hint this.\n\n\nReserved\n: Useful to mark particular ports as \noff limits\n for whatever reason.\n\n\nBroken\n\n\nOther\n\n\n\n\nFree / Available Ports\n\uf0c1\n\n\nIXP Manager will colour ports in the \nAvailable\n, \nPrewired\n and \nAwaiting Cease\n states are green allowing an easy visual indication of available ports.\n\n\nPatch Panel Port Lifecycle\n\uf0c1\n\n\nPatch panel ports start as either \navailable\n or \nprewired\n. The context menu in these states is:\n\n\n\n\n\n\nUnset Prewired\n is available as this port has a \nPrewired\n status. Clicking this reverts it to plain \nAvailable\n and disassociates it from the prewired port.\n\n\nEdit Note...\n is always available and provides a pop up to edit public and private notes associated with the port (current lifecycle - ceased ports have their notes at that time archived and cleared).\n\n\n\n\nThe main lifecycle option here is \nAllocate\n:\n\n\n\n\n\n\n\n\nDescription\n: A one line short description to be shown in the list of patch panel ports. Just enough to help explain the ports purpose. Detailed information should be placed in the notes section. Can also be used to explain a reserved / broken / other port. Note that this is parsed as Markdown. \nNB:\n A description is discouraged for customer ports connected to a switch. The customer name and switch port are the description.\n\n\n\n\n\n\nColocation Circuit Reference\n: this is the reference provided by the colocation provider to uniquely reference this cross connect.\n\n\n\n\n\n\nTicket Reference(s)\n: This is a free text field to be used by IXPs as they wish. The intended use is to enter helpdesk ticket references that relate to this cross connect order.\n\n\n\n\n\n\nDuplex connection?\n: Clicking this allows you to select the slave port for duplex connections.\n\n\n\n\n\n\nSwitch / Switch Port\n / \nCustomer\n: You have a number of options when allocating a port:\n\n\n\n\n\n\nIf the port is pre-wired then the switch / switch port will be set here.\n\n\n\n\nIf you chose a switch port which has been allocated to a customer, then this patch panel port will also be allocated to that customer. The backend logic will detect if this is the case and update the customer field.\n\n\nConversely, if you chose a customer first, the switch / switch port dropdowns will be populated with only that customer's assigned ports.\n\n\nSometimes you will get cross connects that are not intended to be connected to peering switches (e.g. connections to co-located customer equipment, IXP metro connections, etc.). In these cases, just select the customer (and if it's the IXP itself, select the IXP customer) and leave switch / switch port unselected.\n\n\n\n\nIf you need to reset these fields, just click either of the Reset button.\n\n\n\n\n\n\nPatch Panel Port Status\n: when allocating a port, this will allow you to set the state to \nAwaiting Xconnect\n or \nConnected\n.\n\n\n\n\n\n\nPhysical Interface Status\n: this is not depicted above. If the selected switch port has already been assigned to a customer by way of a physical interface, you will have the option to update this here also.\n\n\n\n\n\n\nPublic\n and \nPrivate Notes\n: Public notes are available to the customer. Both fields are interpreted as Markdown.\n\n\n\n\n\n\nChargeable\n: Usually IXPs request their members to come to them and bear the costs of that. However, sometimes a co-location facility may charge the IXP for a half circuit or the IXP may need order and pay for the connection. The options are Yes / No / Half / Other. How individual IXPs use this is up to them.\n\n\n\n\n\n\nInternal Use\n: Marks the port as used by the IXP itself. E.g. metro connections.\n\n\n\n\n\n\nOwned By\n: Useful indication for billing and cease requests. Should represent the contractural owner of the cross connect. One of: Customer, IXP, Service Provider, Data Centre, Other. \nService Provider\n might be a metro provider where they ordered the cross connect.\n\n\n\n\n\n\nOnce a port is allocated, it enters the \nAwaiting XConnect\n / \nConnected\n state and there are additional context menu options available:\n\n\n\n\nThe three lifecycle actions are:\n\n\n\n\nSet Connected\n: updates the status (and allows you to add public/private notes). You next action after this should be \nEmail - Connect\n.\n\n\nSet Awaiting Cease\n: mark the port and pending disconnection. Your next action after this should be \nEmail - Cease\n.\n\n\nSet Ceased\n: this is a \ntransitive state\n in that it doesn't \nstick\n. When you mark a patch panel as ceased, the existing details (including files and notes) are archived as part of the port's history and then port is then cleared and made available again.\n\n\n\n\nFile Attachments\n\uf0c1\n\n\nOver the lifetime of a cross connect - and particularly when it is being ordered, there may be files exchanges between you and your customers or the colocation provider. These can be added to the patch panel port via the \nAttach File...\n option.\n\n\nThe dialog will dynamically determine the maximum file upload size based on your PHP settings. To alter this, change the following in your server's appropriate \nphp.ini\n:\n\n\n; Maximum allowed size for uploaded files.\nupload_max_filesize = 40M\n\n; Must be greater than or equal to upload_max_filesize\npost_max_size = 40M\n\n\n\n\n\nPlease search the internet for further help as this is outside the scope of IXP Manager documentation.\n\n\nThe following features apply to file attachments:\n\n\n\n\nthey are archived along with the port history when a cross connect is ceased.\n\n\nthey are stored under \n$IXPROOT/storage/files/ppp\n.\n\n\ntwo files of the same name cannot be uploaded for a single patch panel port.\n\n\nthey can be marked as public or private:\n\n\npublic files are accessible to the customer through their own dashboard.\n\n\npublic files are attached to the \nEmail - Information\n email.\n\n\n\n\nLoA Generation\n\uf0c1\n\n\nMany co-location providers will not accept a cross connect order without a LoA \n(Letter of Agency/Authority)\n from the party to whom the cross connect is to be delivered (typically the IXP).\n\n\nIXP Manager will generate a PDF LoA to download or include in the emails it generates for you. Here is an example:\n\n\n\n\nYou will need to \nskin\n this yourself to change the legalese, address and contact details and potentially add a logo. See the version INEX uses \nhere\n (which includes and embedded PNG logo).\n\n\nNote that \nDompdf\n is used to turn the HTML template into a PDF and it has some restrictions.\n\n\nYou have two options for generating LoAs (without having IXP Manager email them):\n\n\n\n\nDownload PDF\n: downloads the PDF via your browser.\n\n\nView PDF\n: displays the PDF LoA in your browser (where browser supports it).\n\n\n\n\nLoA Verification\n\uf0c1\n\n\nThe stock LoA template (and INEX's version) includes a link that allows co-location browsers to click on to verify its veracity.\n\n\nOn successful verification, the end user sees:\n\n\n\n\nEmail Generation\n\uf0c1\n\n\nIXP Manager allows you to send four emails related to patch panels / cross connects (port status dependent). These are listed below. The Email editor looks as follows:\n\n\n\n\nNote that:\n\n\n\n\nthe option to attach a PDF LoA is a checkbox.\n\n\nthe email is written in Markdown with a preview available. The email is sent as both HTML (from the Markdown) and the plaintext version.\n\n\n\n\nThe four email templates available are:\n\n\n\n\nEmail - Connect\n: Email the customer a request to order a cross connect to the given demarcation points. A LoA is attached as a PDF by default unless you uncheck the box in the email editor.\n\n\nEmail - Cease\n: Email the customer a request to cease a cross connect.\n\n\nEmail - Information\n: Email the customer all details on file about a cross connect. We often get requests for this at INEX and this simplifies the process. The generated email includes:\n\n\nthe standard details regarding port and co-location reference;\n\n\npublic notes;\n\n\npublic files as attachments.\n\n\nEmail - LoA\n: Email a LoA to the customer as attached as a PDF. This is similar to \nEmail - Connect\n but it is more reflective of a typical response to a second request for a LoA.\n\n\n\n\nAll email templates can be \nskinned\n for your own needs. See INEX's example skins \nhere\n.\n\n\nViewing Patch Panel Details and Archives\n\uf0c1\n\n\nEach patch panel port row has the following button:\n\n\n\n\nThe number in the badge indicates how many historical records are available.\n\n\nClicking on the button yields the following view screen:\n\n\n\n\nDevelopment History\n\uf0c1\n\n\nThe Patch Panels functionality was developed during Q1 2017 and added in March 2017. This was made possible from sponsorship which enabled us to hire a new full time developer. We are especially grateful to our sponsors - \nplease see them here\n.", 
            "title": "Cross Connects"
        }, 
        {
            "location": "/features/patch-panels/#patch-panels-cross-connects", 
            "text": "One of the more difficult things for an IXP to manage is the sheer volume of patch panels / cross connects they need to manage. We have approached the issue a number of times in IXP Manger but abandoned the attempt every time. Typically our original solutions were over-engineered where all we really needed was something which could replace a spreadsheet per panel.  We believe we have now developed a feature complete and useful means of managing patch panels and associated cross connects.", 
            "title": "Patch Panels / Cross Connects"
        }, 
        {
            "location": "/features/patch-panels/#features", 
            "text": "Add / edit patch panels  (which includes cable and connector types).  List associated patch panel ports which includes:  their state (such as available / prewired, awaiting cross connect, connected, awaiting cease, reserved, broken).  associated customer and/or switchport.  co-location provider's circuit reference.  internal ticket references.  Transition ports from available / prewired to awaiting x-connect to connected to awaiting cease to ceased and then available again.  Customer view of their cross connects.  Public (visible to customers) and private notes per cross connect.  Attach public and private files to cross connects (such as test results, completion documents, order forms, etc).  Maintain complete history of a patch panel port.  Generate and email LoAs (as PDF) with a URL verification function for co-location providers.  Generate emails for connection and cease requests as well as an email providing full customer view of a cross connect.  Typically fibre ports are  duplex  ports but there is a growing use of BiDi optics meaning simplex ports. Our implementation treats all ports as simplex but you can mark it as duplex and set its partner port.", 
            "title": "Features"
        }, 
        {
            "location": "/features/patch-panels/#duplex-fibre-ports", 
            "text": "We suggest adding fibre ports as two ports per duplex port. I.e. if your patch panel has 12 duplex ports, enter this as 24 ports. When allocating ports later, you can set it as a duplex port and select its  partner / slave port . This will future proof your patch panels for the growing use of bidi optics and other simplex based xWDM fibre solutions.  From our experience, duplex fibre ports are often identified as their individual strands. For example,  duplex port 5  would be referenced as  F9/F10 .  Your mileage may vary on this but we need to allow this flexibility to cover both use-cases. You always have options however:   you can change the presentation of how these ports are referenced externally by  skinning  the templates.  you have the option to edit emails before they are sent to also present this as you wish.  you can chose to treat duplex ports as single ports rather than doubling them up.  when you have duplex ports on a patch panel, IXP Manager will provide a duplex view by default with a CSS-based toggle to reveal the typical partner ports.  if you think IXP Manager can make this easier, please talk to us.  But we cannot cover every use case programatically. We've opted to allow flexibility rather than dictate a particular format.", 
            "title": "Duplex Fibre Ports"
        }, 
        {
            "location": "/features/patch-panels/#adding-a-patch-panel", 
            "text": "The following image shows a typical  add a new patch panel  form (as of v4.3). You'll note that clicking  Help  provides detailed context aware help messages.   Most of this is self-explanatory but:   By default, we set the  Colocation Reference  to the  Patch Panel Name . We are not sure it's a good idea for IXPs to create a second name different to the co-location provider's but this option is available to you.  Seriously, think about what you are doing here - more references means more confusion!  The cabinet and cable type is displayed in the list of patch panels so even with obscure data centre references, it should be easy to find what you need.  Location Notes : Data centre / co-location providers do a lot of weird, wonderful and strange things! They provide multiple references for a single patch panel (IXP cabinet, MMR, etc.), they get taken over and re-reference everything or even provide no discernable reference. The field is a freetext field that will be included (and parsed as Markdown) in all emails generated by IXP Manager to help you help them identify a patch panel!   In addition to that, we will also use a cabinets  U's are counted from top/bottom , and a patch panel's  U position  and  mounted at front/rear  to also create a location description.  When setting the  Number of Ports , ensure you count duplex fibre ports as  two ports . So 12 duplex fibre ports would be entered as 24. When editing a patch panel, this input field represents the number of additional ports you want to add to a patch panel and thus defaults to 0 in that situation.   Port Name Prefix : This is an optional field intended for use on fibre patch panels. As an example, you may wish to prefix individual fibre strands in a duplex port with F which would mean the name of a duplex port would be displayed as F1/F2.\n*  Chargeable : Usually IXPs request their members to come to them and bear the costs of that. However, sometimes a co-location facility may charge the IXP for a half circuit or the IXP may need order and pay for the connection. Setting this only sets the default option when allocating ports to members later. The options are Yes / No / Half / Other.", 
            "title": "Adding a Patch Panel"
        }, 
        {
            "location": "/features/patch-panels/#filtering-patch-panel-ports", 
            "text": "Quite often, all you are looking for is a free in a particular location (data centre) or cabinet of a particular cable type (UTP / SMF / etc.).  IXP Manager makes this easy from the  Patch Panels  page via the top right button labeled  Filter Options . When clicked, this yields an advanced search as follows:   Cabinets auto-fills when you chose (or change) a location.", 
            "title": "Filtering Patch Panel Ports"
        }, 
        {
            "location": "/features/patch-panels/#patch-panel-port-states", 
            "text": "A patch panel port can have the following states:   Available : The port is free and available for use.  Prewired : This is equivalent to available but it means the port is prewired to a given switchport (you set the port when setting the prewired status). This is useful for IXPs that prewire a bunch of ports to avoid remote hands costs / data centre visits.  Awaiting Xconnect : Port has been assigned to a member and we are awaiting the co-location provider to install the cross connect. In this state, context aware actions such as emailing connection requests, LoA generation and  Set Connected  are all available.  Connected : Connected and in use.  Awaiting Cease : This connection is no longer required and we are awaiting the end user / co-location provider to cease the connection.  Ceased : You will never see a ceased state. When a cross connect is marked as ceased, it's current state is archived (for history, include files) and the port is reset to  Available . We do not revert to  Prewired  but an information message is shown to the user to hint this.  Reserved : Useful to mark particular ports as  off limits  for whatever reason.  Broken  Other", 
            "title": "Patch Panel Port States"
        }, 
        {
            "location": "/features/patch-panels/#free-available-ports", 
            "text": "IXP Manager will colour ports in the  Available ,  Prewired  and  Awaiting Cease  states are green allowing an easy visual indication of available ports.", 
            "title": "Free / Available Ports"
        }, 
        {
            "location": "/features/patch-panels/#patch-panel-port-lifecycle", 
            "text": "Patch panel ports start as either  available  or  prewired . The context menu in these states is:    Unset Prewired  is available as this port has a  Prewired  status. Clicking this reverts it to plain  Available  and disassociates it from the prewired port.  Edit Note...  is always available and provides a pop up to edit public and private notes associated with the port (current lifecycle - ceased ports have their notes at that time archived and cleared).   The main lifecycle option here is  Allocate :     Description : A one line short description to be shown in the list of patch panel ports. Just enough to help explain the ports purpose. Detailed information should be placed in the notes section. Can also be used to explain a reserved / broken / other port. Note that this is parsed as Markdown.  NB:  A description is discouraged for customer ports connected to a switch. The customer name and switch port are the description.    Colocation Circuit Reference : this is the reference provided by the colocation provider to uniquely reference this cross connect.    Ticket Reference(s) : This is a free text field to be used by IXPs as they wish. The intended use is to enter helpdesk ticket references that relate to this cross connect order.    Duplex connection? : Clicking this allows you to select the slave port for duplex connections.    Switch / Switch Port  /  Customer : You have a number of options when allocating a port:    If the port is pre-wired then the switch / switch port will be set here.   If you chose a switch port which has been allocated to a customer, then this patch panel port will also be allocated to that customer. The backend logic will detect if this is the case and update the customer field.  Conversely, if you chose a customer first, the switch / switch port dropdowns will be populated with only that customer's assigned ports.  Sometimes you will get cross connects that are not intended to be connected to peering switches (e.g. connections to co-located customer equipment, IXP metro connections, etc.). In these cases, just select the customer (and if it's the IXP itself, select the IXP customer) and leave switch / switch port unselected.   If you need to reset these fields, just click either of the Reset button.    Patch Panel Port Status : when allocating a port, this will allow you to set the state to  Awaiting Xconnect  or  Connected .    Physical Interface Status : this is not depicted above. If the selected switch port has already been assigned to a customer by way of a physical interface, you will have the option to update this here also.    Public  and  Private Notes : Public notes are available to the customer. Both fields are interpreted as Markdown.    Chargeable : Usually IXPs request their members to come to them and bear the costs of that. However, sometimes a co-location facility may charge the IXP for a half circuit or the IXP may need order and pay for the connection. The options are Yes / No / Half / Other. How individual IXPs use this is up to them.    Internal Use : Marks the port as used by the IXP itself. E.g. metro connections.    Owned By : Useful indication for billing and cease requests. Should represent the contractural owner of the cross connect. One of: Customer, IXP, Service Provider, Data Centre, Other.  Service Provider  might be a metro provider where they ordered the cross connect.    Once a port is allocated, it enters the  Awaiting XConnect  /  Connected  state and there are additional context menu options available:   The three lifecycle actions are:   Set Connected : updates the status (and allows you to add public/private notes). You next action after this should be  Email - Connect .  Set Awaiting Cease : mark the port and pending disconnection. Your next action after this should be  Email - Cease .  Set Ceased : this is a  transitive state  in that it doesn't  stick . When you mark a patch panel as ceased, the existing details (including files and notes) are archived as part of the port's history and then port is then cleared and made available again.", 
            "title": "Patch Panel Port Lifecycle"
        }, 
        {
            "location": "/features/patch-panels/#file-attachments", 
            "text": "Over the lifetime of a cross connect - and particularly when it is being ordered, there may be files exchanges between you and your customers or the colocation provider. These can be added to the patch panel port via the  Attach File...  option.  The dialog will dynamically determine the maximum file upload size based on your PHP settings. To alter this, change the following in your server's appropriate  php.ini :  ; Maximum allowed size for uploaded files.\nupload_max_filesize = 40M\n\n; Must be greater than or equal to upload_max_filesize\npost_max_size = 40M  Please search the internet for further help as this is outside the scope of IXP Manager documentation.  The following features apply to file attachments:   they are archived along with the port history when a cross connect is ceased.  they are stored under  $IXPROOT/storage/files/ppp .  two files of the same name cannot be uploaded for a single patch panel port.  they can be marked as public or private:  public files are accessible to the customer through their own dashboard.  public files are attached to the  Email - Information  email.", 
            "title": "File Attachments"
        }, 
        {
            "location": "/features/patch-panels/#loa-generation", 
            "text": "Many co-location providers will not accept a cross connect order without a LoA  (Letter of Agency/Authority)  from the party to whom the cross connect is to be delivered (typically the IXP).  IXP Manager will generate a PDF LoA to download or include in the emails it generates for you. Here is an example:   You will need to  skin  this yourself to change the legalese, address and contact details and potentially add a logo. See the version INEX uses  here  (which includes and embedded PNG logo).  Note that  Dompdf  is used to turn the HTML template into a PDF and it has some restrictions.  You have two options for generating LoAs (without having IXP Manager email them):   Download PDF : downloads the PDF via your browser.  View PDF : displays the PDF LoA in your browser (where browser supports it).", 
            "title": "LoA Generation"
        }, 
        {
            "location": "/features/patch-panels/#loa-verification", 
            "text": "The stock LoA template (and INEX's version) includes a link that allows co-location browsers to click on to verify its veracity.  On successful verification, the end user sees:", 
            "title": "LoA Verification"
        }, 
        {
            "location": "/features/patch-panels/#email-generation", 
            "text": "IXP Manager allows you to send four emails related to patch panels / cross connects (port status dependent). These are listed below. The Email editor looks as follows:   Note that:   the option to attach a PDF LoA is a checkbox.  the email is written in Markdown with a preview available. The email is sent as both HTML (from the Markdown) and the plaintext version.   The four email templates available are:   Email - Connect : Email the customer a request to order a cross connect to the given demarcation points. A LoA is attached as a PDF by default unless you uncheck the box in the email editor.  Email - Cease : Email the customer a request to cease a cross connect.  Email - Information : Email the customer all details on file about a cross connect. We often get requests for this at INEX and this simplifies the process. The generated email includes:  the standard details regarding port and co-location reference;  public notes;  public files as attachments.  Email - LoA : Email a LoA to the customer as attached as a PDF. This is similar to  Email - Connect  but it is more reflective of a typical response to a second request for a LoA.   All email templates can be  skinned  for your own needs. See INEX's example skins  here .", 
            "title": "Email Generation"
        }, 
        {
            "location": "/features/patch-panels/#viewing-patch-panel-details-and-archives", 
            "text": "Each patch panel port row has the following button:   The number in the badge indicates how many historical records are available.  Clicking on the button yields the following view screen:", 
            "title": "Viewing Patch Panel Details and Archives"
        }, 
        {
            "location": "/features/patch-panels/#development-history", 
            "text": "The Patch Panels functionality was developed during Q1 2017 and added in March 2017. This was made possible from sponsorship which enabled us to hire a new full time developer. We are especially grateful to our sponsors -  please see them here .", 
            "title": "Development History"
        }, 
        {
            "location": "/features/dns-arpa/", 
            "text": "DNS / ARPA\n\uf0c1\n\n\nAn IXP assigns each customer (an) IP address(es) from the range used on the peering LAN(s). These IP addresses can show up in traceroutes (for example) and both IXPs and customers like to have these resolve to a hostname.\n\n\nWhen creating \nVLAN Interfaces\n in IXP Manager there is a field called \nIPv[4/6] Hostname\n. This is intended for this DNS ARPA purpose. Some customers have specific requirements for these while other smaller customers may not fully understand the use cases. At INEX, we typically default to entries such as:\n\n\n\n\ncustomer-name.v4.example.com\n (where \nexample.com\n would be \ninex.ie\n in our case)\n\n\ncustomer-name.v6.example.com\n\n\n\n\nIXP Manager\n can generate your ARPA DNS entries for your peering IP space as per the hostnames configured on each VLAN interface and provide them in two ways:\n\n\n\n\nas JSON;\n\n\nas text based on a template (IXP Manager comes with a \nISC Bind\n format example)\n\n\n\n\nBoth of these are explained below.\n\n\nNote that the API endpoints below can be tested in your browser by directly accessing the URLs \nwhen logged in\n. Otherwise, you need an \nAPI key\n when using them in scripts.\n\n\nAs JSON\n\uf0c1\n\n\nYou can use the \nIXP Manager\n API to get all ARPA entries for a given VLAN and protocol as a JSON object using the following endpoint format:\n\n\nhttps://ixp.example.com/api/v4/dns/arpa/{vlanid}/{protocol}\n\n\n\n\n\nwhere:\n\n\n\n\nvlanid\n is the database ID (\nDB ID\n) of the VLAN. You can find the DB ID in IXP Manager in the VLAN table (select \nVLANs\n from the left hand side menu).\n\n\nprotocol\n is either \n4\n for IPv4 or 6 for \nIPv6\n.\n\n\n\n\nIf either of these are invalid, the API will return with a HTTP 404 response.\n\n\nAnd example of the JSON response returned is:\n\n\n[\n\n    \n{\n\n        \nenabled\n:\n \ntrue\n,\n\n        \naddress\n:\n \n192.0.2.67\n,\n\n        \nhostname\n:\n \ncherrie.example.com\n,\n\n        \narpa\n:\n \n67.2.0.192.in-addr.arpa.\n\n    \n},\n\n    \n...\n\n\n]\n\n\n\n\n\n\nwhere:\n\n\n\n\nenabled\n indicates if the protocol has been enabled for this user. This is nearly always true. A situation where it may be false is if you enabled IPv6 for a user; then that user subsequently decided to not use IPv6; then you unchecked the \nIPv6 Enabled\n box in the VLAN Interface form without removing address / hostname entries.\n\n\naddress\n - this IPv4/6 address of the VLAN interface as assigned by the IXP.\n\n\nhostname\n - the configured hostname for this address as entered into \nIXP Manager\n.\n\n\narpa\n: the generated ARPA record name for the IP address assigned by the IXP.\n\n\n\n\nYou can now feed the JSON object into a script to create your own DNS zones appropriate to your DNS infrastructure.\n\n\nWhen scripting, we would normally pull the JSON object using something like:\n\n\n#! /usr/bin/env bash\n\n\n\nKEY\n=\nyour-ixp-manager-api-key\n\n\nURL\n=\nhttps://ixp.example.com/api/v4/dns/arpa\n\n\nVLANIDS\n=\n1 2\n\n\nPROTOCOLS\n=\n4 6\n\n\n\nfor\n v in \n$VLANIDS\n;\n \ndo\n\n    \nfor\n p in \n$PROTOCOLS\n;\n \ndo\n\n\n        \ncmd\n=\n/usr/local/bin/curl --fail -s             \\\n\n\n            -H \\\nX-IXP-Manager-API-Key: \n${\nKEY\n}\n\\\n       \\\n\n\n            \n${\nURL\n}\n/\n${\nv\n}\n/\n${\np\n}\n                           \\\n\n\n                \n/tmp/dns-arpa-vlanid\n$v\n-ipv\n$p\n.json.\n$$\n\n        \neval\n \n$cmd\n\n\n        \nif\n \n[[\n \n$?\n -ne \n0\n \n]]\n;\n \nthen\n\n            \necho\n \nERROR: non-zero return from DNS ARPA API call for vlan ID \n$v\n with protocol \n$p\n\n            \ncontinue\n\n        \nfi\n\n\n        // \ndo\n something\n\n        rm /tmp/dns-arpa-vlanid\n$v\n-ipv\n$p\n.json.\n$$\n\n    \ndone\n\n\ndone\n\n\n\n\n\n\nFrom Templates\n\uf0c1\n\n\nRather than writing your own scripts to consume the JSON object as above, it may be easier to use the bundled ISC Bind templates or to write your own template for IXP Manager.\n\n\nYou can use the \nIXP Manager\n API to get all ARPA entries for a given VLAN and protocol as plain text based on a template by using the following API endpoint:\n\n\nhttps://ixp.example.com/api/v4/dns/arpa/{vlanid}/{protocol}/{template}\n\n\n\n\n\nwhere:\n\n\n\n\nvlanid\n and \nprotocol\n is as above in \nAs JSON\n.\n\n\ntemplate\n is the name of a template file residing in the view path \napi/v4/dns/\n.\n\n\n\n\nRemember that the included ISC Bind templates can be \nskinned\n or you can add custom templates to your skin directory. More detail on this can be found in the dedicated section below.\n\n\nThe bundled ISC Bind templates can be used by setting \n{template}\n to \nbind\n or \nbind-full\n in the above URL. For the example interface in the JSON above, the ISC Bind \nbind\n template would yield:\n\n\n67.2.0.192.in-addr.arpa.       IN   PTR     cherrie.example.com.\n\n\n\n\n\n(note that the terminated period on the hostname is added by the template)\n\n\nThe two bundled templates are:\n\n\n\n\nbind\n: outputs resource records only as per the above example.\n\n\nbind-full\n: outputs a complete Bind zone file including head and serialized serial number (UNIX timestamp). This must be templated as it uses \nexample.com\n for email and name server domains.\n\n\n\n\nSkinning / Templating\n\uf0c1\n\n\nYou can use \nskinning\n to make changes to the bundled ISC Bind template or add your own.\n\n\nLet's say you wanted to add your own template called \nmytemplate1\n and your skin is named \nmyskin\n. The best way to proceed is to copy the bundled example:\n\n\ncd\n \n$IXPROOT\n\nmkdir -p resources/skins/myskin/api/v4/dns\ncp resources/views/api/v4/dns/bind.foil.php resources/skins/myskin/api/v4/dns/mytemplate1.foil.php\n\n\n\n\n\nYou can now edit this template as required. The only constraint on the template name is it can only contain characters from the classes \na-z, 0-9, -\n. \nNB:\n do not use uppercase characters.\n\n\n\n\nContribute back\n - if you write a useful generator, please open a pull request and contribute it back to the project.\n\n\n\n\nThe following variables are available in the template:\n\n\n\n\n$t-\narpa\n: array of the ARPA entries - see below.\n\n\n$t-\nvlan\n: instance of the \nVlan\n entity object\n.\n\n\n$t-\nprotocol\n: either \n4\n or \n6\n.\n\n\n\n\nThe following variables are available for each element of the \n$t-\narpa\n array (essentially the same as the JSON object above): \nenabled, hostname, address, arpa\n. See above for a description.\n\n\nThe actual code in the bundled ISC Bind sample is as simple as:\n\n\n?php\n \nforeach\n(\n \n$t\n-\narpa\n \nas\n \n$a\n \n)\n:\n \n?\n\n\n?\n=\n \ntrim\n(\n$a\n[\narpa\n])\n \n?\n    IN      PTR     \n?\n=\n \ntrim\n(\n$a\n[\nhostname\n])\n \n?\n.\n\n\n?php\n \nendforeach\n;\n \n?\n\n\n\n\n\n\nSample Script\n\uf0c1\n\n\nAt INEX, we have (for example) one peering LAN that is a /25 IPv4 network and so is not a zone file in its own right. As such, we make up the zone file using includes. The main zone file looks like:\n\n\n$TTL 86400\n\n$INCLUDE /usr/local/etc/namedb/zones/soa-0.2.192.in-addr.arpa.inc\n\n$INCLUDE zones/inex-dns-slave-nslist.inc\n\n$INCLUDE zones/reverse-mgmt-hosts-ipv4.include\n$INCLUDE zones/reverse-vlan-12-ipv4.include\n\n\n\n\n\nThe SOA file looks like (as you might expect):\n\n\n@               IN      SOA     ns.example.come.     hostmaster.example.com. (\n                        2017051701      ; Serial\n                        43200           ; Refresh\n                        7200            ; Retry\n                        1209600         ; Expire\n                        7200 )          ; Minimum\n\n\n\n\n\nThe \nreverse-vlan-12-ipv4.include\n is the output of the ISC Bind \nbind\n template above for a given VLAN ID.\n\n\nWe use the sample script \nupdate-dns-from-ixp-manager.sh\n which can be found \nin this directory\n to keep this updated ourselves.", 
            "title": "DNS / ARPA"
        }, 
        {
            "location": "/features/dns-arpa/#dns-arpa", 
            "text": "An IXP assigns each customer (an) IP address(es) from the range used on the peering LAN(s). These IP addresses can show up in traceroutes (for example) and both IXPs and customers like to have these resolve to a hostname.  When creating  VLAN Interfaces  in IXP Manager there is a field called  IPv[4/6] Hostname . This is intended for this DNS ARPA purpose. Some customers have specific requirements for these while other smaller customers may not fully understand the use cases. At INEX, we typically default to entries such as:   customer-name.v4.example.com  (where  example.com  would be  inex.ie  in our case)  customer-name.v6.example.com   IXP Manager  can generate your ARPA DNS entries for your peering IP space as per the hostnames configured on each VLAN interface and provide them in two ways:   as JSON;  as text based on a template (IXP Manager comes with a  ISC Bind  format example)   Both of these are explained below.  Note that the API endpoints below can be tested in your browser by directly accessing the URLs  when logged in . Otherwise, you need an  API key  when using them in scripts.", 
            "title": "DNS / ARPA"
        }, 
        {
            "location": "/features/dns-arpa/#as-json", 
            "text": "You can use the  IXP Manager  API to get all ARPA entries for a given VLAN and protocol as a JSON object using the following endpoint format:  https://ixp.example.com/api/v4/dns/arpa/{vlanid}/{protocol}  where:   vlanid  is the database ID ( DB ID ) of the VLAN. You can find the DB ID in IXP Manager in the VLAN table (select  VLANs  from the left hand side menu).  protocol  is either  4  for IPv4 or 6 for  IPv6 .   If either of these are invalid, the API will return with a HTTP 404 response.  And example of the JSON response returned is:  [ \n     { \n         enabled :   true , \n         address :   192.0.2.67 , \n         hostname :   cherrie.example.com , \n         arpa :   67.2.0.192.in-addr.arpa. \n     }, \n     ...  ]   where:   enabled  indicates if the protocol has been enabled for this user. This is nearly always true. A situation where it may be false is if you enabled IPv6 for a user; then that user subsequently decided to not use IPv6; then you unchecked the  IPv6 Enabled  box in the VLAN Interface form without removing address / hostname entries.  address  - this IPv4/6 address of the VLAN interface as assigned by the IXP.  hostname  - the configured hostname for this address as entered into  IXP Manager .  arpa : the generated ARPA record name for the IP address assigned by the IXP.   You can now feed the JSON object into a script to create your own DNS zones appropriate to your DNS infrastructure.  When scripting, we would normally pull the JSON object using something like:  #! /usr/bin/env bash  KEY = your-ixp-manager-api-key  URL = https://ixp.example.com/api/v4/dns/arpa  VLANIDS = 1 2  PROTOCOLS = 4 6  for  v in  $VLANIDS ;   do \n     for  p in  $PROTOCOLS ;   do \n\n         cmd = /usr/local/bin/curl --fail -s             \\              -H \\ X-IXP-Manager-API-Key:  ${ KEY } \\        \\               ${ URL } / ${ v } / ${ p }                            \\                   /tmp/dns-arpa-vlanid $v -ipv $p .json. $$ \n         eval   $cmd \n\n         if   [[   $?  -ne  0   ]] ;   then \n             echo   ERROR: non-zero return from DNS ARPA API call for vlan ID  $v  with protocol  $p \n             continue \n         fi \n\n        //  do  something\n\n        rm /tmp/dns-arpa-vlanid $v -ipv $p .json. $$ \n     done  done", 
            "title": "As JSON"
        }, 
        {
            "location": "/features/dns-arpa/#from-templates", 
            "text": "Rather than writing your own scripts to consume the JSON object as above, it may be easier to use the bundled ISC Bind templates or to write your own template for IXP Manager.  You can use the  IXP Manager  API to get all ARPA entries for a given VLAN and protocol as plain text based on a template by using the following API endpoint:  https://ixp.example.com/api/v4/dns/arpa/{vlanid}/{protocol}/{template}  where:   vlanid  and  protocol  is as above in  As JSON .  template  is the name of a template file residing in the view path  api/v4/dns/ .   Remember that the included ISC Bind templates can be  skinned  or you can add custom templates to your skin directory. More detail on this can be found in the dedicated section below.  The bundled ISC Bind templates can be used by setting  {template}  to  bind  or  bind-full  in the above URL. For the example interface in the JSON above, the ISC Bind  bind  template would yield:  67.2.0.192.in-addr.arpa.       IN   PTR     cherrie.example.com.  (note that the terminated period on the hostname is added by the template)  The two bundled templates are:   bind : outputs resource records only as per the above example.  bind-full : outputs a complete Bind zone file including head and serialized serial number (UNIX timestamp). This must be templated as it uses  example.com  for email and name server domains.", 
            "title": "From Templates"
        }, 
        {
            "location": "/features/dns-arpa/#skinning-templating", 
            "text": "You can use  skinning  to make changes to the bundled ISC Bind template or add your own.  Let's say you wanted to add your own template called  mytemplate1  and your skin is named  myskin . The best way to proceed is to copy the bundled example:  cd   $IXPROOT \nmkdir -p resources/skins/myskin/api/v4/dns\ncp resources/views/api/v4/dns/bind.foil.php resources/skins/myskin/api/v4/dns/mytemplate1.foil.php  You can now edit this template as required. The only constraint on the template name is it can only contain characters from the classes  a-z, 0-9, - .  NB:  do not use uppercase characters.   Contribute back  - if you write a useful generator, please open a pull request and contribute it back to the project.   The following variables are available in the template:   $t- arpa : array of the ARPA entries - see below.  $t- vlan : instance of the  Vlan  entity object .  $t- protocol : either  4  or  6 .   The following variables are available for each element of the  $t- arpa  array (essentially the same as the JSON object above):  enabled, hostname, address, arpa . See above for a description.  The actual code in the bundled ISC Bind sample is as simple as:  ?php   foreach (   $t - arpa   as   $a   ) :   ?  ? =   trim ( $a [ arpa ])   ?     IN      PTR      ? =   trim ( $a [ hostname ])   ? .  ?php   endforeach ;   ?", 
            "title": "Skinning / Templating"
        }, 
        {
            "location": "/features/dns-arpa/#sample-script", 
            "text": "At INEX, we have (for example) one peering LAN that is a /25 IPv4 network and so is not a zone file in its own right. As such, we make up the zone file using includes. The main zone file looks like:  $TTL 86400\n\n$INCLUDE /usr/local/etc/namedb/zones/soa-0.2.192.in-addr.arpa.inc\n\n$INCLUDE zones/inex-dns-slave-nslist.inc\n\n$INCLUDE zones/reverse-mgmt-hosts-ipv4.include\n$INCLUDE zones/reverse-vlan-12-ipv4.include  The SOA file looks like (as you might expect):  @               IN      SOA     ns.example.come.     hostmaster.example.com. (\n                        2017051701      ; Serial\n                        43200           ; Refresh\n                        7200            ; Retry\n                        1209600         ; Expire\n                        7200 )          ; Minimum  The  reverse-vlan-12-ipv4.include  is the output of the ISC Bind  bind  template above for a given VLAN ID.  We use the sample script  update-dns-from-ixp-manager.sh  which can be found  in this directory  to keep this updated ourselves.", 
            "title": "Sample Script"
        }, 
        {
            "location": "/features/grapher/", 
            "text": "Grapher\n\uf0c1\n\n\nThe biggest new feature available at launch in IXP Manager v4 is a new graphing system called \nGrapher\n.\n\n\nGrapher\n is a complete rewrite of all previous graphing code and includes:\n\n\n\n\nAPI access to graphs and graph statistics\n\n\nmultiple backends (such as MRTG, sflow) with dynamic resolution of appropriate backend\n\n\nconfiguration generation where required\n\n\nconsistent and flexible OOP design\n\n\n\n\nTo date, we have developed the following reference backend implementations:\n\n\n\n\ndummy\n - a dummy grapher that just provides a placeholder graph for all possible graph types;\n\n\nmrtg\n - MRTG graphing using either the log or rrd backend. Use cases for MRTG are L2 interface statistics for bits / packets / errors / discards / broadcasts per second. Aggregate graphs for customer LAGs, overall customer traffic, all traffic over a switch / infrastructure / the entire IXP are all supported.\n\n\nsflow\n - while the MRTG backend looks at layer 2 statistics, sflow is used to provide layer 3 statistics such as per protocol (IPv4/6) graphs and peer to peer graphs.\n4.\nsmokeping\n - (available from v4.8.0) this replaces the previous way we used to access Smokeping graphs. See \nthe Smokeping documenation\n for more information.\n\n\n\n\nIn a typical production environment, you'd implement MRTG, Smokeping and sflow to provide the complete set of features.\n\n\nConfiguration\n\uf0c1\n\n\nThere is only a handful of configuration options required and a typical and complete \n$IXPROOT/.env\n would look like this:\n\n\nGRAPHER_BACKENDS=\nmrtg|sflow|smokeping\n\nGRAPHER_CACHE_ENABLED=true\n\nGRAPHER_BACKEND_MRTG_DBTYPE=\nrrd\n\nGRAPHER_BACKEND_MRTG_WORKDIR=\n/srv/mrtg\n\nGRAPHER_BACKEND_MRTG_LOGDIR=\n/srv/mrtg\n\n\nGRAPHER_BACKEND_SFLOW_ENABLED=true\nGRAPHER_BACKEND_SFLOW_ROOT=\nhttp://sflow-server.example.com/grapher-sflow\n\n\nGRAPHER_BACKEND_SMOKEPING_ENABLED=true\nGRAPHER_SMOKEPING_URL=\nhttp://smokeping-server.example.com/smokeping\n\n\n\n\n\n\nFor those interested, the complete Grapher configuration file can be seen in [\n$IXPROOT/config/grapher.php](https://github.com/inex/IXP-Manager/blob/master/config/grapher.php). Remember: put your own local changes in\n.env` rather than editing this file directly.\n\n\nThe global (non-backend specific) options are:\n\n\n\n\nGRAPHER_BACKENDS\n - in a typical production environment this would be \n\"mrtg|sflow|smokeping\"\n which means \ntry the MRTG backend first, then sflow and then smokeping\n. We ship with this set as \n\"dummy\"\n so you can see sample graphs working out of the box.\n\n\nGRAPHER_CACHE_ENABLED\n - the IXP industry standard for graphing is to graph at 5min intervals. With the cache enabled, IXP Manager does not have to regenerate / reload / reprocess log / rrd / image files if we have cached them and they are less than 5mins old. This is enabled by default which is the recommended setting.\n\n\n\n\nBackend specific configuration and set-up instructions can be found in their own sections below.\n\n\nGrapher Backends\n\uf0c1\n\n\nBackend: MRTG\n\uf0c1\n\n\nMRTG is a particularly efficient SNMP poller as, irrespective of how many times an interface is referenced for different graphs, it is only polled once per run. If you want to understand MRTG related options in this section, please refer to MRTG's own documenation: https://oss.oetiker.ch/mrtg/doc/mrtg.en.html\n\n\nPer-second graphs are generated for bits, packets, errors, discards and broadcasts at 5min intervals. IXP Manager's Grapher system can use MRTG to poll switches and create traffic graphs for:\n\n\n\n\nAggregate IXP and Infrastructure Graphs\n\n\n\n\nThe MRTG script creates aggregate graphs for the entire IXP as well as per-infrastructure graphs. These graphs are available from the \nStatistics\n menu under \nOverall Peering Graphs\n. Also, the graphs on the admin dashboard are the monthly versions of these and will appear on the dashboard when configured as above.\n\n\n\n\nSwitch Aggregate Graphs\n\n\n\n\nThese are defined and built automatically from the switches you have defined. These graphs are the aggregate of all peering ports. These graphs are available from the \nStatistics\n menu under \nSwitch Aggregate Graphs\n.\n\n\n\n\nInter-Switch / Trunk Graphs\n\n\n\n\nIXP Manager does not currently support a frontend means of creating these definitions (but, as of late 2017, it is being worked on). For now, we do it manually via the \nIXP Manager v3 way\n.\n\n\nThese graphs will be available in the \nStatistics\n menu under \nInter-Switch / PoP Graphs\n.\n\n\n\n\nCustomer Graphs\n\n\n\n\nMRTG creates per port, per LAG and aggregate graphs for each member / customer.\n\n\nMRTG Setup and Configuration\n\uf0c1\n\n\nYou need to install some basic packages for MRTG to work - on Ubuntu for example, install:\n\n\napt-get install rrdtool mrtg\n\n\n\n\n\nYou also need a folder to store all MRTG files. For example:\n\n\nmkdir -p /srv/mrtg\n\n\n\n\n\nIn your `.env, you need to set the following options:\n\n\n# The MRTG database type to use - either log or rrd:\nGRAPHER_BACKEND_MRTG_DBTYPE=\nrrd\n\n\n# Where to store log/rrd/png files as created above. This is from the perspective\n# of the mrtg daemon and it is only used when generating the mrtg configuration\n# file so this should be a local path on whatever server mrtg will run:\nGRAPHER_BACKEND_MRTG_WORKDIR=\n/srv/mrtg\n\n\n# Where IXP Manager can fine the GRAPHER_BACKEND_MRTG_WORKDIR above. If mrtg is\n# running on the same server as IXP Manager, this this would just be the same:\nGRAPHER_BACKEND_MRTG_LOGDIR=\n/srv/mrtg\n\n# Note that if you wish to run MRTG on another server, you can expose the\n# WORKDIR on a HTTP server and provide a URL to this option:\n# GRAPHER_BACKEND_MRTG_LOGDIR=\nhttp://collector.example.com/mrtg\n\n\n\n\n\n\nYou can now generate a MRTG configuration by executing a command such as:\n\n\n# Move to the directory where you have installed IXP Manager (typically: /srv/ixpmanager)\n\n\ncd\n \n$IXPROOT\n\n\n\n# Generate MRTG configuration and output to stdout:\n\n./artisan grapher:generate-configuration -B mrtg\n\n\n# Generate MRTG configuration and output to a named file:\n\n./artisan grapher:generate-configuration -B mrtg -O /tmp/mrtg.cfg.candidate\n\n\n\n\n\nYou could also combine a syntax check before putting the resultant file live. Here's a complete example that could be run via cron:\n\n\n#! /usr/bin/env bash\n\n\n\n# Set this to the directory where you have installed IXP Manager (typically: /srv/ixpmanager)\n\n\nIXPROOT\n=\n/srv/ixpmanager\n\n\n# Temporary configuration file:\n\n\nTMPCONF\n=\n/tmp/mrtg.cfg.\n$$\n\n\n\n# Synchronize configuration files\n\n\n${\nIXPROOT\n}\n/artisan grapher:generate-configuration -B mrtg -O \n$TMPCONF\n\n\n\n# Remove comments and date/time stamps for before comparing for differences\n\ncat /etc/mrtg.cfg    \n|\n egrep -v \n^#.*$\n \n|\n \n\\\n\n    egrep -v \n^[ ]+Based on configuration last generated by.*$\n \n/tmp/mrtg.cfg.filtered\ncat \n$TMPCONF\n         \n|\n egrep -v \n^#.*$\n \n|\n \n\\\n\n    egrep -v \n^[ ]+Based on configuration last generated by.*$\n \n${\nTMPCONF\n}\n.filtered\ndiff /tmp/mrtg.cfg.filtered \n${\nTMPCONF\n}\n.filtered \n/dev/null\n\nDIFF\n=\n$?\n\n\nrm /tmp/mrtg.cfg.filtered\nrm \n${\nTMPCONF\n}\n.filtered\n\n\nif\n \n[[\n \n$DIFF\n -eq \n0\n \n]]\n;\n \nthen\n\n    rm \n${\nTMPCONF\n}\n\n    \nexit \n0\n\nfi\n\n\n/usr/bin/mrtg --check \n${\nTMPCONF\n}\n \n /bin/mv \n${\nTMPCONF\n}\n /etc/mrtg.cfg\n\n\n\n\n\nIf your MRTG collector is on a different server, you could use a script such as the following to safely update MRTG via \nIXP Manager's API\n.\n\n\n#! /usr/bin/env bash\n\n\n\n# Temporary configuration file:\n\n\nTMPCONF\n=\n/etc/mrtg/mrtg.cfg.\n$$\n\n\n\n# Download the configuration via the API. Be sure to replace \nyour_api_key\n\n\n# with your actual API key (see API documenation).\n\ncurl --fail -s -H \nX-IXP-Manager-API-Key: your_api_key\n \n\\\n\n    https://ixp.example.com/api/v4/grapher/mrtg-config \n${\nTMPCONF\n}\n\n\n\nif\n \n[[\n \n$?\n -ne \n0\n \n]]\n;\n \nthen\n\n    \necho\n \nWARNING: COULD NOT FETCH UP TO DATE MRTG CONFIGURATION!\n\n    \nexit\n -1\n\nfi\n\n\n\ncd\n /etc/mrtg\n\n\n# Remove comments and date/time stamps for before comparing for differences\n\ncat mrtg.cfg    \n|\n egrep -v \n^#.*$\n \n|\n \n\\\n\n    egrep -v \n^[ ]+Based on configuration last generated by.*$\n \nmrtg.cfg.filtered\ncat \n${\nTMPCONF\n}\n  \n|\n egrep -v \n^#.*$\n \n|\n \n\\\n\n    egrep -v \n^[ ]+Based on configuration last generated by.*$\n \n${\nTMPCONF\n}\n.filtered\ndiff mrtg.cfg.filtered \n${\nTMPCONF\n}\n.filtered \n/dev/null\n\nDIFF\n=\n$?\n\n\nrm mrtg.cfg.filtered\nrm \n${\nTMPCONF\n}\n.filtered\n\n\nif\n \n[[\n \n$DIFF\n -eq \n0\n \n]]\n;\n \nthen\n\n    rm \n${\nTMPCONF\n}\n\n    \nexit \n0\n\nfi\n\n\n/usr/bin/mrtg --check \n${\nTMPCONF\n}\n \n /bin/mv \n${\nTMPCONF\n}\n /etc/mrtg/mrtg.cfg     \n\n\n\n\n\nNote that the MRTG configuration that IXP Manager generates instructs MRTG to run as a daemon. On FreeBSD, MRTG comes with an initd script by default and you can kick it off on boot with something like the following in \n/etc/rc.conf\n:\n\n\nmrtg_daemon_enable=\nYES\n\nmrtg_daemon_config=\n/etc/mrtg/mrtg.cfg\n\n\n\n\n\n\nHowever, on Ubuntu it does not but it comes with a \n/etc/cron.d/mrtg\n file which kicks it off every five minutes (it will daemonize the first time and further cron jobs will have no effect).\n\n\nTo start and stop it via standard initd scripts on Ubuntu, use an initd script such as this: \nubuntu-mrtg-initd\n  (\nsource\n):\n\n\ncp ${IXPROOT}/tools/runtime/mrtg/ubuntu-mrtg-initd /etc/init.d/mrtg\nchmod +x /etc/init.d/mrtg\nupdate-rc.d mrtg defaults\n/etc/init.d/mrtg start\n\n\n\n\n\nAnd disable the default cron job for MRTG on Ubuntu (\n/etc/cron.d/mrtg\n).\n\n\nImportant notes:\n\n\n\n\nIf you have difficulty getting MRTG to work, please also refer the MRTG documentation at https://oss.oetiker.ch/mrtg/doc/mrtg.en.html\n\n\nAny references to installing MRTG above are guidelines from our own experience. IXP Manager's role is to generate a configuration file for MRTG. It is up to the user to install MRTG as they deem appropriate.\n\n\nThe above assumes that MRTG automatically reconfigures itself when the configuration changes \nas stated in the MRTG documentation for \nRunAdDaemon\n. We have seen inconsistent behaviors for this and if it does not work for you, you will need to add a step to restart the MRTG daemon to the reconfiguration script above (at the very end).\n\n\nThe Ubuntu example above was a pre-systemd example. If anyone has an example of a systemd MRTG daemon configuration please provide us with some updated documentation.\n\n\n\n\nCustomising the Configuration\n\uf0c1\n\n\nGenerally speaking, you should not customize the way IXP Manager generates MRTG configuration as the naming conventions are tightly coupled to how IXP Manager fetches the graphs. However, if there are bits of the MRTG configuration you need to alter, you can do it via \nskinning\n. \nThe skinning documenation actually uses MRTG as an example.\n\n\nInserting Traffic Data Into the Database / Reporting Emails\n\uf0c1\n\n\nThe MRTG backend inserts daily summaries into MySQL for reporting. See the \ntraffic_daily\n database table for this. Essentially, there is a row per day per customer for traffic types \nbits, discards, errors, broadcasts and packets\n. Each row has a daily, weekly, monthly and yearly value for average, max and total.\n\n\nAn example crontab for collecting and storing \nyesterday's\n data is as follows. \nThis should run everyday.\n\n\n0 2   * * *   www-data        /srv/ixpmanager/artisan grapher:upload-stats-to-db\n\n\n\n\n\nIn the IXP Manager application, this data powers the \nLeague Table\n function on the left hand menu.\n\n\nThis data is also used to send email reports / notifications of various traffic events. A sample crontab for this would look like the following:\n\n\n0 4   * * *   www-data        /srv/ixpmanager/artisan grapher:email-traffic-deltas    \\\n                                --stddev=1.5 -v user1@example.com,user2@example.com\n\n30 10 * * tue www-data        /srv/ixpmanager/artisan grapher:email-port-utilisations \\\n                                --threshold=80 user1@example.com,user2@example.com\n\n31 10 * * *   www-data        /srv/ixpmanager/artisan grapher:email-ports-with-counts \\\n                                --discards user1@example.com,user2@example.com\n\n32 10 * * *   www-data        /srv/ixpmanager/artisan grapher:email-ports-with-counts \\\n                                --errors user1@example.com,user2@example.com\n\n\n\n\n\nWhich, in the order above, do:\n\n\n\n\nEmail a report of members whose average traffic has changed by more than 1.5 times their standard deviation.\n\n\nEmail a report of all ports with \n=80% utilisation yesterday.\n\n\nEmail a report of all ports with a non-zero discard count yesterday.\n\n\nEmail a report of all ports with a non-zero error count yesterday.\n\n\n\n\nThis generated emails are HTML formatted with embedded graph images.\n\n\nBackend: sflow\n\uf0c1\n\n\nDocumentation on sflow is being prepared for v4 but the \nv3 documentation is still available here\n.\n\n\nThe previous version of IXP Manager (\n4) used a script called \nsflow-graph.php\n which was installed on the sflow server to create graphs on demand. IXP Manager v4 does not use this but pulls the required RRD files directly.\n\n\nIf you have these on the same server (not typically recommended), then set the path accordingly in \n.env\n:\n\n\nGRAPHER_BACKEND_SFLOW_ROOT=\n/srv/ixpmatrix\n\n\n\n\n\n\nIf you have implemented this via a web server on a dedicated sflow server (as we typically do at INEX), then you need to expose the RRD data directory to IXP Manager using an Apache config such as:\n\n\nAlias /grapher-sflow /srv/ixpmatrix\n\n\nDirectory \n/srv/ixpmatrix\n\n    Options None\n    AllowOverride None\n    \nRequireAny\n\n            Require ip 192.0.2.0/24\n            Require ip 2001:db8::/32\n    \n/RequireAny\n\n\n/Directory\n\n\n\n\n\n\nand update \n.env\n for this with something like:\n\n\nGRAPHER_BACKEND_SFLOW_ROOT=\nhttp://www.example.com/grapher-sflow\n\n\n\n\n\n\nAccessibility of Aggregate Graphs\n\uf0c1\n\n\nBy default, the following graphs are \npublically\n accessible in \nIXP Manager\n and available through the top menu under \nStatistics\n:\n\n\n\n\naggregate bits and packets graphs for the IXP;\n\n\naggregate bits and packets graphs for the infrastructures;\n\n\naggregate graphs for the switches; and\n\n\naggregate graphs for the trunk connections.\n\n\n\n\nIf you wish to limit access to these to a \nless than or equal\n \nuser permission\n, see the \nconfig/grapher.php\n configuration file and set the following in \n.env\n appropriately:\n\n\n\n\nGRAPHER_ACCESS_IXP\n\n\nGRAPHER_ACCESS_INFRASTRUCTURE\n\n\nGRAPHER_ACCESS_SWITCH\n\n\nGRAPHER_ACCESS_TRUNK\n\n\n\n\nThe older Zend Framework templates will still show these options in the menu but these templates are beign agressivily phased out.\n\n\nAPI Access\n\uf0c1\n\n\nGrapher\n allows API access to graphs via a base URL of the form:\n\n\nhttps://ixp.example.com/grapher/{graph}[?id=x][\nperiod=x][\ntype=x][\ncategory=x] \\\n    [\nprotocol=x][\nbackend=x]\n\n\n\n\n\nHere's two quick examples from INEX's production system:\n\n\n\n\nAggregate exchange traffic options: \nhttps://www.inex.ie/ixp/grapher/ixp?id=1\ntype=json\n\n\nAggregate exchange traffic PNG: \nhttps://www.inex.ie/ixp/grapher/ixp\n (as you'll learn below, the defaults are \nid=1\ntype=png\n).\n\n\n\n\nA sample of the JSON output is:\n\n\n{\n\n    \nclass:\n \nixp\n,\n\n    \nurls:\n \n{\n\n        \npng:\n \nhttps://www.inex.ie/ixp/grapher/ixp?period=day\ntype=png\ncategory=bits\nprotocol=all\nid=1\n,\n\n        \nlog:\n \nhttps://www.inex.ie/ixp/grapher/ixp?period=day\ntype=log\ncategory=bits\nprotocol=all\nid=1\n,\n\n        \njson:\n \nhttps://www.inex.ie/ixp/grapher/ixp?period=day\ntype=json\ncategory=bits\nprotocol=all\nid=1\n\n    \n}\n,\n\n    \nbase_url:\n \nhttps://www.inex.ie/ixp/grapher/ixp\n,\n\n    \nstatistics:\n \n{\n\n        \ntotalin:\n \n13733441895899552,\n\n        \ntotalout:\n \n13734817210037696,\n\n        \ncurin:\n \n183970331392,\n\n        \ncurout:\n \n184222146544,\n\n        \naveragein:\n \n114930932321.55484,\n\n        \naverageout:\n \n114942441900.67783,\n\n        \nmaxin:\n \n204976886344,\n\n        \nmaxout:\n \n204800400448\n\n    \n}\n,\n\n    \nparams:\n \n{\n\n        \ntype:\n \njson\n,\n\n        \ncategory:\n \nbits\n,\n\n        \nperiod:\n \nday\n,\n\n        \nprotocol:\n \nall\n,\n\n        \nid:\n \n1\n\n    \n}\n,\n\n    \nsupports:\n \n{\n\n        \nprotocols:\n \n{\n\n            \nall:\n \nall\n\n        \n}\n,\n\n        \ncategories:\n \n{\n\n            \nbits:\n \nbits\n,\n\n            \npkts:\n \npkts\n\n        \n}\n,\n\n        \nperiods:\n \n{\n\n            \nday:\n \nday\n,\n\n            \nweek:\n \nweek\n,\n\n            \nmonth:\n \nmonth\n,\n\n            \nyear:\n \nyear\n\n        \n}\n,\n\n        \ntypes:\n \n{\n\n            \npng:\n \npng\n,\n\n            \nlog:\n \nlog\n,\n\n            \njson:\n \njson\n\n        \n}\n\n    \n},\n\n    \nbackends:\n \n{\n\n        \nmrtg:\n \nmrtg\n\n    \n}\n,\n\n    \nbackend:\n \nmrtg\n\n\n}\n\n\n\n\n\n\nYou can see from the above what \nparams\n were used to create the \nstatistics\n (and would be used for the image if \ntype=png\n), what parameters are supported (\nsupports\n), what backends are available for the given graph type and mix of parameters, etc.\n\n\nNotes:\n\n\n\n\nnot all backends support all options or graphs; use the \njson\n type to see what's supported \nbut remember that IXP Manager will, when configured correctly, chose the appropriate backend\n;\n\n\nthe primary key IDs mentioned below are mostly available in the UI when viewing lists of the relavent objects;\n\n\nan understanding of how IXP Manager represents interfaces is required to grasp the below - \nsee here\n.\n\n\n\n\nLet's first look at supported graphs:\n\n\n\n\n\n\nixp\n: aggregate graph for an IXP's overall traffic. \nid\n, which defaults to \n1\n, is the primary key of the IXP from the \nixp\n database table. As \nIXP Manager\n does not support multiple IXPs, this defaults to \nid=1\n. [Currently only supported via MRTG for \nprotocol=all\n]\n\n\n\n\n\n\ninfrastructure\n: aggregate graph for the overall traffic on a specific IXP infrastructure. For many IXPs, they'll just have a single infrastructure and this will go unused as it would be the equivalent of \nixp\n above. \nid\n, which is mandatory, is the primary key of the infrastructure from the \ninfrastructure\n database table. [Currently only supported via MRTG for \nprotocol=all\n]\n\n\n\n\n\n\nvlan\n: aggregate graph for a specific VLAN. \nid\n, which is mandatory, is the primary key of the VLAN from the \nvlan\n database table. [Currently only supported via sflow for \nprotocol=ipv4|ipv6\n]\n\n\n\n\n\n\nswitch\n: aggregate graph of all peering traffic being switched by a specific switch (sum of all customer ports plus core ports). \nid\n, which is mandatory, is the primary key of the switch from the \nswitch\n database table. [Currently only supported via MRTG for \nprotocol=all\n]\n\n\n\n\n\n\ntrunk\n: a legacy hold over from \nInter-Switch / Trunk Graphs\n above to be replaced with core bundles.\n\n\n\n\n\n\nphsyicalinterface\n: traffic for an individual member port - a single physical switch port. \nid\n, which is mandatory, is the primary key of the physical interface from the \nphysicalinterface\n database table. [Currently only supported via MRTG for \nprotocol=all\n]\n\n\n\n\n\n\nvirtualinterface\n: if a member has a single connection (one switch port) then this is the same as \nphsyicalinterface\n above. However, if they have a LAG port then it's the aggregate traffic for all physical ports in the LAG. \nid\n, which is mandatory, is the primary key of the virtual interface from the \nvirtualinterface\n database table. [Currently only supported via MRTG for \nprotocol=all\n]\n\n\n\n\n\n\ncustomer\n: the aggregate traffic for all ports belonging to a customer across all infrastructures. \nid\n, which is mandatory, is the primary key of the customer from the \ncust\n database table. [Currently only supported via MRTG for \nprotocol=all\n]\n\n\n\n\n\n\nvlaninterface\n: aggregate traffic flowing through a members VLAN interface for a specific protocol. \nid\n, which is mandatory, is the primary key of the VLAN interface from the \nvlaninterface\n database table. [Currently only supported via sflow for \nprotocol=ipv4|ipv6\n]\n\n\n\n\n\n\np2p\n: peer to peer traffic between two member VLAN interfaces. The source (\nsvli\n) and destination (\ndvli\n) VLAN interface IDs are required. \nsvli\n and \ndvli\n, which are mandatory, are primary keys of the VLAN interfaces from the \nvlaninterface\n database table. [Currently only supported via sflow for \nprotocol=ipv4|ipv6\n]\n\n\n\n\n\n\nFor additional options, it's always best to manually or programmatically examine the output for \ntype=json\n to see what is supported. The following is a general list.\n\n\n\n\n\n\ntype\n: one of:\n\n\n\n\njson\n - as demonstrated and described above;\n\n\nlog\n - MRTG  log file type output formatted as a JSON array;\n\n\nrrd\n - the RRD file for the requested graph type;\n\n\npng\n - the graph image itself (default).\n\n\npotentially others as supported / implemented by newer backends.\n\n\n\n\n\n\n\n\nperiod\n: one of \nday\n, \nweek\n, \nmonth\n, \nyear\n.\n\n\n\n\n\n\ncategory\n: one of \nbits\n, \npkts\n (packets), \nerrs\n (errors), \ndiscs\n (discards), \nbcasts\n (broadcasts). Bits is measured in bits per second, the rest in packets per second.\n\n\n\n\n\n\nprotocol\n: one of \nall\n, \nipv4\n or \nipv6\n.\n\n\n\n\n\n\nbackend\n: default is to let IXP Manager decide.\n\n\n\n\n\n\nAPI Access Control\n\uf0c1\n\n\nThe grapher API can be accessed using the \nstandard API access mechanisms\n.\n\n\nEach graph (ixp, infrastructure, etc.) has an \nauthorise()\n method which determines who is allowed view a graph. For example, see \nIXP\\Services\\Grapher\\Graph\\VlanInterface::authorise()\n. The general logic is:\n\n\n\n\nif not logged in / valid API key -\n deny\n\n\nif superuser -\n allow\n\n\nif user belongs to customer graph requested -\n allow\n\n\notherwise -\n deny and log\n\n\n\n\nFor the supported graph types, default access control is:\n\n\n\n\n\n\n\n\nGraph\n\n\nDefault Access Control\n\n\n\n\n\n\n\n\n\n\nixp\n\n\npublic but respects \nGRAPHER_ACCESS_IXP\n (see above)\n\n\n\n\n\n\ninfrastructure\n\n\npublic but respects \nGRAPHER_ACCESS_INFRASTRUCTURE\n (see above)\n\n\n\n\n\n\nvlan\n\n\npublic unless it's a private VLAN (in which case only superuser is supported currently)\n\n\n\n\n\n\nswitch\n\n\npublic but respects \nGRAPHER_ACCESS_SWITCH\n (see above)\n\n\n\n\n\n\ntrunk\n\n\npublic but respects \nGRAPHER_ACCESS_TRUNK\n (see above)\n\n\n\n\n\n\nphysicalinterface\n\n\nsuperuser or user of the owning customer\n\n\n\n\n\n\nvlaninterface\n\n\nsuperuser or user of the owning customer\n\n\n\n\n\n\nvirtualinterface\n\n\nsuperuser or user of the owning customer\n\n\n\n\n\n\ncustomer\n\n\nsuperuser or user of the owning customer\n\n\n\n\n\n\np2p\n\n\nsuperuser or user of the source (\nsvli\n) owning customer", 
            "title": "Grapher"
        }, 
        {
            "location": "/features/grapher/#grapher", 
            "text": "The biggest new feature available at launch in IXP Manager v4 is a new graphing system called  Grapher .  Grapher  is a complete rewrite of all previous graphing code and includes:   API access to graphs and graph statistics  multiple backends (such as MRTG, sflow) with dynamic resolution of appropriate backend  configuration generation where required  consistent and flexible OOP design   To date, we have developed the following reference backend implementations:   dummy  - a dummy grapher that just provides a placeholder graph for all possible graph types;  mrtg  - MRTG graphing using either the log or rrd backend. Use cases for MRTG are L2 interface statistics for bits / packets / errors / discards / broadcasts per second. Aggregate graphs for customer LAGs, overall customer traffic, all traffic over a switch / infrastructure / the entire IXP are all supported.  sflow  - while the MRTG backend looks at layer 2 statistics, sflow is used to provide layer 3 statistics such as per protocol (IPv4/6) graphs and peer to peer graphs.\n4. smokeping  - (available from v4.8.0) this replaces the previous way we used to access Smokeping graphs. See  the Smokeping documenation  for more information.   In a typical production environment, you'd implement MRTG, Smokeping and sflow to provide the complete set of features.", 
            "title": "Grapher"
        }, 
        {
            "location": "/features/grapher/#configuration", 
            "text": "There is only a handful of configuration options required and a typical and complete  $IXPROOT/.env  would look like this:  GRAPHER_BACKENDS= mrtg|sflow|smokeping \nGRAPHER_CACHE_ENABLED=true\n\nGRAPHER_BACKEND_MRTG_DBTYPE= rrd \nGRAPHER_BACKEND_MRTG_WORKDIR= /srv/mrtg \nGRAPHER_BACKEND_MRTG_LOGDIR= /srv/mrtg \n\nGRAPHER_BACKEND_SFLOW_ENABLED=true\nGRAPHER_BACKEND_SFLOW_ROOT= http://sflow-server.example.com/grapher-sflow \n\nGRAPHER_BACKEND_SMOKEPING_ENABLED=true\nGRAPHER_SMOKEPING_URL= http://smokeping-server.example.com/smokeping   For those interested, the complete Grapher configuration file can be seen in [ $IXPROOT/config/grapher.php](https://github.com/inex/IXP-Manager/blob/master/config/grapher.php). Remember: put your own local changes in .env` rather than editing this file directly.  The global (non-backend specific) options are:   GRAPHER_BACKENDS  - in a typical production environment this would be  \"mrtg|sflow|smokeping\"  which means  try the MRTG backend first, then sflow and then smokeping . We ship with this set as  \"dummy\"  so you can see sample graphs working out of the box.  GRAPHER_CACHE_ENABLED  - the IXP industry standard for graphing is to graph at 5min intervals. With the cache enabled, IXP Manager does not have to regenerate / reload / reprocess log / rrd / image files if we have cached them and they are less than 5mins old. This is enabled by default which is the recommended setting.   Backend specific configuration and set-up instructions can be found in their own sections below.", 
            "title": "Configuration"
        }, 
        {
            "location": "/features/grapher/#grapher-backends", 
            "text": "", 
            "title": "Grapher Backends"
        }, 
        {
            "location": "/features/grapher/#backend-mrtg", 
            "text": "MRTG is a particularly efficient SNMP poller as, irrespective of how many times an interface is referenced for different graphs, it is only polled once per run. If you want to understand MRTG related options in this section, please refer to MRTG's own documenation: https://oss.oetiker.ch/mrtg/doc/mrtg.en.html  Per-second graphs are generated for bits, packets, errors, discards and broadcasts at 5min intervals. IXP Manager's Grapher system can use MRTG to poll switches and create traffic graphs for:   Aggregate IXP and Infrastructure Graphs   The MRTG script creates aggregate graphs for the entire IXP as well as per-infrastructure graphs. These graphs are available from the  Statistics  menu under  Overall Peering Graphs . Also, the graphs on the admin dashboard are the monthly versions of these and will appear on the dashboard when configured as above.   Switch Aggregate Graphs   These are defined and built automatically from the switches you have defined. These graphs are the aggregate of all peering ports. These graphs are available from the  Statistics  menu under  Switch Aggregate Graphs .   Inter-Switch / Trunk Graphs   IXP Manager does not currently support a frontend means of creating these definitions (but, as of late 2017, it is being worked on). For now, we do it manually via the  IXP Manager v3 way .  These graphs will be available in the  Statistics  menu under  Inter-Switch / PoP Graphs .   Customer Graphs   MRTG creates per port, per LAG and aggregate graphs for each member / customer.", 
            "title": "Backend: MRTG"
        }, 
        {
            "location": "/features/grapher/#mrtg-setup-and-configuration", 
            "text": "You need to install some basic packages for MRTG to work - on Ubuntu for example, install:  apt-get install rrdtool mrtg  You also need a folder to store all MRTG files. For example:  mkdir -p /srv/mrtg  In your `.env, you need to set the following options:  # The MRTG database type to use - either log or rrd:\nGRAPHER_BACKEND_MRTG_DBTYPE= rrd \n\n# Where to store log/rrd/png files as created above. This is from the perspective\n# of the mrtg daemon and it is only used when generating the mrtg configuration\n# file so this should be a local path on whatever server mrtg will run:\nGRAPHER_BACKEND_MRTG_WORKDIR= /srv/mrtg \n\n# Where IXP Manager can fine the GRAPHER_BACKEND_MRTG_WORKDIR above. If mrtg is\n# running on the same server as IXP Manager, this this would just be the same:\nGRAPHER_BACKEND_MRTG_LOGDIR= /srv/mrtg \n# Note that if you wish to run MRTG on another server, you can expose the\n# WORKDIR on a HTTP server and provide a URL to this option:\n# GRAPHER_BACKEND_MRTG_LOGDIR= http://collector.example.com/mrtg   You can now generate a MRTG configuration by executing a command such as:  # Move to the directory where you have installed IXP Manager (typically: /srv/ixpmanager)  cd   $IXPROOT  # Generate MRTG configuration and output to stdout: \n./artisan grapher:generate-configuration -B mrtg # Generate MRTG configuration and output to a named file: \n./artisan grapher:generate-configuration -B mrtg -O /tmp/mrtg.cfg.candidate  You could also combine a syntax check before putting the resultant file live. Here's a complete example that could be run via cron:  #! /usr/bin/env bash  # Set this to the directory where you have installed IXP Manager (typically: /srv/ixpmanager)  IXPROOT = /srv/ixpmanager # Temporary configuration file:  TMPCONF = /tmp/mrtg.cfg. $$  # Synchronize configuration files  ${ IXPROOT } /artisan grapher:generate-configuration -B mrtg -O  $TMPCONF  # Remove comments and date/time stamps for before comparing for differences \ncat /etc/mrtg.cfg     |  egrep -v  ^#.*$   |   \\ \n    egrep -v  ^[ ]+Based on configuration last generated by.*$   /tmp/mrtg.cfg.filtered\ncat  $TMPCONF           |  egrep -v  ^#.*$   |   \\ \n    egrep -v  ^[ ]+Based on configuration last generated by.*$   ${ TMPCONF } .filtered\ndiff /tmp/mrtg.cfg.filtered  ${ TMPCONF } .filtered  /dev/null DIFF = $? \n\nrm /tmp/mrtg.cfg.filtered\nrm  ${ TMPCONF } .filtered if   [[   $DIFF  -eq  0   ]] ;   then \n    rm  ${ TMPCONF } \n     exit  0 fi \n\n/usr/bin/mrtg --check  ${ TMPCONF }    /bin/mv  ${ TMPCONF }  /etc/mrtg.cfg  If your MRTG collector is on a different server, you could use a script such as the following to safely update MRTG via  IXP Manager's API .  #! /usr/bin/env bash  # Temporary configuration file:  TMPCONF = /etc/mrtg/mrtg.cfg. $$  # Download the configuration via the API. Be sure to replace  your_api_key  # with your actual API key (see API documenation). \ncurl --fail -s -H  X-IXP-Manager-API-Key: your_api_key   \\ \n    https://ixp.example.com/api/v4/grapher/mrtg-config  ${ TMPCONF }  if   [[   $?  -ne  0   ]] ;   then \n     echo   WARNING: COULD NOT FETCH UP TO DATE MRTG CONFIGURATION! \n     exit  -1 fi  cd  /etc/mrtg # Remove comments and date/time stamps for before comparing for differences \ncat mrtg.cfg     |  egrep -v  ^#.*$   |   \\ \n    egrep -v  ^[ ]+Based on configuration last generated by.*$   mrtg.cfg.filtered\ncat  ${ TMPCONF }    |  egrep -v  ^#.*$   |   \\ \n    egrep -v  ^[ ]+Based on configuration last generated by.*$   ${ TMPCONF } .filtered\ndiff mrtg.cfg.filtered  ${ TMPCONF } .filtered  /dev/null DIFF = $? \n\nrm mrtg.cfg.filtered\nrm  ${ TMPCONF } .filtered if   [[   $DIFF  -eq  0   ]] ;   then \n    rm  ${ TMPCONF } \n     exit  0 fi \n\n/usr/bin/mrtg --check  ${ TMPCONF }    /bin/mv  ${ TMPCONF }  /etc/mrtg/mrtg.cfg       Note that the MRTG configuration that IXP Manager generates instructs MRTG to run as a daemon. On FreeBSD, MRTG comes with an initd script by default and you can kick it off on boot with something like the following in  /etc/rc.conf :  mrtg_daemon_enable= YES \nmrtg_daemon_config= /etc/mrtg/mrtg.cfg   However, on Ubuntu it does not but it comes with a  /etc/cron.d/mrtg  file which kicks it off every five minutes (it will daemonize the first time and further cron jobs will have no effect).  To start and stop it via standard initd scripts on Ubuntu, use an initd script such as this:  ubuntu-mrtg-initd   ( source ):  cp ${IXPROOT}/tools/runtime/mrtg/ubuntu-mrtg-initd /etc/init.d/mrtg\nchmod +x /etc/init.d/mrtg\nupdate-rc.d mrtg defaults\n/etc/init.d/mrtg start  And disable the default cron job for MRTG on Ubuntu ( /etc/cron.d/mrtg ).  Important notes:   If you have difficulty getting MRTG to work, please also refer the MRTG documentation at https://oss.oetiker.ch/mrtg/doc/mrtg.en.html  Any references to installing MRTG above are guidelines from our own experience. IXP Manager's role is to generate a configuration file for MRTG. It is up to the user to install MRTG as they deem appropriate.  The above assumes that MRTG automatically reconfigures itself when the configuration changes  as stated in the MRTG documentation for  RunAdDaemon . We have seen inconsistent behaviors for this and if it does not work for you, you will need to add a step to restart the MRTG daemon to the reconfiguration script above (at the very end).  The Ubuntu example above was a pre-systemd example. If anyone has an example of a systemd MRTG daemon configuration please provide us with some updated documentation.", 
            "title": "MRTG Setup and Configuration"
        }, 
        {
            "location": "/features/grapher/#customising-the-configuration", 
            "text": "Generally speaking, you should not customize the way IXP Manager generates MRTG configuration as the naming conventions are tightly coupled to how IXP Manager fetches the graphs. However, if there are bits of the MRTG configuration you need to alter, you can do it via  skinning .  The skinning documenation actually uses MRTG as an example.", 
            "title": "Customising the Configuration"
        }, 
        {
            "location": "/features/grapher/#inserting-traffic-data-into-the-database-reporting-emails", 
            "text": "The MRTG backend inserts daily summaries into MySQL for reporting. See the  traffic_daily  database table for this. Essentially, there is a row per day per customer for traffic types  bits, discards, errors, broadcasts and packets . Each row has a daily, weekly, monthly and yearly value for average, max and total.  An example crontab for collecting and storing  yesterday's  data is as follows.  This should run everyday.  0 2   * * *   www-data        /srv/ixpmanager/artisan grapher:upload-stats-to-db  In the IXP Manager application, this data powers the  League Table  function on the left hand menu.  This data is also used to send email reports / notifications of various traffic events. A sample crontab for this would look like the following:  0 4   * * *   www-data        /srv/ixpmanager/artisan grapher:email-traffic-deltas    \\\n                                --stddev=1.5 -v user1@example.com,user2@example.com\n\n30 10 * * tue www-data        /srv/ixpmanager/artisan grapher:email-port-utilisations \\\n                                --threshold=80 user1@example.com,user2@example.com\n\n31 10 * * *   www-data        /srv/ixpmanager/artisan grapher:email-ports-with-counts \\\n                                --discards user1@example.com,user2@example.com\n\n32 10 * * *   www-data        /srv/ixpmanager/artisan grapher:email-ports-with-counts \\\n                                --errors user1@example.com,user2@example.com  Which, in the order above, do:   Email a report of members whose average traffic has changed by more than 1.5 times their standard deviation.  Email a report of all ports with  =80% utilisation yesterday.  Email a report of all ports with a non-zero discard count yesterday.  Email a report of all ports with a non-zero error count yesterday.   This generated emails are HTML formatted with embedded graph images.", 
            "title": "Inserting Traffic Data Into the Database / Reporting Emails"
        }, 
        {
            "location": "/features/grapher/#backend-sflow", 
            "text": "Documentation on sflow is being prepared for v4 but the  v3 documentation is still available here .  The previous version of IXP Manager ( 4) used a script called  sflow-graph.php  which was installed on the sflow server to create graphs on demand. IXP Manager v4 does not use this but pulls the required RRD files directly.  If you have these on the same server (not typically recommended), then set the path accordingly in  .env :  GRAPHER_BACKEND_SFLOW_ROOT= /srv/ixpmatrix   If you have implemented this via a web server on a dedicated sflow server (as we typically do at INEX), then you need to expose the RRD data directory to IXP Manager using an Apache config such as:  Alias /grapher-sflow /srv/ixpmatrix Directory  /srv/ixpmatrix \n    Options None\n    AllowOverride None\n     RequireAny \n            Require ip 192.0.2.0/24\n            Require ip 2001:db8::/32\n     /RequireAny  /Directory   and update  .env  for this with something like:  GRAPHER_BACKEND_SFLOW_ROOT= http://www.example.com/grapher-sflow", 
            "title": "Backend: sflow"
        }, 
        {
            "location": "/features/grapher/#accessibility-of-aggregate-graphs", 
            "text": "By default, the following graphs are  publically  accessible in  IXP Manager  and available through the top menu under  Statistics :   aggregate bits and packets graphs for the IXP;  aggregate bits and packets graphs for the infrastructures;  aggregate graphs for the switches; and  aggregate graphs for the trunk connections.   If you wish to limit access to these to a  less than or equal   user permission , see the  config/grapher.php  configuration file and set the following in  .env  appropriately:   GRAPHER_ACCESS_IXP  GRAPHER_ACCESS_INFRASTRUCTURE  GRAPHER_ACCESS_SWITCH  GRAPHER_ACCESS_TRUNK   The older Zend Framework templates will still show these options in the menu but these templates are beign agressivily phased out.", 
            "title": "Accessibility of Aggregate Graphs"
        }, 
        {
            "location": "/features/grapher/#api-access", 
            "text": "Grapher  allows API access to graphs via a base URL of the form:  https://ixp.example.com/grapher/{graph}[?id=x][ period=x][ type=x][ category=x] \\\n    [ protocol=x][ backend=x]  Here's two quick examples from INEX's production system:   Aggregate exchange traffic options:  https://www.inex.ie/ixp/grapher/ixp?id=1 type=json  Aggregate exchange traffic PNG:  https://www.inex.ie/ixp/grapher/ixp  (as you'll learn below, the defaults are  id=1 type=png ).   A sample of the JSON output is:  { \n     class:   ixp , \n     urls:   { \n         png:   https://www.inex.ie/ixp/grapher/ixp?period=day type=png category=bits protocol=all id=1 , \n         log:   https://www.inex.ie/ixp/grapher/ixp?period=day type=log category=bits protocol=all id=1 , \n         json:   https://www.inex.ie/ixp/grapher/ixp?period=day type=json category=bits protocol=all id=1 \n     } , \n     base_url:   https://www.inex.ie/ixp/grapher/ixp , \n     statistics:   { \n         totalin:   13733441895899552, \n         totalout:   13734817210037696, \n         curin:   183970331392, \n         curout:   184222146544, \n         averagein:   114930932321.55484, \n         averageout:   114942441900.67783, \n         maxin:   204976886344, \n         maxout:   204800400448 \n     } , \n     params:   { \n         type:   json , \n         category:   bits , \n         period:   day , \n         protocol:   all , \n         id:   1 \n     } , \n     supports:   { \n         protocols:   { \n             all:   all \n         } , \n         categories:   { \n             bits:   bits , \n             pkts:   pkts \n         } , \n         periods:   { \n             day:   day , \n             week:   week , \n             month:   month , \n             year:   year \n         } , \n         types:   { \n             png:   png , \n             log:   log , \n             json:   json \n         } \n     }, \n     backends:   { \n         mrtg:   mrtg \n     } , \n     backend:   mrtg  }   You can see from the above what  params  were used to create the  statistics  (and would be used for the image if  type=png ), what parameters are supported ( supports ), what backends are available for the given graph type and mix of parameters, etc.  Notes:   not all backends support all options or graphs; use the  json  type to see what's supported  but remember that IXP Manager will, when configured correctly, chose the appropriate backend ;  the primary key IDs mentioned below are mostly available in the UI when viewing lists of the relavent objects;  an understanding of how IXP Manager represents interfaces is required to grasp the below -  see here .   Let's first look at supported graphs:    ixp : aggregate graph for an IXP's overall traffic.  id , which defaults to  1 , is the primary key of the IXP from the  ixp  database table. As  IXP Manager  does not support multiple IXPs, this defaults to  id=1 . [Currently only supported via MRTG for  protocol=all ]    infrastructure : aggregate graph for the overall traffic on a specific IXP infrastructure. For many IXPs, they'll just have a single infrastructure and this will go unused as it would be the equivalent of  ixp  above.  id , which is mandatory, is the primary key of the infrastructure from the  infrastructure  database table. [Currently only supported via MRTG for  protocol=all ]    vlan : aggregate graph for a specific VLAN.  id , which is mandatory, is the primary key of the VLAN from the  vlan  database table. [Currently only supported via sflow for  protocol=ipv4|ipv6 ]    switch : aggregate graph of all peering traffic being switched by a specific switch (sum of all customer ports plus core ports).  id , which is mandatory, is the primary key of the switch from the  switch  database table. [Currently only supported via MRTG for  protocol=all ]    trunk : a legacy hold over from  Inter-Switch / Trunk Graphs  above to be replaced with core bundles.    phsyicalinterface : traffic for an individual member port - a single physical switch port.  id , which is mandatory, is the primary key of the physical interface from the  physicalinterface  database table. [Currently only supported via MRTG for  protocol=all ]    virtualinterface : if a member has a single connection (one switch port) then this is the same as  phsyicalinterface  above. However, if they have a LAG port then it's the aggregate traffic for all physical ports in the LAG.  id , which is mandatory, is the primary key of the virtual interface from the  virtualinterface  database table. [Currently only supported via MRTG for  protocol=all ]    customer : the aggregate traffic for all ports belonging to a customer across all infrastructures.  id , which is mandatory, is the primary key of the customer from the  cust  database table. [Currently only supported via MRTG for  protocol=all ]    vlaninterface : aggregate traffic flowing through a members VLAN interface for a specific protocol.  id , which is mandatory, is the primary key of the VLAN interface from the  vlaninterface  database table. [Currently only supported via sflow for  protocol=ipv4|ipv6 ]    p2p : peer to peer traffic between two member VLAN interfaces. The source ( svli ) and destination ( dvli ) VLAN interface IDs are required.  svli  and  dvli , which are mandatory, are primary keys of the VLAN interfaces from the  vlaninterface  database table. [Currently only supported via sflow for  protocol=ipv4|ipv6 ]    For additional options, it's always best to manually or programmatically examine the output for  type=json  to see what is supported. The following is a general list.    type : one of:   json  - as demonstrated and described above;  log  - MRTG  log file type output formatted as a JSON array;  rrd  - the RRD file for the requested graph type;  png  - the graph image itself (default).  potentially others as supported / implemented by newer backends.     period : one of  day ,  week ,  month ,  year .    category : one of  bits ,  pkts  (packets),  errs  (errors),  discs  (discards),  bcasts  (broadcasts). Bits is measured in bits per second, the rest in packets per second.    protocol : one of  all ,  ipv4  or  ipv6 .    backend : default is to let IXP Manager decide.", 
            "title": "API Access"
        }, 
        {
            "location": "/features/grapher/#api-access-control", 
            "text": "The grapher API can be accessed using the  standard API access mechanisms .  Each graph (ixp, infrastructure, etc.) has an  authorise()  method which determines who is allowed view a graph. For example, see  IXP\\Services\\Grapher\\Graph\\VlanInterface::authorise() . The general logic is:   if not logged in / valid API key -  deny  if superuser -  allow  if user belongs to customer graph requested -  allow  otherwise -  deny and log   For the supported graph types, default access control is:     Graph  Default Access Control      ixp  public but respects  GRAPHER_ACCESS_IXP  (see above)    infrastructure  public but respects  GRAPHER_ACCESS_INFRASTRUCTURE  (see above)    vlan  public unless it's a private VLAN (in which case only superuser is supported currently)    switch  public but respects  GRAPHER_ACCESS_SWITCH  (see above)    trunk  public but respects  GRAPHER_ACCESS_TRUNK  (see above)    physicalinterface  superuser or user of the owning customer    vlaninterface  superuser or user of the owning customer    virtualinterface  superuser or user of the owning customer    customer  superuser or user of the owning customer    p2p  superuser or user of the source ( svli ) owning customer", 
            "title": "API Access Control"
        }, 
        {
            "location": "/features/helpdesk/", 
            "text": "Helpdesk Integration\n\uf0c1\n\n\n WORK IN PROGRESS - DEVELOPMENT NOTES \n\n\nAs an IXP scales, it will eventually have to replace email support via a simple alias / shared IMAP mailbox with a \nproper\n ticketing system. After extensive (and painful!) research, we at INEX chose \nZendesk\n as the system that most matched our budget and required features (1).\n\n\nWhile your mileage may vary on this - or you may already have something else - please note that the reference implementation for helpdesk integration on IXP Manager is Zendesk. So, if you haven't already chosen one, Zendesk will provide maximum integration with minimal pain.\n\n\n\n\nPlease do not open a feature request for other helpdesk implementations as the authors cannot undertake such additional work. If you wish to have integration with another helpdesk implemented, please consider \ncommercial support\n\n\n\n\nFeatures Supported\n\uf0c1\n\n\nIXP Manager currently supports:\n\n\n\n\ncreation and update of customers / organisations in Zendesk\n\n\ncreation and update of contacts / users in Zendesk\n\n\nfinding tickets by customer / organisation\n\n\n\n\nWork that is in progress includes:\n\n\n\n\nallow users to create, update and close tickets in IXP Manager\n\n\nlist all tickets per organisation (for admins and users)\n\n\n\n\nConfiguration\n\uf0c1\n\n\nAs Zendesk is the only implementation currently, this refers only to Zendesk.\n\n\nZendesk\n\uf0c1\n\n\nYou need to enable API access to Zendesk as follows:\n\n\n\n\nLog into your Zendesk account\n\n\nOn the bottom left, click the Settings icon\n\n\nUnder \nChannels\n select \nAPI\n\n\nEnable the API here and add a token\n\n\n\n\nWith your Zendesk login and the token from above, edit the \n.env\n file in the base directory of IXP Manager and set:\n\n\nHELPDESK_BACKEND=zendesk\nHELPDESK_ZENDESK_SUBDOMAIN=ixp\nHELPDESK_ZENDESK_TOKEN=yyy\nHELPDESK_ZENDESK_EMAIL=john.doe@example.com\n\n\n\n\n\nYou can now test that your settings are correct with: \nFIXME\n\n\nImplementation Development\n\uf0c1\n\n\nThe helpdesk implementation in IXP Manager is designed using contracts and service providers. I.e. it is done \nThe Right Way (tm)\n.\n\n\nThe reference implementation is for Zendesk but it's coded to a contract (interface) at \napp/Contracts/Helpdesk.php\n.\n\n\nThe actual Zendesk implementation can be found at: \napp/Services/Helpdesk/Zendesk.php\n.\n\n\nThe good news here is if you want another helpdesk supported, you just need to:\n\n\n\n\ncreate an implementation like the Zendesk one above\n\n\nupdate the \nswitch()\n statement in \napp/Providers/HelpdeskServiceProvider.php\n\n\nopen a pull request for IXP Manager and this documentation\n\n\n\n\n(1) Actually, Zendesk wasn't our first ticketing system. For a number of years we used \nCerb\n but it didn't stay current in terms of modern HTML UI/UX and it suffered from feature bloat. One requirement for our replacement was a decent API and with Zendesk's API we were able to migrate all our old tickets \nusing this script\n.", 
            "title": "Helpdesk Integration"
        }, 
        {
            "location": "/features/helpdesk/#helpdesk-integration", 
            "text": "WORK IN PROGRESS - DEVELOPMENT NOTES   As an IXP scales, it will eventually have to replace email support via a simple alias / shared IMAP mailbox with a  proper  ticketing system. After extensive (and painful!) research, we at INEX chose  Zendesk  as the system that most matched our budget and required features (1).  While your mileage may vary on this - or you may already have something else - please note that the reference implementation for helpdesk integration on IXP Manager is Zendesk. So, if you haven't already chosen one, Zendesk will provide maximum integration with minimal pain.   Please do not open a feature request for other helpdesk implementations as the authors cannot undertake such additional work. If you wish to have integration with another helpdesk implemented, please consider  commercial support", 
            "title": "Helpdesk Integration"
        }, 
        {
            "location": "/features/helpdesk/#features-supported", 
            "text": "IXP Manager currently supports:   creation and update of customers / organisations in Zendesk  creation and update of contacts / users in Zendesk  finding tickets by customer / organisation   Work that is in progress includes:   allow users to create, update and close tickets in IXP Manager  list all tickets per organisation (for admins and users)", 
            "title": "Features Supported"
        }, 
        {
            "location": "/features/helpdesk/#configuration", 
            "text": "As Zendesk is the only implementation currently, this refers only to Zendesk.", 
            "title": "Configuration"
        }, 
        {
            "location": "/features/helpdesk/#zendesk", 
            "text": "You need to enable API access to Zendesk as follows:   Log into your Zendesk account  On the bottom left, click the Settings icon  Under  Channels  select  API  Enable the API here and add a token   With your Zendesk login and the token from above, edit the  .env  file in the base directory of IXP Manager and set:  HELPDESK_BACKEND=zendesk\nHELPDESK_ZENDESK_SUBDOMAIN=ixp\nHELPDESK_ZENDESK_TOKEN=yyy\nHELPDESK_ZENDESK_EMAIL=john.doe@example.com  You can now test that your settings are correct with:  FIXME", 
            "title": "Zendesk"
        }, 
        {
            "location": "/features/helpdesk/#implementation-development", 
            "text": "The helpdesk implementation in IXP Manager is designed using contracts and service providers. I.e. it is done  The Right Way (tm) .  The reference implementation is for Zendesk but it's coded to a contract (interface) at  app/Contracts/Helpdesk.php .  The actual Zendesk implementation can be found at:  app/Services/Helpdesk/Zendesk.php .  The good news here is if you want another helpdesk supported, you just need to:   create an implementation like the Zendesk one above  update the  switch()  statement in  app/Providers/HelpdeskServiceProvider.php  open a pull request for IXP Manager and this documentation   (1) Actually, Zendesk wasn't our first ticketing system. For a number of years we used  Cerb  but it didn't stay current in terms of modern HTML UI/UX and it suffered from feature bloat. One requirement for our replacement was a decent API and with Zendesk's API we were able to migrate all our old tickets  using this script .", 
            "title": "Implementation Development"
        }, 
        {
            "location": "/features/irrdb/", 
            "text": "IRRDB Prefixes and ASN Filtering\n\uf0c1\n\n\n\n\nPrerequisite Reading:\n Ensure you first familiarize yourself with \nthe generic documentation on managing and generating router configurations here\n.\n\n\n\n\nIXP Manager can maintain a list of member route:/route6: prefixes and origin ASNs as registered in IRRDBs in its database and then use these to, for example, generate strict inbound filters on route servers.\n\n\nSetup\n\uf0c1\n\n\nYou need to have set up some IRRDB sources (e.g. RIPE's whois service) under the \nIXP Admin Actions / IRRDB Configuration\n on the left hand side menu. If this wasn't done as part of an upgrade from v3 / your initial installation then there is a database seeder you can use to install some to start you off:\n\n\ncd\n \n$IXPROOT\n\n./artisan db:seed --class\n=\nIRRDBs\n\n\n\n\n\nBGPQ3\n is a very easy and fast way of querying IRRDBs. You first need to install this on your system. On Ubuntu 16.04 this is as easy as:\n\n\napt install bgpq3\n\n\n\n\n\nThen configure the path to it in \nconfig/ixp_tools.php\n. If you have not used this file before, you'll need to create your own local copy as follows:\n\n\ncp config/config/ixp_tools.php.dist config/config/ixp_tools.php\n\n\n\n\n\nThen set the full call path for \nbgpq3\n in this file:\n\n\n?php\n\n\n  \nirrdb\n \n=\n \n[\n\n        \nbgpq\n \n=\n \n[\n\n            \npath\n \n=\n \n/path/to/bgpq3\n,\n\n        \n],\n\n    \n],\n\n\n\n\n\n\nUsage\n\uf0c1\n\n\nTo populate (and update) your local IRRDB, run the following commands:\n\n\ncd $IXPROOT\nphp artisan irrdb:update-prefix-db\nphp artisan irrdb:update-asn-db\n\n\n\n\n\nThese should be added to cron to run ~once per day (using the --quiet flag).\n\n\nThere are four levels of verbosity:\n\n\n\n\n--quiet\n: no output unless there's an error / issue.\n\n\nno option: simple stats on each customer's update results.\n\n\n-vv\n: include per customer and overall timings (database, processing and network).\n\n\n-vvv\n (debug): show prefixes/ASNs added remove also.\n\n\n\n\nYou can also specify a specific customer to update (rather than all) with an additional free form parameter. The database is searched for a matching customer in the order: customer ASN; customer ID (database primary key); and customer shortname. E.g.:\n\n\nphp artisan irrdb:update-prefix-db 64511\n\n\n\n\n\nInternal Workings\n\uf0c1\n\n\nEssentially, based on a customers AS number / IPv4/6 Peering Macro, IXP Manager \nuses bgpq3\n to query IRRDBs as follows:\n\n\nbgpq3 -h \n$whois_server\n -S \n$sources\n -l pl -j \n[\n-6\n]\n \n$asn\n/macro\n\n\n\n\n\nwhere \n$whois_server\n and \n$sources\n come from the IRRDB sources entries.\n\n\nOr, a real example:\n\n\nbgpq3 -h whois.radb.net -S RIPE -l pl -j AS-BTIRE\nbgpq3 -h whois.radb.net -S RIPE -l pl -j -6 AS-BTIRE\n\n\n\n\n\nDetails\n\uf0c1\n\n\nThe IRRDB update commands will:\n\n\n\n\niterate over all route server client customers for IPv4 and IPv6 (unless a specific customer is specified);\n\n\nuse the appropriate AS macro or ASN;\n\n\nquery the RADB against the appropriate source set for that customer;\n\n\ncompare prefixes(/ASNs) in the database already (if any) against RADB and insert / delete as appropriate;\n\n\nvalidate the prefix for proper CIDR notation before database inserts;\n\n\nupdate the last_seen time for all prefixes(/ASNs) for that customer;\n\n\n\n\nWe use transactions to update the database so, even in the middle of a refresh, a full set of prefixes for all customers will still be available.\n It also means the update process can be safely interrupted.\n\n\nNote that our current implementation only queries RADB as BGPQ3 does not support the RIPE whois protocol.\n Our version will however set the RADB source database according to the member's stated IRRDB database as set on the customer add / edit page - so, for customer's registered with the RIPE IRRDB, the RIPE database of RADB is queried.", 
            "title": "IRRDB"
        }, 
        {
            "location": "/features/irrdb/#irrdb-prefixes-and-asn-filtering", 
            "text": "Prerequisite Reading:  Ensure you first familiarize yourself with  the generic documentation on managing and generating router configurations here .   IXP Manager can maintain a list of member route:/route6: prefixes and origin ASNs as registered in IRRDBs in its database and then use these to, for example, generate strict inbound filters on route servers.", 
            "title": "IRRDB Prefixes and ASN Filtering"
        }, 
        {
            "location": "/features/irrdb/#setup", 
            "text": "You need to have set up some IRRDB sources (e.g. RIPE's whois service) under the  IXP Admin Actions / IRRDB Configuration  on the left hand side menu. If this wasn't done as part of an upgrade from v3 / your initial installation then there is a database seeder you can use to install some to start you off:  cd   $IXPROOT \n./artisan db:seed --class = IRRDBs  BGPQ3  is a very easy and fast way of querying IRRDBs. You first need to install this on your system. On Ubuntu 16.04 this is as easy as:  apt install bgpq3  Then configure the path to it in  config/ixp_tools.php . If you have not used this file before, you'll need to create your own local copy as follows:  cp config/config/ixp_tools.php.dist config/config/ixp_tools.php  Then set the full call path for  bgpq3  in this file:  ?php \n\n   irrdb   =   [ \n         bgpq   =   [ \n             path   =   /path/to/bgpq3 , \n         ], \n     ],", 
            "title": "Setup"
        }, 
        {
            "location": "/features/irrdb/#usage", 
            "text": "To populate (and update) your local IRRDB, run the following commands:  cd $IXPROOT\nphp artisan irrdb:update-prefix-db\nphp artisan irrdb:update-asn-db  These should be added to cron to run ~once per day (using the --quiet flag).  There are four levels of verbosity:   --quiet : no output unless there's an error / issue.  no option: simple stats on each customer's update results.  -vv : include per customer and overall timings (database, processing and network).  -vvv  (debug): show prefixes/ASNs added remove also.   You can also specify a specific customer to update (rather than all) with an additional free form parameter. The database is searched for a matching customer in the order: customer ASN; customer ID (database primary key); and customer shortname. E.g.:  php artisan irrdb:update-prefix-db 64511", 
            "title": "Usage"
        }, 
        {
            "location": "/features/irrdb/#internal-workings", 
            "text": "Essentially, based on a customers AS number / IPv4/6 Peering Macro, IXP Manager  uses bgpq3  to query IRRDBs as follows:  bgpq3 -h  $whois_server  -S  $sources  -l pl -j  [ -6 ]   $asn /macro  where  $whois_server  and  $sources  come from the IRRDB sources entries.  Or, a real example:  bgpq3 -h whois.radb.net -S RIPE -l pl -j AS-BTIRE\nbgpq3 -h whois.radb.net -S RIPE -l pl -j -6 AS-BTIRE", 
            "title": "Internal Workings"
        }, 
        {
            "location": "/features/irrdb/#details", 
            "text": "The IRRDB update commands will:   iterate over all route server client customers for IPv4 and IPv6 (unless a specific customer is specified);  use the appropriate AS macro or ASN;  query the RADB against the appropriate source set for that customer;  compare prefixes(/ASNs) in the database already (if any) against RADB and insert / delete as appropriate;  validate the prefix for proper CIDR notation before database inserts;  update the last_seen time for all prefixes(/ASNs) for that customer;   We use transactions to update the database so, even in the middle of a refresh, a full set of prefixes for all customers will still be available.  It also means the update process can be safely interrupted.  Note that our current implementation only queries RADB as BGPQ3 does not support the RIPE whois protocol.  Our version will however set the RADB source database according to the member's stated IRRDB database as set on the customer add / edit page - so, for customer's registered with the RIPE IRRDB, the RIPE database of RADB is queried.", 
            "title": "Details"
        }, 
        {
            "location": "/features/ixf-export/", 
            "text": "IX-F Member List Export\n\uf0c1\n\n\nThe \nIX-F Member Export\n is an agreed and standardized JSON schema which allows IXPs to make their member lists available for consumption by tools such as PeeringDB, networks with automated peering managers, prospective members and the many other tools appearing in the peering eco-system.\n\n\nThe key element of the IX-F Member Export is it makes you, the individual IXP, the canonical trusted source for data about \nyour own IXP\n. Data that is guaranteed to be correct and up to date.\n\n\nTo find out more about the JSON schema and see examples, you can \nexplore any of the public IXP end points available here\n or see the GitHub \neuro-ix/json-schemas\n repository.\n\n\nIXP Manager\n supports the IX-F Member List Export out of the box. It previously supported all versions from 0.3 to 0.5 but as of May 2017, we now only support 0.6 and 0.7. This is because these have become the stable common versions (as at time of writing, March 2018).\n\n\nSometimes you may need something more customised than the the IX-F Member Export. For that, see \nthe other member export feature\n if IXP Manager.\n\n\nAccessing the IX-F Member List\n\uf0c1\n\n\nIf your version of IXP Manager is installed at, say, \nhttps://ixp.example.com/\n, then the IX-F Member List export can be accessed at:\n\n\nhttps://ixp.example.com/api/v4/member-export/ixf/0.6\n\n\n\n\n\nwhere \n0.6\n is a version parameter which allows for support of potential future versions.\n\n\nNote that the publically accessable version does not include individiual member details such as name (ASN is provided), max prefixes, MAC addresses, contact email and phone, when the member joined, member's web address, peering policy, NOC website, NOC hours or member type. This information is available to any logged in users or users querying \nthe API with an API key\n.\n\n\nRegistering Your API Endpoint\n\uf0c1\n\n\nRegister your IX-F Member List export on the \nIXF Member List Directory Service\n at http://ml.ix-f.net/.\n\n\nConfiguration Options\n\uf0c1\n\n\nThere is only one configuration option presently available. To disable public access to the restricted member export, set the following in your \n.env\n file:\n\n\nIXP_API_JSONEXPORTSCHEMA_PUBLIC=false\n\n\n\n\n\nWe strongly advise you not to disable public access if you are a standard IXP.\n Remember, the public version is essentially the same list as you would provide on your standard website's list of members.\n\n\nIn addition, membership of an IXP is easily discernable from a number of other sources including:\n\n\n\n\nPeeringDB\n\n\nRoute collectors (your own, PCH, members\u2019 own, ...)\n\n\nLooking glasses\n\n\nTraceroutes (and tools such as: https://www.inex.ie/ard/ )\n\n\nRIPE RRC\u2019s / RIS, RIPE Atlas\n\n\nCommercial products (Noction, ...)\n\n\n\n\nLeave public access available, own your own data, ensure it's validy and advertise it!\n\n\nExample: Member Lists\n\uf0c1\n\n\nA common requirement of IXPs is to create a public member list on their official website. This can be done with the IX-F Member Export quite easily. The below HTML and JavaScript is a way to do it with INEX's endpoint. There's a \nlive JSFiddle which demonstrates this also\n - https://jsfiddle.net/barryo/2tzuypf9/ .\n\n\nThe HTML requires just a table with a placeholder and an \nid\n on the \nbody\n:\n\n\ntable\n \nclass=\ntable table-bordered\n \nstyle=\nmargin: 10px\n\n \nthead\n\n   \ntr\n\n     \nth\nCompany\n/th\n\n     \nth\nASN\n/th\n\n     \nth\nConnections\n/th\n\n   \n/tr\n\n \n/thead\n\n \ntbody\n \nid=\nlist-members\n\n     \ntr\n\n         \ntd\n \ncolspan=\n3\nPlease wait, loading...\n/td\n\n     \n/tr\n\n \n/tbody\n\n\n/table\n\n\n\n\n\n\nThe JavaScript loads the member list via the IX-F Export and processes it into the table above:\n\n\n// Sample IX-F Member Export to Member List script\n\n\n//\n\n\n// License: MIT (https://en.wikipedia.org/wiki/MIT_License)\n\n\n// By @yannrobin and @barryo\n\n\n// 2018-03-06\n\n\n\nfunction\n \nprettySpeeds\n(\n \ns\n \n)\n \n{\n\n        \nswitch\n(\n \ns\n \n)\n \n{\n\n            \ncase\n \n10\n:\n     \nreturn\n \n10Mb\n;\n\n            \ncase\n \n100\n:\n    \nreturn\n \n100Mb\n;\n\n            \ncase\n \n1000\n:\n   \nreturn\n \n1Gb\n;\n\n            \ncase\n \n10000\n:\n  \nreturn\n \n10Gb\n;\n\n            \ncase\n \n40000\n:\n  \nreturn\n \n40Gb\n;\n\n            \ncase\n \n100000\n:\n \nreturn\n \n100Gb\n;\n\n        \ndefault\n:\n     \nreturn\n \ns\n;\n\n    \n}\n\n\n}\n\n\n\n$\n.\ngetJSON\n(\n \nhttps://www.inex.ie/ixp/api/v4/member-export/ixf/0.7\n,\n \nfunction\n(\n \njson\n \n)\n \n{\n\n\n      \n// sort by name\n\n    \njson\n[\n \nmember_list\n \n].\nsort\n(\n \nfunction\n(\na\n,\n \nb\n)\n \n{\n\n        \nvar\n \nnameA\n \n=\n \na\n.\nname\n.\ntoUpperCase\n();\n \n// ignore upper and lowercase\n\n        \nvar\n \nnameB\n \n=\n \nb\n.\nname\n.\ntoUpperCase\n();\n \n// ignore upper and lowercase\n\n        \nif\n \n(\nnameA\n \n \nnameB\n)\n \n{\n\n          \nreturn\n \n-\n1\n;\n\n        \n}\n\n        \nif\n \n(\nnameA\n \n \nnameB\n)\n \n{\n\n          \nreturn\n \n1\n;\n\n        \n}\n\n        \n// names must be equal\n\n        \nreturn\n \n0\n;\n\n    \n});\n\n\n    \nlet\n \nhtml\n \n=\n \n;\n\n\n    \n$\n.\neach\n(\n \njson\n[\n \nmember_list\n \n],\n \nfunction\n(\ni\n,\n \nmember\n)\n \n{\n\n        \nhtml\n \n+=\n \n`\ntr\n\n                     \ntd\n\n                         \na\n \ntarget\n=\n_blank\n \nhref\n=\n${member.url}\n$\n{\nmember\n.\nname\n}\n/a\n\n                     \n/td\n\n                     \ntd\n\n                         \na\n \ntarget\n=\n_blank\n\n                             \nhref\n=\nhttp://www.ripe.net/perl/whois?searchtext=${member.asnum}\nform_type=simple\n\n                             \n$\n{\nmember\n.\nasnum\n}\n\n                         \n/a\n\n                     \n/td\n`;\n\n\n        \nlet\n \nconnection\n \n=\n \n;\n\n        \n$\n.\neach\n(\n \nmember\n[\n \nconnection_list\n \n],\n \nfunction\n(\ni\n,\n \nconn\n \n)\n \n{\n\n            \nif\n(\n \nconn\n[\n \nif_list\n \n].\nlength\n \n \n1\n \n){\n\n                  \nconnection\n \n+=\n \nconn\n[\n \nif_list\n \n].\nlength\n+\n \n*\n\n            \n}\n\n            \nconnection\n \n+=\n \nprettySpeeds\n(\n \nconn\n[\n \nif_list\n \n][\n0\n].\nif_speed\n \n);\n\n\n            \nif\n(\ni\n \n \n(\nmember\n[\n \nconnection_list\n \n].\nlength\n \n-\n \n1\n \n)){\n\n              \nconnection\n \n+=\n \n + \n;\n\n            \n}\n\n        \n});\n\n\n        \nhtml\n \n+=\n \n`\ntd\n$\n{\nconnection\n}\n/td\n/tr\n\\n`;\n\n    \n});\n\n\n    \n$\n(\n \n#list-members\n \n).\nhtml\n(\nhtml\n);\n\n\n});\n\n\n\n\n\n\nThe end result is a table that looks like:\n\n\n\n\n\n\n\n\nCompany\n\n\nASN\n\n\n\n\n\n\n\n\n\n\n3 Ireland\n\n\n34218\n\n\n\n\n\n\nAfilias\n\n\n12041\n\n\n\n\n\n\n...\n\n\n...", 
            "title": "IX-F Member Export"
        }, 
        {
            "location": "/features/ixf-export/#ix-f-member-list-export", 
            "text": "The  IX-F Member Export  is an agreed and standardized JSON schema which allows IXPs to make their member lists available for consumption by tools such as PeeringDB, networks with automated peering managers, prospective members and the many other tools appearing in the peering eco-system.  The key element of the IX-F Member Export is it makes you, the individual IXP, the canonical trusted source for data about  your own IXP . Data that is guaranteed to be correct and up to date.  To find out more about the JSON schema and see examples, you can  explore any of the public IXP end points available here  or see the GitHub  euro-ix/json-schemas  repository.  IXP Manager  supports the IX-F Member List Export out of the box. It previously supported all versions from 0.3 to 0.5 but as of May 2017, we now only support 0.6 and 0.7. This is because these have become the stable common versions (as at time of writing, March 2018).  Sometimes you may need something more customised than the the IX-F Member Export. For that, see  the other member export feature  if IXP Manager.", 
            "title": "IX-F Member List Export"
        }, 
        {
            "location": "/features/ixf-export/#accessing-the-ix-f-member-list", 
            "text": "If your version of IXP Manager is installed at, say,  https://ixp.example.com/ , then the IX-F Member List export can be accessed at:  https://ixp.example.com/api/v4/member-export/ixf/0.6  where  0.6  is a version parameter which allows for support of potential future versions.  Note that the publically accessable version does not include individiual member details such as name (ASN is provided), max prefixes, MAC addresses, contact email and phone, when the member joined, member's web address, peering policy, NOC website, NOC hours or member type. This information is available to any logged in users or users querying  the API with an API key .", 
            "title": "Accessing the IX-F Member List"
        }, 
        {
            "location": "/features/ixf-export/#registering-your-api-endpoint", 
            "text": "Register your IX-F Member List export on the  IXF Member List Directory Service  at http://ml.ix-f.net/.", 
            "title": "Registering Your API Endpoint"
        }, 
        {
            "location": "/features/ixf-export/#configuration-options", 
            "text": "There is only one configuration option presently available. To disable public access to the restricted member export, set the following in your  .env  file:  IXP_API_JSONEXPORTSCHEMA_PUBLIC=false  We strongly advise you not to disable public access if you are a standard IXP.  Remember, the public version is essentially the same list as you would provide on your standard website's list of members.  In addition, membership of an IXP is easily discernable from a number of other sources including:   PeeringDB  Route collectors (your own, PCH, members\u2019 own, ...)  Looking glasses  Traceroutes (and tools such as: https://www.inex.ie/ard/ )  RIPE RRC\u2019s / RIS, RIPE Atlas  Commercial products (Noction, ...)   Leave public access available, own your own data, ensure it's validy and advertise it!", 
            "title": "Configuration Options"
        }, 
        {
            "location": "/features/ixf-export/#example-member-lists", 
            "text": "A common requirement of IXPs is to create a public member list on their official website. This can be done with the IX-F Member Export quite easily. The below HTML and JavaScript is a way to do it with INEX's endpoint. There's a  live JSFiddle which demonstrates this also  - https://jsfiddle.net/barryo/2tzuypf9/ .  The HTML requires just a table with a placeholder and an  id  on the  body :  table   class= table table-bordered   style= margin: 10px \n  thead \n    tr \n      th Company /th \n      th ASN /th \n      th Connections /th \n    /tr \n  /thead \n  tbody   id= list-members \n      tr \n          td   colspan= 3 Please wait, loading... /td \n      /tr \n  /tbody  /table   The JavaScript loads the member list via the IX-F Export and processes it into the table above:  // Sample IX-F Member Export to Member List script  //  // License: MIT (https://en.wikipedia.org/wiki/MIT_License)  // By @yannrobin and @barryo  // 2018-03-06  function   prettySpeeds (   s   )   { \n         switch (   s   )   { \n             case   10 :       return   10Mb ; \n             case   100 :      return   100Mb ; \n             case   1000 :     return   1Gb ; \n             case   10000 :    return   10Gb ; \n             case   40000 :    return   40Gb ; \n             case   100000 :   return   100Gb ; \n         default :       return   s ; \n     }  }  $ . getJSON (   https://www.inex.ie/ixp/api/v4/member-export/ixf/0.7 ,   function (   json   )   { \n\n       // sort by name \n     json [   member_list   ]. sort (   function ( a ,   b )   { \n         var   nameA   =   a . name . toUpperCase ();   // ignore upper and lowercase \n         var   nameB   =   b . name . toUpperCase ();   // ignore upper and lowercase \n         if   ( nameA     nameB )   { \n           return   - 1 ; \n         } \n         if   ( nameA     nameB )   { \n           return   1 ; \n         } \n         // names must be equal \n         return   0 ; \n     }); \n\n     let   html   =   ; \n\n     $ . each (   json [   member_list   ],   function ( i ,   member )   { \n         html   +=   ` tr \n                      td \n                          a   target = _blank   href = ${member.url} $ { member . name } /a \n                      /td \n                      td \n                          a   target = _blank \n                              href = http://www.ripe.net/perl/whois?searchtext=${member.asnum} form_type=simple \n                              $ { member . asnum } \n                          /a \n                      /td `; \n\n         let   connection   =   ; \n         $ . each (   member [   connection_list   ],   function ( i ,   conn   )   { \n             if (   conn [   if_list   ]. length     1   ){ \n                   connection   +=   conn [   if_list   ]. length +   * \n             } \n             connection   +=   prettySpeeds (   conn [   if_list   ][ 0 ]. if_speed   ); \n\n             if ( i     ( member [   connection_list   ]. length   -   1   )){ \n               connection   +=    +  ; \n             } \n         }); \n\n         html   +=   ` td $ { connection } /td /tr \\n`; \n     }); \n\n     $ (   #list-members   ). html ( html );  });   The end result is a table that looks like:     Company  ASN      3 Ireland  34218    Afilias  12041    ...  ...", 
            "title": "Example: Member Lists"
        }, 
        {
            "location": "/features/layer2-addresses/", 
            "text": "MAC Addresses\n\uf0c1\n\n\nIXP Manager has support for layer2 / MAC addresses in two ways:\n\n\n\n\nDiscovered Addresses\n: a read-only table via an admin menu option called \nMAC Addresses -\n Discovered Addresses\n which lists entries from a database of MAC addresses which are sourced via a script from the IXP's switches directly. \n(Available since version 3.x)\n.\n\n\nConfigured Addresses\n: a managed table of layer2/MAC addresses, viewed by the admin menu option \nMAC Addresses -\n Configured Addresses\n. These are assigned by IXP administrators on a per VLAN interface basis. \n(Available since version 4.4)\n.\n\n\n\n\nConfigured Addresses\n\uf0c1\n\n\nIn early 2017, \nINEX\n migrated its primary peering LAN from a flat layer2 with spanning tree design to a VxLAN set-up with automation via Salt and Napalm \n(we will insert references to presentations here once we complete all required functionality)\n.\n\n\nPart of the requirements for this automation (and this was an existing feature request from other IXPs) was the management of MAC addresses within IXP Manager and, rather than assigning them to a virtual interface, assign them to specific VLAN interfaces.\n\n\nOutside of our automation and VXLAN, other uses included:\n\n\n\n\nto potentially allow members to add a MAC address during maintenance and thus have the system update a layer2 acl on the switch(es);\n\n\na static maintained database of MAC addresses for EVPN;\n\n\na static maintained database for lookups.\n\n\n\n\nThe features of this system are listed below.\n\n\nListing and Searching Existing Configured MAC Addresses\n\uf0c1\n\n\nThere is a new menu option (left hand side menu) under \nMAC Addresses\n called \nConfigured Addresses\n. This lists all configured MAC addresses including the OUI manufacturer (see below), associated switch / switch port(s), customer name, IPv4 and v6 addresses. You can also:\n\n\n\n\nas-you-type search from the datatable search box (lowercased and filtered to a normalised MAC address);\n\n\nrestrict the view to a single VLAN;\n\n\naction-to-move to layer 2 address add / edit / delete for a given VLAN interface;\n\n\nclick on a MAC to bring up a pop-up, allowing you to copy in different formats:\n\n\n\n\n\n\nAdding / Removing Layer2 Addresses to/from a VLAN Interface\n\uf0c1\n\n\nWhen editing a customer's interface in the usual manner (customer overview -\n Ports -\n edit button), you will now see MAC address(es) under \nVLAN Interfaces\n:\n\n\n\n\nIn the event that there is zero or more than one MAC address, the MAC address demonstrated above will be replaced with an appropriate note to indicate this.\n\n\nClicking on the MAC address (or note when none  / multiple) will bring you to the configured MAC address management page for this VLAN interface. Addresses can be added / removed on this page. MAC addresses can be entered in either upper or lower cases and can optionally include characters such as \n.\n, \n:\n, \n-\n. These are all stripped before validation and insertion.\n\n\nExtracting Addresses\n\uf0c1\n\n\nAs automation features are still a work in progress, not all methods are listed here. Please \nopen an issue on GitHub\n or start a discussion on the \nmailing list\n for whatever methods you would like.\n\n\nCurrently implemented (see \nthe API page for access details\n):\n\n\n\n\nAn API to be used by the sflow / peer to peer graphing tool:\n\n\nVirtual Interface ID to MAC address - GET request to: https://ixp.example.com/api/v4/vlan-interface/sflow-mac-table\n\n\nVirtual Interface ID, VLAN interface ID, customer name and VLAN tag - GET request to: https://ixp.example.com/api/v4/vlan-interface/sflow-matrix\n\n\n\n\n\n\nYAML export for automated provisioning. As yet undocumented and not suitable for general use.\n\n\nQuerying the database directly. \nNot usually recommended as the schema may change.\n\n\n\n\nMigrating Discovered MACs to Configured MACs\n\uf0c1\n\n\nINEX's use case was to switch from the \ndiscovered MAC addresses\n table to the \nconfigured MAC addresses\n table without the need to data fill all preexisting ~200 MACs. As such we have created an Artisan migration script which can be run with:\n\n\nphp \n$IXPROOT\n/artisan l2addresses:populate\n\n\n\n\n\nYou will be prompted as follows:\n\n\n\n\nAre you sure you wish to proceed? This command will CLEAR the layer2address table and then copy addresses from the read-only macaddress table. Generally, this command should only ever be run once when initially populating the new table.\n\n\n\n\nOne thing to note: as the \ndiscovered MAC Addresses\n table is per virtual interface and the new configured MAC address functionality is per VLAN interface, any MAC from \ndiscovered MAC Addresses\n that is populated into \nconfifured MAC Addresses\n will be populated for every VLAN interface associated with the virtual interface.\n\n\nThe script prints notices for these such as:\n\n\n\n\nCreated \n1 layer2address for [member name]] with virtual interface: https://www.example.com/ixp/virtual-interface/edit/id/235\n\n\n\n\nThe inclusion of the URL makes it easy to double check the result.\n\n\nFor obvious reasons, we only allow a single / unique layer2 address per VLAN. In the event that the script tries to add the same MAC more than once, it will print:\n\n\n\n\nCould not add additional instance of 001122334455 for [Customer]] with virtual interface: https://www.example.com/ixp/virtual-interface/edit/id/265 as it already exists in this Vlan [VLAN name]\n\n\n\n\nThese should all be checked manually.\n\n\nA useful SQL command to double check the results for me was:\n\n\nSELECT\n \nmac\n,\n \nCOUNT\n(\nmac\n)\n \nAS\n \nc\n \nFROM\n \nl2address\n \nGROUP\n \nBY\n \nmac\n \nHAVING\n \nCOUNT\n(\nmac\n)\n \n \n1\n;\n\n\n\n\n\n\nDiscovered MAC Addresses\n\uf0c1\n\n\nThis was the original functionality - a read-only table via an admin menu option called \nMAC Addresses -\n Discovered Addresses\n which lists entries from a database of MAC addresses which are sourced via a script from the IXP's switches directly.\n\n\nAt an IXP, it can be extremely useful to have a quick look up table to see what member owns what MAC address - especially when they start injecting illegal packets into the exchange fabric.\n\n\nWe have a script, \nupdate-l2database.pl\n, for this. To set it up (using Ubuntu as an example), proceed as below. We are in the process of trying to reduce the reliance on the perl library and direct database access. But for now, this script still requires it.\n\n\n# If you haven\nt already, install the Perl library for IXP Manager:\n\napt-get install libnet-snmp-perl libconfig-general-perl libnetaddr-ip-perl\n\ncd\n \n$IXPROOT\n/tools/perl-lib/IXPManager\nperl Makefile.PL\nmake install\n\n\n# Then copy and edit the configuration file to set the database connection settings:\n\ncp \n$IXPROOT\n/tools/perl-lib/IXPManager/ixpmanager.conf /usr/local/etc/\njoe /usr/local/etc/ixpmanager.conf \n#and set database settings\n\n\n\n# Now copy the script:\n\ncp \n$IXPROOT\n/tools/runtime/l2database/update-l2database.pl /usr/local/bin\n\n\n# and then add it to your periodic cron job with:\n\n/usr/local/bin/update-l2database.pl\n\n\n\n\n\nOUI Database\n\uf0c1\n\n\nIXP Manager can store the IEEE OUI database and reference it to show the manufacturer behind a MAC address.\n\n\nPopulating and Updating the OUI Database\n\uf0c1\n\n\nYou would typically set a weekly cron job to call:\n\n\nphp \n$IXPROOT\n/artisan utils:oui-update\n\n\n\n\n\nwhich will populate / update the OUI database directly from the latest IEEE file from their website.\n\n\nA specific file can be passed via the \nfile\n parameter. You can also force a database reset (drop all OUI entries and re-populate) via the \n--refresh\n option.\n\n\nNeither of these options are typically necessary.\n\n\nEnd User Access\n\uf0c1\n\n\nIn v4.7.3 we introduced the ability for logged in users to management their own configured MAC addresses.\n\n\nThis is disabled by default but can be enabled with the following \n.env\n settings:\n\n\n# Set this to allow customers to change their own configured MAC addresses:\nIXP_FE_LAYER2_ADDRESSES_CUST_CAN_EDIT=true\n\n# The following defaults are configured for min/max MAC addresses\nIXP_FE_LAYER2_ADDRESSES_CUST_PARAMS_MIN_ADDRESSES=1\nIXP_FE_LAYER2_ADDRESSES_CUST_PARAMS_MAX_ADDRESSES=2\n\n\n\n\n\nWhen a MAC is added, a \nIXP\\Events\\Layer2Address\\Added\n event is triggered and, similarly, when a MAC is deleted a \nIXP\\Events\\Layer2Address\\Deleted\n event is triggered. We have created an event listener for these to fire off an email in both cases. To enable this listener, set the following \n.env\n settings:\n\n\n# Trigger an email when a superuser adds/deletes a MAC:\nIXP_FE_LAYER2_ADDRESSES_EMAIL_ON_SUPERUSER_CHANGE=true\n\n# Trigger an email when a customer user adds/deletes a MAC:\nIXP_FE_LAYER2_ADDRESSES_EMAIL_ON_CUSTOMER_CHANGE=true\n\n# Destination address of the email:\nIXP_FE_LAYER2_ADDRESSES_EMAIL_ON_CHANGE_DEST=ops@ixp.example.net\n\n\n\n\n\nThere are two files you can consider \nskinning\n with this functionality:\n\n\n\n\nresources/views/layer2-address/emails/changed.blade.php\n - the email which is sent when a MAC is added / removed.\n\n\nresources/views/layer2-address/customer-edit-msg.foil.php\n - an informational alert box that is shown to the customer on the MAC add/delete page to set their expectations on time to complete on the IXP end.", 
            "title": "MAC Addresses"
        }, 
        {
            "location": "/features/layer2-addresses/#mac-addresses", 
            "text": "IXP Manager has support for layer2 / MAC addresses in two ways:   Discovered Addresses : a read-only table via an admin menu option called  MAC Addresses -  Discovered Addresses  which lists entries from a database of MAC addresses which are sourced via a script from the IXP's switches directly.  (Available since version 3.x) .  Configured Addresses : a managed table of layer2/MAC addresses, viewed by the admin menu option  MAC Addresses -  Configured Addresses . These are assigned by IXP administrators on a per VLAN interface basis.  (Available since version 4.4) .", 
            "title": "MAC Addresses"
        }, 
        {
            "location": "/features/layer2-addresses/#configured-addresses", 
            "text": "In early 2017,  INEX  migrated its primary peering LAN from a flat layer2 with spanning tree design to a VxLAN set-up with automation via Salt and Napalm  (we will insert references to presentations here once we complete all required functionality) .  Part of the requirements for this automation (and this was an existing feature request from other IXPs) was the management of MAC addresses within IXP Manager and, rather than assigning them to a virtual interface, assign them to specific VLAN interfaces.  Outside of our automation and VXLAN, other uses included:   to potentially allow members to add a MAC address during maintenance and thus have the system update a layer2 acl on the switch(es);  a static maintained database of MAC addresses for EVPN;  a static maintained database for lookups.   The features of this system are listed below.", 
            "title": "Configured Addresses"
        }, 
        {
            "location": "/features/layer2-addresses/#listing-and-searching-existing-configured-mac-addresses", 
            "text": "There is a new menu option (left hand side menu) under  MAC Addresses  called  Configured Addresses . This lists all configured MAC addresses including the OUI manufacturer (see below), associated switch / switch port(s), customer name, IPv4 and v6 addresses. You can also:   as-you-type search from the datatable search box (lowercased and filtered to a normalised MAC address);  restrict the view to a single VLAN;  action-to-move to layer 2 address add / edit / delete for a given VLAN interface;  click on a MAC to bring up a pop-up, allowing you to copy in different formats:", 
            "title": "Listing and Searching Existing Configured MAC Addresses"
        }, 
        {
            "location": "/features/layer2-addresses/#adding-removing-layer2-addresses-tofrom-a-vlan-interface", 
            "text": "When editing a customer's interface in the usual manner (customer overview -  Ports -  edit button), you will now see MAC address(es) under  VLAN Interfaces :   In the event that there is zero or more than one MAC address, the MAC address demonstrated above will be replaced with an appropriate note to indicate this.  Clicking on the MAC address (or note when none  / multiple) will bring you to the configured MAC address management page for this VLAN interface. Addresses can be added / removed on this page. MAC addresses can be entered in either upper or lower cases and can optionally include characters such as  . ,  : ,  - . These are all stripped before validation and insertion.", 
            "title": "Adding / Removing Layer2 Addresses to/from a VLAN Interface"
        }, 
        {
            "location": "/features/layer2-addresses/#extracting-addresses", 
            "text": "As automation features are still a work in progress, not all methods are listed here. Please  open an issue on GitHub  or start a discussion on the  mailing list  for whatever methods you would like.  Currently implemented (see  the API page for access details ):   An API to be used by the sflow / peer to peer graphing tool:  Virtual Interface ID to MAC address - GET request to: https://ixp.example.com/api/v4/vlan-interface/sflow-mac-table  Virtual Interface ID, VLAN interface ID, customer name and VLAN tag - GET request to: https://ixp.example.com/api/v4/vlan-interface/sflow-matrix    YAML export for automated provisioning. As yet undocumented and not suitable for general use.  Querying the database directly.  Not usually recommended as the schema may change.", 
            "title": "Extracting Addresses"
        }, 
        {
            "location": "/features/layer2-addresses/#migrating-discovered-macs-to-configured-macs", 
            "text": "INEX's use case was to switch from the  discovered MAC addresses  table to the  configured MAC addresses  table without the need to data fill all preexisting ~200 MACs. As such we have created an Artisan migration script which can be run with:  php  $IXPROOT /artisan l2addresses:populate  You will be prompted as follows:   Are you sure you wish to proceed? This command will CLEAR the layer2address table and then copy addresses from the read-only macaddress table. Generally, this command should only ever be run once when initially populating the new table.   One thing to note: as the  discovered MAC Addresses  table is per virtual interface and the new configured MAC address functionality is per VLAN interface, any MAC from  discovered MAC Addresses  that is populated into  confifured MAC Addresses  will be populated for every VLAN interface associated with the virtual interface.  The script prints notices for these such as:   Created  1 layer2address for [member name]] with virtual interface: https://www.example.com/ixp/virtual-interface/edit/id/235   The inclusion of the URL makes it easy to double check the result.  For obvious reasons, we only allow a single / unique layer2 address per VLAN. In the event that the script tries to add the same MAC more than once, it will print:   Could not add additional instance of 001122334455 for [Customer]] with virtual interface: https://www.example.com/ixp/virtual-interface/edit/id/265 as it already exists in this Vlan [VLAN name]   These should all be checked manually.  A useful SQL command to double check the results for me was:  SELECT   mac ,   COUNT ( mac )   AS   c   FROM   l2address   GROUP   BY   mac   HAVING   COUNT ( mac )     1 ;", 
            "title": "Migrating Discovered MACs to Configured MACs"
        }, 
        {
            "location": "/features/layer2-addresses/#discovered-mac-addresses", 
            "text": "This was the original functionality - a read-only table via an admin menu option called  MAC Addresses -  Discovered Addresses  which lists entries from a database of MAC addresses which are sourced via a script from the IXP's switches directly.  At an IXP, it can be extremely useful to have a quick look up table to see what member owns what MAC address - especially when they start injecting illegal packets into the exchange fabric.  We have a script,  update-l2database.pl , for this. To set it up (using Ubuntu as an example), proceed as below. We are in the process of trying to reduce the reliance on the perl library and direct database access. But for now, this script still requires it.  # If you haven t already, install the Perl library for IXP Manager: \napt-get install libnet-snmp-perl libconfig-general-perl libnetaddr-ip-perl cd   $IXPROOT /tools/perl-lib/IXPManager\nperl Makefile.PL\nmake install # Then copy and edit the configuration file to set the database connection settings: \ncp  $IXPROOT /tools/perl-lib/IXPManager/ixpmanager.conf /usr/local/etc/\njoe /usr/local/etc/ixpmanager.conf  #and set database settings  # Now copy the script: \ncp  $IXPROOT /tools/runtime/l2database/update-l2database.pl /usr/local/bin # and then add it to your periodic cron job with: \n/usr/local/bin/update-l2database.pl", 
            "title": "Discovered MAC Addresses"
        }, 
        {
            "location": "/features/layer2-addresses/#oui-database", 
            "text": "IXP Manager can store the IEEE OUI database and reference it to show the manufacturer behind a MAC address.", 
            "title": "OUI Database"
        }, 
        {
            "location": "/features/layer2-addresses/#populating-and-updating-the-oui-database", 
            "text": "You would typically set a weekly cron job to call:  php  $IXPROOT /artisan utils:oui-update  which will populate / update the OUI database directly from the latest IEEE file from their website.  A specific file can be passed via the  file  parameter. You can also force a database reset (drop all OUI entries and re-populate) via the  --refresh  option.  Neither of these options are typically necessary.", 
            "title": "Populating and Updating the OUI Database"
        }, 
        {
            "location": "/features/layer2-addresses/#end-user-access", 
            "text": "In v4.7.3 we introduced the ability for logged in users to management their own configured MAC addresses.  This is disabled by default but can be enabled with the following  .env  settings:  # Set this to allow customers to change their own configured MAC addresses:\nIXP_FE_LAYER2_ADDRESSES_CUST_CAN_EDIT=true\n\n# The following defaults are configured for min/max MAC addresses\nIXP_FE_LAYER2_ADDRESSES_CUST_PARAMS_MIN_ADDRESSES=1\nIXP_FE_LAYER2_ADDRESSES_CUST_PARAMS_MAX_ADDRESSES=2  When a MAC is added, a  IXP\\Events\\Layer2Address\\Added  event is triggered and, similarly, when a MAC is deleted a  IXP\\Events\\Layer2Address\\Deleted  event is triggered. We have created an event listener for these to fire off an email in both cases. To enable this listener, set the following  .env  settings:  # Trigger an email when a superuser adds/deletes a MAC:\nIXP_FE_LAYER2_ADDRESSES_EMAIL_ON_SUPERUSER_CHANGE=true\n\n# Trigger an email when a customer user adds/deletes a MAC:\nIXP_FE_LAYER2_ADDRESSES_EMAIL_ON_CUSTOMER_CHANGE=true\n\n# Destination address of the email:\nIXP_FE_LAYER2_ADDRESSES_EMAIL_ON_CHANGE_DEST=ops@ixp.example.net  There are two files you can consider  skinning  with this functionality:   resources/views/layer2-address/emails/changed.blade.php  - the email which is sent when a MAC is added / removed.  resources/views/layer2-address/customer-edit-msg.foil.php  - an informational alert box that is shown to the customer on the MAC add/delete page to set their expectations on time to complete on the IXP end.", 
            "title": "End User Access"
        }, 
        {
            "location": "/features/looking-glass/", 
            "text": "Looking Glass\n\uf0c1\n\n\nIXP Manager supports full looking glass features when using the Bird BGP daemon and \nBird's Eye\n \n(a simple secure micro service for querying Bird)\n.\n\n\nA fully working example of this can be seen \nhere on INEX's IXP Manager\n.\n\n\nEnabling the looking glass just requires:\n\n\n\n\nproperly configured \nrouter(s)\n.\n\n\nBird's Eye\n installed on these.\n\n\nthe API endpoint must be accessible from the server running IXP Manager and this endpoint must be set correctly in the router's configuration (see \nrouter(s)\n page) (along with an appropriate setting for \nLG Access Privileges\n). Note that the Birdseye API end points do not need to be publicly accessible - just from the IXP Manager server.\n\n\nset the \n.env\n option: \nIXP_FE_FRONTEND_DISABLED_LOOKING_GLASS=false\n (in IXP Manager's \n.env\n and add it if it's missing as it defaults to \ntrue\n).\n\n\n\n\nExample Router Configuration\n\uf0c1\n\n\nSee this screenshot for an appropriately configured INEX router with Bird's Eye:\n\n\n\n\nLooking Glass 'Pass Thru' API Calls\n\uf0c1\n\n\nDepending on the configured \nLG Access Privileges\n for a given router, \nIXP Manager\n will pass thru the following API calls to the router API.\n\n\n\n\nhttps://ixp.example.com/api/v4/lg/{handle}/status\n\n\nhttps://ixp.example.com/api/v4/lg/{handle}/bgp-summary\n\n\n\n\nand return the JSON result.\n\n\nThe rationale for this is that we expect most IX's to keep direct access to looking glass implementations on internal / private networks.\n\n\nHere are two live examples from INEX:\n\n\n\n\nhttps://www.inex.ie/ixp/api/v4/lg/rc1-cork-ipv4/status\n\n\nhttps://www.inex.ie/ixp/api/v4/lg/rc1-cork-ipv4/bgp-summary\n\n\n\n\nYou can see all of \nINEX\n's looking glasses at \nhttps://www.inex.ie/ixp/lg\n.\n\nGRNET\n have also a public IXP Manager integration at: \nhttps://portal.gr-ix.gr/lg\n.\n\n\nDebugging\n\uf0c1\n\n\nGenerally speaking, if you carefully read the above and the \nBird's Eye README file\n, you should be able to get IXP Manager / Bird's Eye integration working.\n\n\nIf you do not, try all of the following and solve any elements that fail. If you still have issues, email the \nIXP Manager mailing list\n \nwith the output of all of the following commands from both sections\n.\n\n\nFor the following examples, we will use a real INEX example router with these settings:\n\n\nmysql\n SELECT * FROM routers WHERE id = 17\\G\n*************************** 1. row ***************************\n          id: 17\n     vlan_id: 2\n      handle: as112-lan1-ipv4\n    protocol: 4\n        type: 3\n        name: INEX LAN1 - AS112 - IPv4\n   shortname: AS112 - LAN1 - IPv4\n   router_id: 185.6.36.6\n  peering_ip: 185.6.36.6\n         asn: 112\n    software: 1\n   mgmt_host: 10.39.5.6\n         api: http://as112-lan1-ipv4.mgmt.inex.ie/api\n    api_type: 1\n   lg_access: 0\n  quarantine: 0\n      bgp_lc: 0\n    template: api/v4/router/as112/bird/standard\n    skip_md5: 1\nlast_updated: 2018-02-03 14:26:15\n\n\n\n\n\nFrom the server running IXP Manager:\n\n\n###############################################################################\n# Does the API hostname resolve?\n$ dig +short as112-lan1-ipv4.mgmt.inex.ie\n\n10.39.5.6\n\n\n###############################################################################\n# Is there network access?\n$ ping as112-lan1-ipv4.mgmt.inex.ie -c 1\n\nPING as112.mgmt.inex.ie (10.39.5.6) 56(84) bytes of data.\n64 bytes from as112.mgmt.inex.ie (10.39.5.6): icmp_seq=1 ttl=64 time=0.103 ms\n\n--- as112.mgmt.inex.ie ping statistics ---\n1 packets transmitted, 1 received, 0% packet loss, time 0ms\nrtt min/avg/max/mdev = 0.103/0.103/0.103/0.000 ms\n\n\n###############################################################################\n# Is the Bird\ns Eye service available?\n$ curl -v http://as112-lan1-ipv4.mgmt.inex.ie/api/status\n\n*   Trying 10.39.5.6...\n* Connected to as112-lan1-ipv4.mgmt.inex.ie (10.39.5.6) port 80 (#0)\n\n GET /api/status HTTP/1.1\n\n Host: as112-lan1-ipv4.mgmt.inex.ie\n\n User-Agent: curl/7.47.0\n\n Accept: */*\n\n\n\n HTTP/1.1 200 OK\n\n Cache-Control: no-cache\n\n Content-Type: application/json\n\n Date: Mon, 12 Feb 2018 16:29:52 GMT\n\n Transfer-Encoding: chunked\n\n Server: lighttpd/1.4.35\n\n\n* Connection #0 to host as112-lan1-ipv4.mgmt.inex.ie left intact\n\n{\n    \napi\n: {\n        \nfrom_cache\n:true,\n        \nttl_mins\n:1,\n        \nversion\n:\n1.1.0\n,\n        \nmax_routes\n:1000\n    },\n    \nstatus\n: {\n        \nversion\n:\n1.6.3\n,\n        \nrouter_id\n:\n185.6.36.6\n,\n        \nserver_time\n:\n2018-02-12T16:29:48+00:00\n,\n        \nlast_reboot\n:\n2017-11-09T00:23:24+00:00\n,\n        \nlast_reconfig\n:\n2018-02-12T16:26:14+00:00\n,\n        \nmessage\n:\nDaemon is up and running\n\n    }\n}\n\n\n\n\n\nIf all of the above checks out, watch the log file while you try and access the looking glass:\n\n\ncd\n \n$IXPROOT\n\ntail -f storage/log/laravel.log\n\n\n\n\n\nIf there are error messages in the above log as you try and access the looking glass, include them when emailing the mailing list for help.\n\n\nThen on the router (the server running Bird's Eye), you need to provide the following answers when seeking help:\n\n\n###############################################################################\n# Is Bird actually running and what are the names of its sockets:\n$ ls -la /var/run/bird\n\ntotal 0\ndrwxrwxr-x  2 bird bird 120 Nov  9 00:26 .\ndrwxr-xr-x 25 root root 900 Feb 12 19:40 ..\nsrw-rw----  1 root root   0 Nov  9 00:23 bird-as112-lan1-ipv4.ctl\nsrw-rw----  1 root root   0 Nov  9 00:23 bird-as112-lan1-ipv6.ctl\nsrw-rw----  1 root root   0 Nov  9 00:23 bird-as112-lan2-ipv4.ctl\nsrw-rw----  1 root root   0 Nov  9 00:23 bird-as112-lan2-ipv6.ctl\n\n###############################################################################\n# What configuration file(s) exist:\n$ ls -la /srv/birdseye/*env\n\n-rw-r--r-- 1 root root 2833 Dec  5  2016 /srv/birdseye/birdseye-as112-lan1-ipv4.env\n-rw-r--r-- 1 root root 2833 Dec  5  2016 /srv/birdseye/birdseye-as112-lan1-ipv6.env\n-rw-r--r-- 1 root root 2833 Dec  5  2016 /srv/birdseye/birdseye-as112-lan2-ipv4.env\n-rw-r--r-- 1 root root 2833 Dec  5  2016 /srv/birdseye/birdseye-as112-lan2-ipv6.env\n\n###############################################################################\n# Let\ns see the contents of these:\n$ cat /srv/birdseye/*env | egrep -v \n(^#)|(^\\s*$)\n\n\nBIRDC=\n/usr/bin/sudo /srv/birdseye/bin/birdc -4 -s /var/run/bird/bird-as112-lan1-ipv4.ctl\n\nCACHE_DRIVER=file\nLOOKING_GLASS_ENABLED=true\nBIRDC=\n/usr/bin/sudo /srv/birdseye/bin/birdc -6 -s /var/run/bird/bird-as112-lan1-ipv6.ctl\n\nCACHE_DRIVER=file\nLOOKING_GLASS_ENABLED=true\nBIRDC=\n/usr/bin/sudo /srv/birdseye/bin/birdc -4 -s /var/run/bird/bird-as112-lan2-ipv4.ctl\n\nCACHE_DRIVER=file\nLOOKING_GLASS_ENABLED=true\nBIRDC=\n/usr/bin/sudo /srv/birdseye/bin/birdc -6 -s /var/run/bird/bird-as112-lan2-ipv6.ctl\n\nCACHE_DRIVER=file\nLOOKING_GLASS_ENABLED=true\n\n###############################################################################\n# Test birdc access to the daemon - run for each socket found above:\n# (only one shown here for brevity - include all in your request for help!)\n$ /usr/sbin/birdc -s /var/run/bird/bird-as112-lan1-ipv4.ctl show status\n\nBIRD 1.6.3 ready.\nBIRD 1.6.3\nRouter ID is 185.6.36.6\nCurrent server time is 2018-02-12 19:42:42\nLast reboot on 2017-11-09 00:23:25\nLast reconfiguration on 2018-02-12 19:26:15\nDaemon is up and running\n\n###############################################################################\n# Have you created the sudo file for www-data to be able to access Birdc?\n$ cat /etc/sudoers /etc/sudoers.d/* | grep birdseye\n\nwww-data        ALL=(ALL)       NOPASSWD: /srv/birdseye/bin/birdc\n\n###############################################################################\n# Does the Bird\ns Eye client work?\n#\u00a0Run for each socket found above with the appropriate protocol (-4/-6):\n# (only one shown here for brevity - include all in your request for help!)\n\n$ /srv/birdseye/bin/birdc -4 -s /var/run/bird/bird-as112-lan1-ipv4.ctl show status\n\nBIRD 1.6.3 ready.\nAccess restricted\nBIRD 1.6.3\nRouter ID is 185.6.36.6\nCurrent server time is 2018-02-12 19:44:31\nLast reboot on 2017-11-09 00:23:25\nLast reconfiguration on 2018-02-12 19:26:15\nDaemon is up and running\n\n\n###############################################################################\n# Is the web server running:\n$ netstat -lpn | grep lighttpd\n\ntcp        0      0 10.39.5.6:80            0.0.0.0:*               LISTEN      1165/lighttpd\ntcp6       0      0 2001:7f8:18:5::6:80     :::*                    LISTEN      1165/lighttpd\nunix  2      [ ACC ]     STREAM     LISTENING     13970    635/php-cgi         /var/run/lighttpd/php.socket-0\n\n###############################################################################\n# Is PHP running:\n$ netstat -lpn | grep php\n\nunix  2      [ ACC ]     STREAM     LISTENING     13970    635/php-cgi         /var/run/lighttpd/php.socket-0\n\n###############################################################################\n# what\ns the web server configuration\n# NB: make sure you have compared it to:\n#   https://github.com/inex/birdseye/blob/master/data/configs/lighttpd.conf\n$ cat /etc/lighttpd/lighttpd.conf\n\n\nnot included but linked two lines up\n\n\n###############################################################################\n# provide the IXP Manager configuration of your router(s):\nmysql\n SELECT * FROM routers\\G\n\n\nnot included - see example at start of this section", 
            "title": "Looking Glass"
        }, 
        {
            "location": "/features/looking-glass/#looking-glass", 
            "text": "IXP Manager supports full looking glass features when using the Bird BGP daemon and  Bird's Eye   (a simple secure micro service for querying Bird) .  A fully working example of this can be seen  here on INEX's IXP Manager .  Enabling the looking glass just requires:   properly configured  router(s) .  Bird's Eye  installed on these.  the API endpoint must be accessible from the server running IXP Manager and this endpoint must be set correctly in the router's configuration (see  router(s)  page) (along with an appropriate setting for  LG Access Privileges ). Note that the Birdseye API end points do not need to be publicly accessible - just from the IXP Manager server.  set the  .env  option:  IXP_FE_FRONTEND_DISABLED_LOOKING_GLASS=false  (in IXP Manager's  .env  and add it if it's missing as it defaults to  true ).", 
            "title": "Looking Glass"
        }, 
        {
            "location": "/features/looking-glass/#example-router-configuration", 
            "text": "See this screenshot for an appropriately configured INEX router with Bird's Eye:", 
            "title": "Example Router Configuration"
        }, 
        {
            "location": "/features/looking-glass/#looking-glass-pass-thru-api-calls", 
            "text": "Depending on the configured  LG Access Privileges  for a given router,  IXP Manager  will pass thru the following API calls to the router API.   https://ixp.example.com/api/v4/lg/{handle}/status  https://ixp.example.com/api/v4/lg/{handle}/bgp-summary   and return the JSON result.  The rationale for this is that we expect most IX's to keep direct access to looking glass implementations on internal / private networks.  Here are two live examples from INEX:   https://www.inex.ie/ixp/api/v4/lg/rc1-cork-ipv4/status  https://www.inex.ie/ixp/api/v4/lg/rc1-cork-ipv4/bgp-summary   You can see all of  INEX 's looking glasses at  https://www.inex.ie/ixp/lg . GRNET  have also a public IXP Manager integration at:  https://portal.gr-ix.gr/lg .", 
            "title": "Looking Glass 'Pass Thru' API Calls"
        }, 
        {
            "location": "/features/looking-glass/#debugging", 
            "text": "Generally speaking, if you carefully read the above and the  Bird's Eye README file , you should be able to get IXP Manager / Bird's Eye integration working.  If you do not, try all of the following and solve any elements that fail. If you still have issues, email the  IXP Manager mailing list   with the output of all of the following commands from both sections .  For the following examples, we will use a real INEX example router with these settings:  mysql  SELECT * FROM routers WHERE id = 17\\G\n*************************** 1. row ***************************\n          id: 17\n     vlan_id: 2\n      handle: as112-lan1-ipv4\n    protocol: 4\n        type: 3\n        name: INEX LAN1 - AS112 - IPv4\n   shortname: AS112 - LAN1 - IPv4\n   router_id: 185.6.36.6\n  peering_ip: 185.6.36.6\n         asn: 112\n    software: 1\n   mgmt_host: 10.39.5.6\n         api: http://as112-lan1-ipv4.mgmt.inex.ie/api\n    api_type: 1\n   lg_access: 0\n  quarantine: 0\n      bgp_lc: 0\n    template: api/v4/router/as112/bird/standard\n    skip_md5: 1\nlast_updated: 2018-02-03 14:26:15  From the server running IXP Manager:  ###############################################################################\n# Does the API hostname resolve?\n$ dig +short as112-lan1-ipv4.mgmt.inex.ie\n\n10.39.5.6\n\n\n###############################################################################\n# Is there network access?\n$ ping as112-lan1-ipv4.mgmt.inex.ie -c 1\n\nPING as112.mgmt.inex.ie (10.39.5.6) 56(84) bytes of data.\n64 bytes from as112.mgmt.inex.ie (10.39.5.6): icmp_seq=1 ttl=64 time=0.103 ms\n\n--- as112.mgmt.inex.ie ping statistics ---\n1 packets transmitted, 1 received, 0% packet loss, time 0ms\nrtt min/avg/max/mdev = 0.103/0.103/0.103/0.000 ms\n\n\n###############################################################################\n# Is the Bird s Eye service available?\n$ curl -v http://as112-lan1-ipv4.mgmt.inex.ie/api/status\n\n*   Trying 10.39.5.6...\n* Connected to as112-lan1-ipv4.mgmt.inex.ie (10.39.5.6) port 80 (#0)  GET /api/status HTTP/1.1  Host: as112-lan1-ipv4.mgmt.inex.ie  User-Agent: curl/7.47.0  Accept: */*   HTTP/1.1 200 OK  Cache-Control: no-cache  Content-Type: application/json  Date: Mon, 12 Feb 2018 16:29:52 GMT  Transfer-Encoding: chunked  Server: lighttpd/1.4.35 \n* Connection #0 to host as112-lan1-ipv4.mgmt.inex.ie left intact\n\n{\n     api : {\n         from_cache :true,\n         ttl_mins :1,\n         version : 1.1.0 ,\n         max_routes :1000\n    },\n     status : {\n         version : 1.6.3 ,\n         router_id : 185.6.36.6 ,\n         server_time : 2018-02-12T16:29:48+00:00 ,\n         last_reboot : 2017-11-09T00:23:24+00:00 ,\n         last_reconfig : 2018-02-12T16:26:14+00:00 ,\n         message : Daemon is up and running \n    }\n}  If all of the above checks out, watch the log file while you try and access the looking glass:  cd   $IXPROOT \ntail -f storage/log/laravel.log  If there are error messages in the above log as you try and access the looking glass, include them when emailing the mailing list for help.  Then on the router (the server running Bird's Eye), you need to provide the following answers when seeking help:  ###############################################################################\n# Is Bird actually running and what are the names of its sockets:\n$ ls -la /var/run/bird\n\ntotal 0\ndrwxrwxr-x  2 bird bird 120 Nov  9 00:26 .\ndrwxr-xr-x 25 root root 900 Feb 12 19:40 ..\nsrw-rw----  1 root root   0 Nov  9 00:23 bird-as112-lan1-ipv4.ctl\nsrw-rw----  1 root root   0 Nov  9 00:23 bird-as112-lan1-ipv6.ctl\nsrw-rw----  1 root root   0 Nov  9 00:23 bird-as112-lan2-ipv4.ctl\nsrw-rw----  1 root root   0 Nov  9 00:23 bird-as112-lan2-ipv6.ctl\n\n###############################################################################\n# What configuration file(s) exist:\n$ ls -la /srv/birdseye/*env\n\n-rw-r--r-- 1 root root 2833 Dec  5  2016 /srv/birdseye/birdseye-as112-lan1-ipv4.env\n-rw-r--r-- 1 root root 2833 Dec  5  2016 /srv/birdseye/birdseye-as112-lan1-ipv6.env\n-rw-r--r-- 1 root root 2833 Dec  5  2016 /srv/birdseye/birdseye-as112-lan2-ipv4.env\n-rw-r--r-- 1 root root 2833 Dec  5  2016 /srv/birdseye/birdseye-as112-lan2-ipv6.env\n\n###############################################################################\n# Let s see the contents of these:\n$ cat /srv/birdseye/*env | egrep -v  (^#)|(^\\s*$) \n\nBIRDC= /usr/bin/sudo /srv/birdseye/bin/birdc -4 -s /var/run/bird/bird-as112-lan1-ipv4.ctl \nCACHE_DRIVER=file\nLOOKING_GLASS_ENABLED=true\nBIRDC= /usr/bin/sudo /srv/birdseye/bin/birdc -6 -s /var/run/bird/bird-as112-lan1-ipv6.ctl \nCACHE_DRIVER=file\nLOOKING_GLASS_ENABLED=true\nBIRDC= /usr/bin/sudo /srv/birdseye/bin/birdc -4 -s /var/run/bird/bird-as112-lan2-ipv4.ctl \nCACHE_DRIVER=file\nLOOKING_GLASS_ENABLED=true\nBIRDC= /usr/bin/sudo /srv/birdseye/bin/birdc -6 -s /var/run/bird/bird-as112-lan2-ipv6.ctl \nCACHE_DRIVER=file\nLOOKING_GLASS_ENABLED=true\n\n###############################################################################\n# Test birdc access to the daemon - run for each socket found above:\n# (only one shown here for brevity - include all in your request for help!)\n$ /usr/sbin/birdc -s /var/run/bird/bird-as112-lan1-ipv4.ctl show status\n\nBIRD 1.6.3 ready.\nBIRD 1.6.3\nRouter ID is 185.6.36.6\nCurrent server time is 2018-02-12 19:42:42\nLast reboot on 2017-11-09 00:23:25\nLast reconfiguration on 2018-02-12 19:26:15\nDaemon is up and running\n\n###############################################################################\n# Have you created the sudo file for www-data to be able to access Birdc?\n$ cat /etc/sudoers /etc/sudoers.d/* | grep birdseye\n\nwww-data        ALL=(ALL)       NOPASSWD: /srv/birdseye/bin/birdc\n\n###############################################################################\n# Does the Bird s Eye client work?\n#\u00a0Run for each socket found above with the appropriate protocol (-4/-6):\n# (only one shown here for brevity - include all in your request for help!)\n\n$ /srv/birdseye/bin/birdc -4 -s /var/run/bird/bird-as112-lan1-ipv4.ctl show status\n\nBIRD 1.6.3 ready.\nAccess restricted\nBIRD 1.6.3\nRouter ID is 185.6.36.6\nCurrent server time is 2018-02-12 19:44:31\nLast reboot on 2017-11-09 00:23:25\nLast reconfiguration on 2018-02-12 19:26:15\nDaemon is up and running\n\n\n###############################################################################\n# Is the web server running:\n$ netstat -lpn | grep lighttpd\n\ntcp        0      0 10.39.5.6:80            0.0.0.0:*               LISTEN      1165/lighttpd\ntcp6       0      0 2001:7f8:18:5::6:80     :::*                    LISTEN      1165/lighttpd\nunix  2      [ ACC ]     STREAM     LISTENING     13970    635/php-cgi         /var/run/lighttpd/php.socket-0\n\n###############################################################################\n# Is PHP running:\n$ netstat -lpn | grep php\n\nunix  2      [ ACC ]     STREAM     LISTENING     13970    635/php-cgi         /var/run/lighttpd/php.socket-0\n\n###############################################################################\n# what s the web server configuration\n# NB: make sure you have compared it to:\n#   https://github.com/inex/birdseye/blob/master/data/configs/lighttpd.conf\n$ cat /etc/lighttpd/lighttpd.conf not included but linked two lines up \n\n###############################################################################\n# provide the IXP Manager configuration of your router(s):\nmysql  SELECT * FROM routers\\G not included - see example at start of this section", 
            "title": "Debugging"
        }, 
        {
            "location": "/features/layer2-addresses/", 
            "text": "MAC Addresses\n\uf0c1\n\n\nIXP Manager has support for layer2 / MAC addresses in two ways:\n\n\n\n\nDiscovered Addresses\n: a read-only table via an admin menu option called \nMAC Addresses -\n Discovered Addresses\n which lists entries from a database of MAC addresses which are sourced via a script from the IXP's switches directly. \n(Available since version 3.x)\n.\n\n\nConfigured Addresses\n: a managed table of layer2/MAC addresses, viewed by the admin menu option \nMAC Addresses -\n Configured Addresses\n. These are assigned by IXP administrators on a per VLAN interface basis. \n(Available since version 4.4)\n.\n\n\n\n\nConfigured Addresses\n\uf0c1\n\n\nIn early 2017, \nINEX\n migrated its primary peering LAN from a flat layer2 with spanning tree design to a VxLAN set-up with automation via Salt and Napalm \n(we will insert references to presentations here once we complete all required functionality)\n.\n\n\nPart of the requirements for this automation (and this was an existing feature request from other IXPs) was the management of MAC addresses within IXP Manager and, rather than assigning them to a virtual interface, assign them to specific VLAN interfaces.\n\n\nOutside of our automation and VXLAN, other uses included:\n\n\n\n\nto potentially allow members to add a MAC address during maintenance and thus have the system update a layer2 acl on the switch(es);\n\n\na static maintained database of MAC addresses for EVPN;\n\n\na static maintained database for lookups.\n\n\n\n\nThe features of this system are listed below.\n\n\nListing and Searching Existing Configured MAC Addresses\n\uf0c1\n\n\nThere is a new menu option (left hand side menu) under \nMAC Addresses\n called \nConfigured Addresses\n. This lists all configured MAC addresses including the OUI manufacturer (see below), associated switch / switch port(s), customer name, IPv4 and v6 addresses. You can also:\n\n\n\n\nas-you-type search from the datatable search box (lowercased and filtered to a normalised MAC address);\n\n\nrestrict the view to a single VLAN;\n\n\naction-to-move to layer 2 address add / edit / delete for a given VLAN interface;\n\n\nclick on a MAC to bring up a pop-up, allowing you to copy in different formats:\n\n\n\n\n\n\nAdding / Removing Layer2 Addresses to/from a VLAN Interface\n\uf0c1\n\n\nWhen editing a customer's interface in the usual manner (customer overview -\n Ports -\n edit button), you will now see MAC address(es) under \nVLAN Interfaces\n:\n\n\n\n\nIn the event that there is zero or more than one MAC address, the MAC address demonstrated above will be replaced with an appropriate note to indicate this.\n\n\nClicking on the MAC address (or note when none  / multiple) will bring you to the configured MAC address management page for this VLAN interface. Addresses can be added / removed on this page. MAC addresses can be entered in either upper or lower cases and can optionally include characters such as \n.\n, \n:\n, \n-\n. These are all stripped before validation and insertion.\n\n\nExtracting Addresses\n\uf0c1\n\n\nAs automation features are still a work in progress, not all methods are listed here. Please \nopen an issue on GitHub\n or start a discussion on the \nmailing list\n for whatever methods you would like.\n\n\nCurrently implemented (see \nthe API page for access details\n):\n\n\n\n\nAn API to be used by the sflow / peer to peer graphing tool:\n\n\nVirtual Interface ID to MAC address - GET request to: https://ixp.example.com/api/v4/vlan-interface/sflow-mac-table\n\n\nVirtual Interface ID, VLAN interface ID, customer name and VLAN tag - GET request to: https://ixp.example.com/api/v4/vlan-interface/sflow-matrix\n\n\n\n\n\n\nYAML export for automated provisioning. As yet undocumented and not suitable for general use.\n\n\nQuerying the database directly. \nNot usually recommended as the schema may change.\n\n\n\n\nMigrating Discovered MACs to Configured MACs\n\uf0c1\n\n\nINEX's use case was to switch from the \ndiscovered MAC addresses\n table to the \nconfigured MAC addresses\n table without the need to data fill all preexisting ~200 MACs. As such we have created an Artisan migration script which can be run with:\n\n\nphp \n$IXPROOT\n/artisan l2addresses:populate\n\n\n\n\n\nYou will be prompted as follows:\n\n\n\n\nAre you sure you wish to proceed? This command will CLEAR the layer2address table and then copy addresses from the read-only macaddress table. Generally, this command should only ever be run once when initially populating the new table.\n\n\n\n\nOne thing to note: as the \ndiscovered MAC Addresses\n table is per virtual interface and the new configured MAC address functionality is per VLAN interface, any MAC from \ndiscovered MAC Addresses\n that is populated into \nconfifured MAC Addresses\n will be populated for every VLAN interface associated with the virtual interface.\n\n\nThe script prints notices for these such as:\n\n\n\n\nCreated \n1 layer2address for [member name]] with virtual interface: https://www.example.com/ixp/virtual-interface/edit/id/235\n\n\n\n\nThe inclusion of the URL makes it easy to double check the result.\n\n\nFor obvious reasons, we only allow a single / unique layer2 address per VLAN. In the event that the script tries to add the same MAC more than once, it will print:\n\n\n\n\nCould not add additional instance of 001122334455 for [Customer]] with virtual interface: https://www.example.com/ixp/virtual-interface/edit/id/265 as it already exists in this Vlan [VLAN name]\n\n\n\n\nThese should all be checked manually.\n\n\nA useful SQL command to double check the results for me was:\n\n\nSELECT\n \nmac\n,\n \nCOUNT\n(\nmac\n)\n \nAS\n \nc\n \nFROM\n \nl2address\n \nGROUP\n \nBY\n \nmac\n \nHAVING\n \nCOUNT\n(\nmac\n)\n \n \n1\n;\n\n\n\n\n\n\nDiscovered MAC Addresses\n\uf0c1\n\n\nThis was the original functionality - a read-only table via an admin menu option called \nMAC Addresses -\n Discovered Addresses\n which lists entries from a database of MAC addresses which are sourced via a script from the IXP's switches directly.\n\n\nAt an IXP, it can be extremely useful to have a quick look up table to see what member owns what MAC address - especially when they start injecting illegal packets into the exchange fabric.\n\n\nWe have a script, \nupdate-l2database.pl\n, for this. To set it up (using Ubuntu as an example), proceed as below. We are in the process of trying to reduce the reliance on the perl library and direct database access. But for now, this script still requires it.\n\n\n# If you haven\nt already, install the Perl library for IXP Manager:\n\napt-get install libnet-snmp-perl libconfig-general-perl libnetaddr-ip-perl\n\ncd\n \n$IXPROOT\n/tools/perl-lib/IXPManager\nperl Makefile.PL\nmake install\n\n\n# Then copy and edit the configuration file to set the database connection settings:\n\ncp \n$IXPROOT\n/tools/perl-lib/IXPManager/ixpmanager.conf /usr/local/etc/\njoe /usr/local/etc/ixpmanager.conf \n#and set database settings\n\n\n\n# Now copy the script:\n\ncp \n$IXPROOT\n/tools/runtime/l2database/update-l2database.pl /usr/local/bin\n\n\n# and then add it to your periodic cron job with:\n\n/usr/local/bin/update-l2database.pl\n\n\n\n\n\nOUI Database\n\uf0c1\n\n\nIXP Manager can store the IEEE OUI database and reference it to show the manufacturer behind a MAC address.\n\n\nPopulating and Updating the OUI Database\n\uf0c1\n\n\nYou would typically set a weekly cron job to call:\n\n\nphp \n$IXPROOT\n/artisan utils:oui-update\n\n\n\n\n\nwhich will populate / update the OUI database directly from the latest IEEE file from their website.\n\n\nA specific file can be passed via the \nfile\n parameter. You can also force a database reset (drop all OUI entries and re-populate) via the \n--refresh\n option.\n\n\nNeither of these options are typically necessary.\n\n\nEnd User Access\n\uf0c1\n\n\nIn v4.7.3 we introduced the ability for logged in users to management their own configured MAC addresses.\n\n\nThis is disabled by default but can be enabled with the following \n.env\n settings:\n\n\n# Set this to allow customers to change their own configured MAC addresses:\nIXP_FE_LAYER2_ADDRESSES_CUST_CAN_EDIT=true\n\n# The following defaults are configured for min/max MAC addresses\nIXP_FE_LAYER2_ADDRESSES_CUST_PARAMS_MIN_ADDRESSES=1\nIXP_FE_LAYER2_ADDRESSES_CUST_PARAMS_MAX_ADDRESSES=2\n\n\n\n\n\nWhen a MAC is added, a \nIXP\\Events\\Layer2Address\\Added\n event is triggered and, similarly, when a MAC is deleted a \nIXP\\Events\\Layer2Address\\Deleted\n event is triggered. We have created an event listener for these to fire off an email in both cases. To enable this listener, set the following \n.env\n settings:\n\n\n# Trigger an email when a superuser adds/deletes a MAC:\nIXP_FE_LAYER2_ADDRESSES_EMAIL_ON_SUPERUSER_CHANGE=true\n\n# Trigger an email when a customer user adds/deletes a MAC:\nIXP_FE_LAYER2_ADDRESSES_EMAIL_ON_CUSTOMER_CHANGE=true\n\n# Destination address of the email:\nIXP_FE_LAYER2_ADDRESSES_EMAIL_ON_CHANGE_DEST=ops@ixp.example.net\n\n\n\n\n\nThere are two files you can consider \nskinning\n with this functionality:\n\n\n\n\nresources/views/layer2-address/emails/changed.blade.php\n - the email which is sent when a MAC is added / removed.\n\n\nresources/views/layer2-address/customer-edit-msg.foil.php\n - an informational alert box that is shown to the customer on the MAC add/delete page to set their expectations on time to complete on the IXP end.", 
            "title": "MAC Addresses"
        }, 
        {
            "location": "/features/layer2-addresses/#mac-addresses", 
            "text": "IXP Manager has support for layer2 / MAC addresses in two ways:   Discovered Addresses : a read-only table via an admin menu option called  MAC Addresses -  Discovered Addresses  which lists entries from a database of MAC addresses which are sourced via a script from the IXP's switches directly.  (Available since version 3.x) .  Configured Addresses : a managed table of layer2/MAC addresses, viewed by the admin menu option  MAC Addresses -  Configured Addresses . These are assigned by IXP administrators on a per VLAN interface basis.  (Available since version 4.4) .", 
            "title": "MAC Addresses"
        }, 
        {
            "location": "/features/layer2-addresses/#configured-addresses", 
            "text": "In early 2017,  INEX  migrated its primary peering LAN from a flat layer2 with spanning tree design to a VxLAN set-up with automation via Salt and Napalm  (we will insert references to presentations here once we complete all required functionality) .  Part of the requirements for this automation (and this was an existing feature request from other IXPs) was the management of MAC addresses within IXP Manager and, rather than assigning them to a virtual interface, assign them to specific VLAN interfaces.  Outside of our automation and VXLAN, other uses included:   to potentially allow members to add a MAC address during maintenance and thus have the system update a layer2 acl on the switch(es);  a static maintained database of MAC addresses for EVPN;  a static maintained database for lookups.   The features of this system are listed below.", 
            "title": "Configured Addresses"
        }, 
        {
            "location": "/features/layer2-addresses/#listing-and-searching-existing-configured-mac-addresses", 
            "text": "There is a new menu option (left hand side menu) under  MAC Addresses  called  Configured Addresses . This lists all configured MAC addresses including the OUI manufacturer (see below), associated switch / switch port(s), customer name, IPv4 and v6 addresses. You can also:   as-you-type search from the datatable search box (lowercased and filtered to a normalised MAC address);  restrict the view to a single VLAN;  action-to-move to layer 2 address add / edit / delete for a given VLAN interface;  click on a MAC to bring up a pop-up, allowing you to copy in different formats:", 
            "title": "Listing and Searching Existing Configured MAC Addresses"
        }, 
        {
            "location": "/features/layer2-addresses/#adding-removing-layer2-addresses-tofrom-a-vlan-interface", 
            "text": "When editing a customer's interface in the usual manner (customer overview -  Ports -  edit button), you will now see MAC address(es) under  VLAN Interfaces :   In the event that there is zero or more than one MAC address, the MAC address demonstrated above will be replaced with an appropriate note to indicate this.  Clicking on the MAC address (or note when none  / multiple) will bring you to the configured MAC address management page for this VLAN interface. Addresses can be added / removed on this page. MAC addresses can be entered in either upper or lower cases and can optionally include characters such as  . ,  : ,  - . These are all stripped before validation and insertion.", 
            "title": "Adding / Removing Layer2 Addresses to/from a VLAN Interface"
        }, 
        {
            "location": "/features/layer2-addresses/#extracting-addresses", 
            "text": "As automation features are still a work in progress, not all methods are listed here. Please  open an issue on GitHub  or start a discussion on the  mailing list  for whatever methods you would like.  Currently implemented (see  the API page for access details ):   An API to be used by the sflow / peer to peer graphing tool:  Virtual Interface ID to MAC address - GET request to: https://ixp.example.com/api/v4/vlan-interface/sflow-mac-table  Virtual Interface ID, VLAN interface ID, customer name and VLAN tag - GET request to: https://ixp.example.com/api/v4/vlan-interface/sflow-matrix    YAML export for automated provisioning. As yet undocumented and not suitable for general use.  Querying the database directly.  Not usually recommended as the schema may change.", 
            "title": "Extracting Addresses"
        }, 
        {
            "location": "/features/layer2-addresses/#migrating-discovered-macs-to-configured-macs", 
            "text": "INEX's use case was to switch from the  discovered MAC addresses  table to the  configured MAC addresses  table without the need to data fill all preexisting ~200 MACs. As such we have created an Artisan migration script which can be run with:  php  $IXPROOT /artisan l2addresses:populate  You will be prompted as follows:   Are you sure you wish to proceed? This command will CLEAR the layer2address table and then copy addresses from the read-only macaddress table. Generally, this command should only ever be run once when initially populating the new table.   One thing to note: as the  discovered MAC Addresses  table is per virtual interface and the new configured MAC address functionality is per VLAN interface, any MAC from  discovered MAC Addresses  that is populated into  confifured MAC Addresses  will be populated for every VLAN interface associated with the virtual interface.  The script prints notices for these such as:   Created  1 layer2address for [member name]] with virtual interface: https://www.example.com/ixp/virtual-interface/edit/id/235   The inclusion of the URL makes it easy to double check the result.  For obvious reasons, we only allow a single / unique layer2 address per VLAN. In the event that the script tries to add the same MAC more than once, it will print:   Could not add additional instance of 001122334455 for [Customer]] with virtual interface: https://www.example.com/ixp/virtual-interface/edit/id/265 as it already exists in this Vlan [VLAN name]   These should all be checked manually.  A useful SQL command to double check the results for me was:  SELECT   mac ,   COUNT ( mac )   AS   c   FROM   l2address   GROUP   BY   mac   HAVING   COUNT ( mac )     1 ;", 
            "title": "Migrating Discovered MACs to Configured MACs"
        }, 
        {
            "location": "/features/layer2-addresses/#discovered-mac-addresses", 
            "text": "This was the original functionality - a read-only table via an admin menu option called  MAC Addresses -  Discovered Addresses  which lists entries from a database of MAC addresses which are sourced via a script from the IXP's switches directly.  At an IXP, it can be extremely useful to have a quick look up table to see what member owns what MAC address - especially when they start injecting illegal packets into the exchange fabric.  We have a script,  update-l2database.pl , for this. To set it up (using Ubuntu as an example), proceed as below. We are in the process of trying to reduce the reliance on the perl library and direct database access. But for now, this script still requires it.  # If you haven t already, install the Perl library for IXP Manager: \napt-get install libnet-snmp-perl libconfig-general-perl libnetaddr-ip-perl cd   $IXPROOT /tools/perl-lib/IXPManager\nperl Makefile.PL\nmake install # Then copy and edit the configuration file to set the database connection settings: \ncp  $IXPROOT /tools/perl-lib/IXPManager/ixpmanager.conf /usr/local/etc/\njoe /usr/local/etc/ixpmanager.conf  #and set database settings  # Now copy the script: \ncp  $IXPROOT /tools/runtime/l2database/update-l2database.pl /usr/local/bin # and then add it to your periodic cron job with: \n/usr/local/bin/update-l2database.pl", 
            "title": "Discovered MAC Addresses"
        }, 
        {
            "location": "/features/layer2-addresses/#oui-database", 
            "text": "IXP Manager can store the IEEE OUI database and reference it to show the manufacturer behind a MAC address.", 
            "title": "OUI Database"
        }, 
        {
            "location": "/features/layer2-addresses/#populating-and-updating-the-oui-database", 
            "text": "You would typically set a weekly cron job to call:  php  $IXPROOT /artisan utils:oui-update  which will populate / update the OUI database directly from the latest IEEE file from their website.  A specific file can be passed via the  file  parameter. You can also force a database reset (drop all OUI entries and re-populate) via the  --refresh  option.  Neither of these options are typically necessary.", 
            "title": "Populating and Updating the OUI Database"
        }, 
        {
            "location": "/features/layer2-addresses/#end-user-access", 
            "text": "In v4.7.3 we introduced the ability for logged in users to management their own configured MAC addresses.  This is disabled by default but can be enabled with the following  .env  settings:  # Set this to allow customers to change their own configured MAC addresses:\nIXP_FE_LAYER2_ADDRESSES_CUST_CAN_EDIT=true\n\n# The following defaults are configured for min/max MAC addresses\nIXP_FE_LAYER2_ADDRESSES_CUST_PARAMS_MIN_ADDRESSES=1\nIXP_FE_LAYER2_ADDRESSES_CUST_PARAMS_MAX_ADDRESSES=2  When a MAC is added, a  IXP\\Events\\Layer2Address\\Added  event is triggered and, similarly, when a MAC is deleted a  IXP\\Events\\Layer2Address\\Deleted  event is triggered. We have created an event listener for these to fire off an email in both cases. To enable this listener, set the following  .env  settings:  # Trigger an email when a superuser adds/deletes a MAC:\nIXP_FE_LAYER2_ADDRESSES_EMAIL_ON_SUPERUSER_CHANGE=true\n\n# Trigger an email when a customer user adds/deletes a MAC:\nIXP_FE_LAYER2_ADDRESSES_EMAIL_ON_CUSTOMER_CHANGE=true\n\n# Destination address of the email:\nIXP_FE_LAYER2_ADDRESSES_EMAIL_ON_CHANGE_DEST=ops@ixp.example.net  There are two files you can consider  skinning  with this functionality:   resources/views/layer2-address/emails/changed.blade.php  - the email which is sent when a MAC is added / removed.  resources/views/layer2-address/customer-edit-msg.foil.php  - an informational alert box that is shown to the customer on the MAC add/delete page to set their expectations on time to complete on the IXP end.", 
            "title": "End User Access"
        }, 
        {
            "location": "/features/member-export/", 
            "text": "Member Export\n\uf0c1\n\n\nThe recommended means of exporting member details from IXP Manager is to use the \nIX-F Member Export\n tool. We even provide examples of how to use this to create example tables.\n\n\nHowever, you may sometimes require additional flexibility which necessitates rolling your own export templates. This \nMember Export\n feature will allow you to do this \nbut it does require some PHP programming ability\n.\n\n\nThis \nMember Export\n feature is modeled after the \nstatic content\n tool and you are advised to read that page also.\n\n\nThis feature first appears in v4.8.0 and replaces the \ndeprecated older way of handling this\n.\n\n\nOverview\n\uf0c1\n\n\nIn IXP Manager, there are four types of users as described \nin the users page\n. Member export templates can be added which requires a minimum user privilege to access (e.g. \npriv == 0\n would be publicly accessible through to \npriv == 3\n which would require a superadmin).\n\n\nTo create your own member export templte, you should first \nset up skinning\n for your installation. Let's assume you called your skin \nexample\n in the following.\n\n\nTo create a publicly accessible member export page called \nlonap\n, you would first create a directory structure in your skin as follows:\n\n\ncd\n \n${\nIXPROOT\n}\n\nmkdir -p resources/skins/example/content/members/\n{\n0,1,2,3\n}\n\n\n\n\n\n\nwhere the directories \n0, 1, 2, 3\n represent the \nminimum required user privilege\n to access the template. You can now create your export template page by creating a file:\n\n\nresources/skins/example/content/members/0/lonap.foil.php\n\n\n\n\n\nand then edit that page. In fact, we have bundled three examples in the following locations:\n\n\n\n\nresources/skins/example/content/members/3/lonap.foil.php\n: a table that replicates how LONAP have traditionally listed their members (\nsee here\n). It would be accessed via: https://ixp.example.com/content/members/3/lonap\n\n\nresources/skins/example/content/members/3/json-example.foil.php\n: a JSON example of the above. The HTTP response content type is set to JSON with \n.json\n is added to the URL. However you have to ensure your template outputs JSON also. This would be accessed via: https://ixp.example.com/content/members/3/json-example.json\n\n\nresources/skins/inex/content/members/0/list.foil.php\n: what we at INEX use to generate \nthis members list\n. You can access the real data via: https://www.inex.ie/ixp/content/members/0/list.json (not that this is publicly accessible).\n\n\n\n\nThe format of the URL to access these member export templates is:\n\n\nhttps://ixp.example.com/content/members/{priv}/{page}[.json]\n\n\n\n\n\n\n\n{priv}\n is the \nminimum required user privilege\n required to access the page and is used first for testing the user's permissions and second as the directory to check for the file.\n\n\n{page}\n is the name of the file to load (less \n.foil.php\n) and \nplease be aware that this is normalised as follows:\n\n\npreg_replace( \n/[^a-z0-9\\-_]/\n, \n, strtolower( $page ) )\n\n\n\n\ni.e. the file name can only contain characters from the class \n[a-z0-9\\-_]\n and all lower case.\n\n\n[.json]\n is an optional extension which tells IXP Manager to set the \nContent-Type: application/json\n header in the response.", 
            "title": "Member Export"
        }, 
        {
            "location": "/features/member-export/#member-export", 
            "text": "The recommended means of exporting member details from IXP Manager is to use the  IX-F Member Export  tool. We even provide examples of how to use this to create example tables.  However, you may sometimes require additional flexibility which necessitates rolling your own export templates. This  Member Export  feature will allow you to do this  but it does require some PHP programming ability .  This  Member Export  feature is modeled after the  static content  tool and you are advised to read that page also.  This feature first appears in v4.8.0 and replaces the  deprecated older way of handling this .", 
            "title": "Member Export"
        }, 
        {
            "location": "/features/member-export/#overview", 
            "text": "In IXP Manager, there are four types of users as described  in the users page . Member export templates can be added which requires a minimum user privilege to access (e.g.  priv == 0  would be publicly accessible through to  priv == 3  which would require a superadmin).  To create your own member export templte, you should first  set up skinning  for your installation. Let's assume you called your skin  example  in the following.  To create a publicly accessible member export page called  lonap , you would first create a directory structure in your skin as follows:  cd   ${ IXPROOT } \nmkdir -p resources/skins/example/content/members/ { 0,1,2,3 }   where the directories  0, 1, 2, 3  represent the  minimum required user privilege  to access the template. You can now create your export template page by creating a file:  resources/skins/example/content/members/0/lonap.foil.php  and then edit that page. In fact, we have bundled three examples in the following locations:   resources/skins/example/content/members/3/lonap.foil.php : a table that replicates how LONAP have traditionally listed their members ( see here ). It would be accessed via: https://ixp.example.com/content/members/3/lonap  resources/skins/example/content/members/3/json-example.foil.php : a JSON example of the above. The HTTP response content type is set to JSON with  .json  is added to the URL. However you have to ensure your template outputs JSON also. This would be accessed via: https://ixp.example.com/content/members/3/json-example.json  resources/skins/inex/content/members/0/list.foil.php : what we at INEX use to generate  this members list . You can access the real data via: https://www.inex.ie/ixp/content/members/0/list.json (not that this is publicly accessible).   The format of the URL to access these member export templates is:  https://ixp.example.com/content/members/{priv}/{page}[.json]   {priv}  is the  minimum required user privilege  required to access the page and is used first for testing the user's permissions and second as the directory to check for the file.  {page}  is the name of the file to load (less  .foil.php ) and  please be aware that this is normalised as follows:  preg_replace(  /[^a-z0-9\\-_]/ ,  , strtolower( $page ) )  \n\ni.e. the file name can only contain characters from the class  [a-z0-9\\-_]  and all lower case.  [.json]  is an optional extension which tells IXP Manager to set the  Content-Type: application/json  header in the response.", 
            "title": "Overview"
        }, 
        {
            "location": "/features/mailing-lists/", 
            "text": "Mailing List Management\n\uf0c1\n\n\nIXP Manager\n has the ability to allow users to subscribe / unsubscribe from Mailman mailing lists (it should be relatively easy to expand this to other mailing list managers as the functionality is based on Mailman but not Mailman specific).\n\n\nThe following sections explain the steps in how this is set up.\n\n\nNB:\n This facility does not perform a 100% synchronisation. Any mailing list members that are added separately without a matching user in IXP Manager are not interfered with.\n\n\nConfiguring Available Mailing Lists\n\uf0c1\n\n\nThere is a sample configuration file which you need to copy as follows:\n\n\ncd\n \n$IXPROOT\n\ncp config/mailinglists.php.dist config/mailinglists.php\n\n\n\n\n\nYou then need to edit this file as follows:\n\n\n\n\n\n\nEnable the mailing list functionality by setting this to true:\n\n\n// Set the following to \ntrue\n to enable mailing list functionality:\n\n\nenabled\n =\n true,\n\n\n\n\n\n\nIf this is not set to true, the user will not be offered subscription options and the CLI/API commands will not execute.\n\n\n\n\n\n\nConfigure the available mailing list(s) in the \nlists\n array. Here is an example:\n\n\nlists\n =\n [\n\n\n    \nmembers\n =\n [\n\n\n        \nname\n    =\n \nMembers\n Mailing List\n,\n\n\n        \ndesc\n    =\n \nA longer description as presented in IXP Manager.\n,\n\n\n        \nemail\n   =\n \nmembers@example.com\n,\n\n\n        \narchive\n =\n \nhttps://www.example.com/mailman/private/members/\n,\n\n\n    ],\n\n\n    \ntech\n =\n [\n\n\n        \nname\n    =\n \nTech/Operations Mailing List\n,\n\n\n        \ndesc\n    =\n \nA longer description as presented in IXP Manager.\n,\n\n\n        \nemail\n   =\n \ntech@example.com\n,\n\n\n        \narchive\n =\n \nhttps://www.example.com/mailman/private/tech/\n,\n\n\n    ],\n\n\n],\n\n\n\n\n\n\nNote that the \nmembers\n and \ntech\n array keys above are the list handles that will be used by the API interfaces later. It is also important that they match the Mailman list key.\n\n\nHistorically, mailing list passwords were also sync'd from the IXP Manager user database \nunless\n \nsyncpws\n is both defined and false for the given list. As we are now enforcing \nbcrypt\n as the standard password hashing mechanism, we no longer support this and suggest allowing Mailman to manage its own passwords.\n\n\n\n\n\n\nPaths to Mailman commands. These will be used in the API/CLI elements later:\n\n\nmailman\n =\n [\n\n\n    \ncmds\n =\n [\n\n\n        \nlist_members\n   =\n \n/usr/local/mailman/bin/list_members\n,\n\n\n        \nadd_members\n    =\n \n/usr/local/mailman/bin/add_members -r - -w n -a n\n,\n\n\n        \nremove_members\n =\n \n/usr/local/mailman/bin/remove_members -f - -n -N\n,\n\n\n        \nchangepw\n       =\n \n/usr/local/mailman/bin/withlist -q -l -r changepw\n\n\n    ]\n\n\n]\n\n\n\n\n\n\n\n\n\n\nExplanation of Usage\n\uf0c1\n\n\nThis mailing list synchronisation / integration code was written for existing Mailman lists we have at INEX where some lists are public with subscribers that will never have an account on INEX's IXP Manager. As such, these scripts are written so that email addresses in common between IXP Manager and Mailman can manage their subscriptions in IXP Manager but those other subscribers will be unaffected.\n\n\nUsers in IXP Manager will either be marked as being subscribed to a list, not subscribed to a list or neither (i.e. a new user). Subscriptions are managed by user preferences (in the database) of the format:\n\n\nmailinglist.listname1.subscribed = 0/1\n\n\n\n\n\nThere are three steps to performing the synchronisation \nfor each list\n which are done by either using the IXP Manager CLI script \nartisan mailing-list:...\n or the \nAPI\n interface.\n\n\nCLI Interface Overview\n\uf0c1\n\n\nNB:\n these relate to the CLI as implemented from IXP Manager \n= v4.7.\n\n\n\n\n\n\nThe execution of the \nartisan mailing-list:init\n script which is really for new IXP Manager users (or initial set up of the mailing list feature). This script is piped the full subscribers list from Mailman (via \nlist_members\n). This function will iterate through all users and, if they have no preference set for subscription to this list, will either add a \"not subscribed\" preference if their email address is not in the provided list of subscribers or a \"subscribed\" preference if it is.\n\n\n\n\n\n\nThe execution of the \nartisan mailing-list:get-subscribers\n action which lists all users who are subscribed to the given mailing list based on their user preferences. This is piped to the \nadd_members\n Mailman script.\n\n\n\n\n\n\nThe execution of the \nartisan mailing-list:get-subscribers --unsubscribed\n action which lists all users who are unsubscribed to the given mailing list based on their user preferences. This is piped to the \nremove_members\n Mailman script.\n\n\n\n\n\n\nAPI V4 Interface Overview\n\uf0c1\n\n\nThe API v4 implementation was added in IXP Manager v4.7. See the end of this document for the API v1 implementation in previous versions of IXP Manager.\n\n\nIf you wish to use the API version, proceed as follows where:\n\n\n\n\n$KEY\n is one of your SUPERUSER API keys (see \nhere\n for details);\n\n\nhttps://ixp.example.com\n is your IXP Manager web interface;\n\n\nmembers\n is an example mailing list handle as defined above in \n$IXPROOT/config/mailinglists.php\n.\n\n\n\n\nUse the initialisation function for new IXP Manager users (or initial set up of the mailing list feature) which updates IXP Manager with all currently subscribed mailing list members:\n\n\n/path/to/mailman/bin/list_members members \n/tmp/ml-members.txt\ncurl -f --data-urlencode addresses@/tmp/ml-members.txt \n\\\n\n    -H \nX-IXP-Manager-API-Key: \n$KEY\n -X POST\n    \nhttps://ixp.example.co/api/v4/mailing-list/init/members\n\nrm /tmp/ml-members.txt\n\n\n\n\n\nPipe all subscribed users to the \nadd_members\n Mailman script:\n\n\ncurl -f -H \nX-IXP-Manager-API-Key: \n$KEY\n -X GET \n\\\n\n    \nhttps://ixp.example.co/api/v4/mailing-list/subscribers/members\n \n|\n \n\\\n\n    /path/to/mailman/bin/add_members -r - -w n -a n members \n/dev/null\n\n\n\n\n\nPipe all users who are unsubscribed to the \nremove_members\n Mailman script:\n\n\ncurl -f -H \nX-IXP-Manager-API-Key: \n$KEY\n -X GET \n\\\n\n    \nhttps://ixp.example.co/api/v4/mailing-list/unsubscribed/members\n \n|\n \n\\\n\n    /path/to/mailman/bin/remove_members -f - -n -N members \n/dev/null\n\n\n\n\n\nHow to Implement\n\uf0c1\n\n\nYou can implement mailing list management by configuring IXP Manager as above.\n\n\nIXP Manager will generate shell scripts to manage all of the above.\n\n\nExecute the following command for the CLI version \n(and make sure to update the assignments at the top of the script)\n:\n\n\nartisan mailing-list:sync-script --sh\n\n\n\n\n\nOr the following for the API V4 version \n(and make sure to update the assignments at the top of the script)\n:\n\n\nartisan mailing-list:sync-script\n\n\n\n\n\nThis generates a script which performs each of the above four steps for each configured mailing list. If your mailing list configuration does not change, you will not need to rerun this.\n\n\nYou should now put this script into crontab on the appropriate server (same server for CLI!) and run as often as you feel is necessary. The current \nsuccess\n message for a user updating their subscriptions says \nwithin 12 hours\n so we'd recommend at least running twice a day.\n\n\nTodo\n\uf0c1\n\n\n\n\nbetter handling of multiple users with the same email address and documentation of same\n\n\nuser changes email address\n\n\n\n\nAPI V1 Interface Overview\n\uf0c1\n\n\nDEPRECATED\n and only available in IXP Manager \nv4.7.\n\n\nThe CLI version of mailing list management was presented above. If you wish to use the API version, proceed as follows where:\n\n\n\n\n$MyKey\n is one of your SUPERUSER API keys;\n\n\nhttps://www.example.com/ixp/\n is your IXP Manager web interface;\n\n\nmembers\n is an example mailing list handle as defined above in \n$IXPROOT/config/mailinglists.php\n.\n\n\n\n\nUse the initialisation function for new IXP Manager users (or initial set up of the mailing list feature) which updates IXP Manager with all currently subscribed mailing list members:\n\n\n/path/to/mailman/bin/list_members members \n/tmp/ml-listname1.txt\ncurl -f --data-urlencode addresses@/tmp/ml-listname1.txt \n\\\n\n    \nhttps://www.example.com/ixp/apiv1/mailing-list/init/key/\n$MyKey\n/list/members\n\nrm /tmp/ml-listname1.txt\n\n\n\n\n\nPipe all subscribed users to the \nadd_members\n Mailman script:\n\n\ncurl -f \nhttps://www.example.com/ixp/apiv1/mailing-list/get-subscribed/key/\n$MyKey\n/list/members\n \n|\n \n\\\n\n    /path/to/mailman/bin/add_members -r - -w n -a n members \n/dev/null\n\n\n\n\n\nPipe all users who are unsubscribed to the \nremove_members\n Mailman script:\n\n\ncurl -f \nhttps://www.example.com/ixp/apiv1/mailing-list/get-unsubscribed/key/\n$MyKey\n/list/members\n \n|\n \n\\\n\n    /path/to/mailman/bin/remove_members -f - -n -N members \n/dev/null", 
            "title": "Mailing List Management"
        }, 
        {
            "location": "/features/mailing-lists/#mailing-list-management", 
            "text": "IXP Manager  has the ability to allow users to subscribe / unsubscribe from Mailman mailing lists (it should be relatively easy to expand this to other mailing list managers as the functionality is based on Mailman but not Mailman specific).  The following sections explain the steps in how this is set up.  NB:  This facility does not perform a 100% synchronisation. Any mailing list members that are added separately without a matching user in IXP Manager are not interfered with.", 
            "title": "Mailing List Management"
        }, 
        {
            "location": "/features/mailing-lists/#configuring-available-mailing-lists", 
            "text": "There is a sample configuration file which you need to copy as follows:  cd   $IXPROOT \ncp config/mailinglists.php.dist config/mailinglists.php  You then need to edit this file as follows:    Enable the mailing list functionality by setting this to true:  // Set the following to  true  to enable mailing list functionality:  enabled  =  true,   If this is not set to true, the user will not be offered subscription options and the CLI/API commands will not execute.    Configure the available mailing list(s) in the  lists  array. Here is an example:  lists  =  [       members  =  [           name     =   Members  Mailing List ,           desc     =   A longer description as presented in IXP Manager. ,           email    =   members@example.com ,           archive  =   https://www.example.com/mailman/private/members/ ,      ],       tech  =  [           name     =   Tech/Operations Mailing List ,           desc     =   A longer description as presented in IXP Manager. ,           email    =   tech@example.com ,           archive  =   https://www.example.com/mailman/private/tech/ ,      ],  ],   Note that the  members  and  tech  array keys above are the list handles that will be used by the API interfaces later. It is also important that they match the Mailman list key.  Historically, mailing list passwords were also sync'd from the IXP Manager user database  unless   syncpws  is both defined and false for the given list. As we are now enforcing  bcrypt  as the standard password hashing mechanism, we no longer support this and suggest allowing Mailman to manage its own passwords.    Paths to Mailman commands. These will be used in the API/CLI elements later:  mailman  =  [       cmds  =  [           list_members    =   /usr/local/mailman/bin/list_members ,           add_members     =   /usr/local/mailman/bin/add_members -r - -w n -a n ,           remove_members  =   /usr/local/mailman/bin/remove_members -f - -n -N ,           changepw        =   /usr/local/mailman/bin/withlist -q -l -r changepw      ]  ]", 
            "title": "Configuring Available Mailing Lists"
        }, 
        {
            "location": "/features/mailing-lists/#explanation-of-usage", 
            "text": "This mailing list synchronisation / integration code was written for existing Mailman lists we have at INEX where some lists are public with subscribers that will never have an account on INEX's IXP Manager. As such, these scripts are written so that email addresses in common between IXP Manager and Mailman can manage their subscriptions in IXP Manager but those other subscribers will be unaffected.  Users in IXP Manager will either be marked as being subscribed to a list, not subscribed to a list or neither (i.e. a new user). Subscriptions are managed by user preferences (in the database) of the format:  mailinglist.listname1.subscribed = 0/1  There are three steps to performing the synchronisation  for each list  which are done by either using the IXP Manager CLI script  artisan mailing-list:...  or the  API  interface.", 
            "title": "Explanation of Usage"
        }, 
        {
            "location": "/features/mailing-lists/#cli-interface-overview", 
            "text": "NB:  these relate to the CLI as implemented from IXP Manager  = v4.7.    The execution of the  artisan mailing-list:init  script which is really for new IXP Manager users (or initial set up of the mailing list feature). This script is piped the full subscribers list from Mailman (via  list_members ). This function will iterate through all users and, if they have no preference set for subscription to this list, will either add a \"not subscribed\" preference if their email address is not in the provided list of subscribers or a \"subscribed\" preference if it is.    The execution of the  artisan mailing-list:get-subscribers  action which lists all users who are subscribed to the given mailing list based on their user preferences. This is piped to the  add_members  Mailman script.    The execution of the  artisan mailing-list:get-subscribers --unsubscribed  action which lists all users who are unsubscribed to the given mailing list based on their user preferences. This is piped to the  remove_members  Mailman script.", 
            "title": "CLI Interface Overview"
        }, 
        {
            "location": "/features/mailing-lists/#api-v4-interface-overview", 
            "text": "The API v4 implementation was added in IXP Manager v4.7. See the end of this document for the API v1 implementation in previous versions of IXP Manager.  If you wish to use the API version, proceed as follows where:   $KEY  is one of your SUPERUSER API keys (see  here  for details);  https://ixp.example.com  is your IXP Manager web interface;  members  is an example mailing list handle as defined above in  $IXPROOT/config/mailinglists.php .   Use the initialisation function for new IXP Manager users (or initial set up of the mailing list feature) which updates IXP Manager with all currently subscribed mailing list members:  /path/to/mailman/bin/list_members members  /tmp/ml-members.txt\ncurl -f --data-urlencode addresses@/tmp/ml-members.txt  \\ \n    -H  X-IXP-Manager-API-Key:  $KEY  -X POST\n     https://ixp.example.co/api/v4/mailing-list/init/members \nrm /tmp/ml-members.txt  Pipe all subscribed users to the  add_members  Mailman script:  curl -f -H  X-IXP-Manager-API-Key:  $KEY  -X GET  \\ \n     https://ixp.example.co/api/v4/mailing-list/subscribers/members   |   \\ \n    /path/to/mailman/bin/add_members -r - -w n -a n members  /dev/null  Pipe all users who are unsubscribed to the  remove_members  Mailman script:  curl -f -H  X-IXP-Manager-API-Key:  $KEY  -X GET  \\ \n     https://ixp.example.co/api/v4/mailing-list/unsubscribed/members   |   \\ \n    /path/to/mailman/bin/remove_members -f - -n -N members  /dev/null", 
            "title": "API V4 Interface Overview"
        }, 
        {
            "location": "/features/mailing-lists/#how-to-implement", 
            "text": "You can implement mailing list management by configuring IXP Manager as above.  IXP Manager will generate shell scripts to manage all of the above.  Execute the following command for the CLI version  (and make sure to update the assignments at the top of the script) :  artisan mailing-list:sync-script --sh  Or the following for the API V4 version  (and make sure to update the assignments at the top of the script) :  artisan mailing-list:sync-script  This generates a script which performs each of the above four steps for each configured mailing list. If your mailing list configuration does not change, you will not need to rerun this.  You should now put this script into crontab on the appropriate server (same server for CLI!) and run as often as you feel is necessary. The current  success  message for a user updating their subscriptions says  within 12 hours  so we'd recommend at least running twice a day.", 
            "title": "How to Implement"
        }, 
        {
            "location": "/features/mailing-lists/#todo", 
            "text": "better handling of multiple users with the same email address and documentation of same  user changes email address", 
            "title": "Todo"
        }, 
        {
            "location": "/features/mailing-lists/#api-v1-interface-overview", 
            "text": "DEPRECATED  and only available in IXP Manager  v4.7.  The CLI version of mailing list management was presented above. If you wish to use the API version, proceed as follows where:   $MyKey  is one of your SUPERUSER API keys;  https://www.example.com/ixp/  is your IXP Manager web interface;  members  is an example mailing list handle as defined above in  $IXPROOT/config/mailinglists.php .   Use the initialisation function for new IXP Manager users (or initial set up of the mailing list feature) which updates IXP Manager with all currently subscribed mailing list members:  /path/to/mailman/bin/list_members members  /tmp/ml-listname1.txt\ncurl -f --data-urlencode addresses@/tmp/ml-listname1.txt  \\ \n     https://www.example.com/ixp/apiv1/mailing-list/init/key/ $MyKey /list/members \nrm /tmp/ml-listname1.txt  Pipe all subscribed users to the  add_members  Mailman script:  curl -f  https://www.example.com/ixp/apiv1/mailing-list/get-subscribed/key/ $MyKey /list/members   |   \\ \n    /path/to/mailman/bin/add_members -r - -w n -a n members  /dev/null  Pipe all users who are unsubscribed to the  remove_members  Mailman script:  curl -f  https://www.example.com/ixp/apiv1/mailing-list/get-unsubscribed/key/ $MyKey /list/members   |   \\ \n    /path/to/mailman/bin/remove_members -f - -n -N members  /dev/null", 
            "title": "API V1 Interface Overview"
        }, 
        {
            "location": "/features/nagios/", 
            "text": "Nagios Monitoring\n\uf0c1\n\n\nAt \nINEX\n we use Nagios to monitor a number of production services including:\n\n\n\n\npeering LAN switches;\n\n\nmember reachability (ping v4/v6);\n\n\nmember route collector sessions;\n\n\nmember route server sessions.\n\n\n\n\nIXP Manager can generate configuration to monitor the above for you.\n\n\nNB: IXP Manager will not install and configure Nagios from scratch. You need a working Nagios installation first and then IXP Manager will automate the above areas of the configuration.\n\n\nHistorical Notes\n\uf0c1\n\n\nIf you have used Nagios on IXP Manager \n4.5, then how the configuration is generated has changed. The \nolder documentation may be available here\n. In previous versions of IXP Manager, we generated entire / monolithic Nagios configuration files. We have found in practice that this does not scale well and creates a number of limitations.\n\n\nIXP Manager \n= v4.5 now simply creates the targets on a per VLAN and protocol basis.\n\n\nSample Scripts\n\uf0c1\n\n\nYou will find sample scripts for pulling Nagios configuration from IXP Manager and reloading Nagios at:\n\n\nhttps://github.com/inex/IXP-Manager/tree/master/tools/runtime/nagios\n\n\nMonitoring Member Reachability\n\uf0c1\n\n\nWe monitor all member router interfaces (unless asked not to) via ICMP[v6] pings with Nagios. This is all controlled by the Nagios configuration created with this feature.\n\n\nTo enable / disable these checks, edit the VLAN interface configuration and set IPvX Can Ping appropriately. \nNote that when IPvX Can Ping is disabled, the host definition is created anyway as this would be used for other Nagios checks such as route collector sessions.\n\n\nThere is an additional option when editing a member's VLAN interface called \nBusy Host\n. This changes the Nagios ping fidelity from \n250.0,20%!500.0,60%\n to \n1000.0,80%!2000.0,90%\n (using the default object definitions which are configurable). This is useful for routers with slow / rate limited control planes.\n\n\nMembers are added to a number of hostgroups also:\n\n\n\n\na per-switch hostgroup;\n\n\na per cabinet hostgroup;\n\n\na per location / data centre hostgroup;\n\n\nan all members hostgroup.\n\n\n\n\nThese hostgroups are very useful to single out issues and for post-maintenance checks.\n\n\nYou can use the \nIXP Manager\n API to get the Nagios configuration for a given VLAN and protocol using the following endpoint format (both GET and POST requests work):\n\n\nhttps://ixp.example.com/api/v4/nagios/customers/{vlanid}/{protocol}\n\n\n\n\n\nwhere:\n\n\n\n\nvlanid\n is the database ID (\nDB ID\n) of the VLAN. You can find the DB ID in IXP Manager in the VLAN table (select \nVLANs\n from the left hand side menu).\n\n\nprotocol\n is either \n4\n for \nIPv4\n or 6 for \nIPv6\n.\n\n\n\n\nIf either of these are invalid, the API will return with a HTTP 404 response.\n\n\nAnd example of a target in the reponse is:\n\n\n###############################################################################################\n###\n### Packet Clearing House DNS\n###\n### Equinix DB2 (Kilcarbery) / Packet Clearing House DNS / swi1-kcp1-1.\n###\n\n### Host: 185.6.36.60 / inex.woodynet.net / Peering VLAN #1.\n\ndefine host {\n    use                     ixp-manager-member-host\n    host_name               packet-clearing-house-dns-as42-ipv4-vlanid2-vliid109\n    alias                   Packet Clearing House DNS / swi1-kcp1-1 / Peering VLAN #1.\n    address                 185.6.36.60\n}\n\n### Service: 185.6.36.60 / inex.woodynet.net / Peering VLAN #1.\n\ndefine service {\n    use                     ixp-manager-member-ping-service\n    host_name               packet-clearing-house-dns-as42-ipv4-vlanid2-vliid109\n}\n\n\n\n\n\nConfiguring Nagios for Member Reachability\n\uf0c1\n\n\nYou will notice that the above configuration example is very light and is missing an awful lot of Nagios required configuration directives. This is intentional so that IXP Manager is not too prescriptive and allows you to define your own Nagios objects without having to resort to skinning IXP Manager.\n\n\nTwo of the most important elements of Nagios configuration which you need to understand are \nobject definitions\n and \nobject inheritance\n.\n\n\nYou can pass three optional parameters to Nagios via GET/POST and these are:\n\n\n\n\nhost_definition\n; defaults to: \nixp-manager-member-host\n.\n\n\nservice_definition\n; defaults to \nixp-manager-member-service\n.\n\n\nping_service_definition\n; defaults to: \nixp-manager-member-ping-service\n.\n\n\nping_busy_service_definition\n; defaults to: \nixp-manager-member-ping-busy-service\n.\n\n\n\n\nAn example of changing two of these parameters is:\n\n\ncurl --data \nhost_definition=my-host-def\nservice_definition=my-service-def\n -X POST \n\\\n\n    -H \nContent-Type: application/x-www-form-urlencoded\n \n\\\n\n    -H \nX-IXP-Manager-API-Key: my-ixp-manager-api-key\n \n\\\n\n    https://ixpexample.com/api/v4/nagios/customers/2/4\n\n\n\n\n\nAn example of the three objects that INEX use for this are:\n\n\ndefine host {\n    name                    ixp-manager-member-host\n    check_command           check-host-alive\n    check_period            24x7\n    max_check_attempts      10\n    notification_interval   120\n    notification_period     24x7\n    notification_options    d,u,r\n    contact_groups          admins\n    register                0\n}\n\ndefine service {\n    name                    ixp-manager-member-service\n    check_period            24x7\n    max_check_attempts      10\n    check_interval          5\n    retry_check_interval    1\n    contact_groups          admins\n    notification_interval   120\n    notification_period     24x7\n    notification_options    w,u,c,r\n    register                0\n}\n\ndefine service {\n    name                    ixp-manager-member-ping-service\n    use                     ixp-manager-member-service\n    service_description     PING\n    check_command           check_ping!250.0,20%!500.0,60%\n    register                0\n}\n\ndefine service {\n    name                    ixp-manager-member-ping-busy-service\n    use                     ixp-manager-member-service\n    service_description     PING-Busy\n    check_command           check_ping!1000.0,80%!2000.0,90%\n    register                0\n}\n\n\n\n\n\nTemplates / Skinning\n\uf0c1\n\n\nYou can use \nskinning\n to make changes to the bundled \ndefault\n template or, \npreferably\n, add your own.\n\n\nLet's say you wanted to add your own template called \nmytemplate1\n and your skin is named \nmyskin\n. The best way to proceed is to copy the bundled example:\n\n\ncd\n \n$IXPROOT\n\nmkdir -p resources/skins/myskin/api/v4/nagios/customers\ncp resources/views/api/v4/nagios/customers/default.foil.php resources/skins/myskin/api/v4/nagios/customers/mytemplate1.foil.php\n\n\n\n\n\nYou can now edit this template as required. The only constraint on the template name is it can only contain characters from the classes \na-z, 0-9, -\n. \nNB:\n do not use uppercase characters.\n\n\nYou can then elect to use this template by tacking the name onto the API request:\n\n\nhttps://ixp.example.com/api/v4/nagios/customers/{vlanid}/{protocol}/{template}\n\n\n\n\n\nwhere, in this example, \n{template}\n would be: \nmytemplate1\n.\n\n\nAs a policy, INEX tends to use the bundled templates and as such they should be fit for general purpose.\n\n\nSwitch Monitoring\n\uf0c1\n\n\nWe monitor all production peering LAN switches for a number of difference services (see below).\n\n\nIXP Manager produces a host configuration for each production switch such as:\n\n\n#\n# swi2-dc1-1 - DUB01.XX.YY.ZZ, Data Centre DUB1.\n#\n\ndefine host {\n    use                     ixp-manager-production-switch\n    host_name               swi2-dc1-1.mgmt.inex.ie\n    alias                   swi2-dc1-1\n    address                 192.0.2.4\n}\n\n\n\n\n\nMembers are added to a number of hostgroups also:\n\n\n\n\nswitches per location / data centre;\n\n\nall switches in the requested infrastructure;\n\n\ngrouped by vendor name (the vendor's \nshortname\n as defined in IXP Manager);\n\n\ngrouped by vendor model (as discovered by SNMP).\n\n\n\n\nThese hostgroups are very useful when defining service checks.\n\n\nYou can use the \nIXP Manager\n API to get the Nagios configuration for a given infrastructure using the following endpoint format (both GET and POST requests work):\n\n\nhttps://ixp.example.com/api/v4/nagios/switches/{infraid}\n\n\n\n\n\nwhere:\n\n\n\n\ninfraid\n is the database ID (\nDB ID\n) of the infrastructure. You can find the DB ID in IXP Manager in the infrastructures table (select \nInfrastructures\n from the left hand side menu).\n\n\n\n\nYou can use \nskinning\n to make changes to the bundled \ndefault\n template or, \npreferably\n, add your own.\n\n\nLet's say you wanted to add your own template called \nmyswtemplate1\n and your skin is named \nmyskin\n. The best way to proceed is to copy the bundled example:\n\n\ncd\n \n$IXPROOT\n\nmkdir -p resources/skins/myskin/api/v4/nagios/switches\ncp resources/views/api/v4/nagios/switches/default.foil.php resources/skins/myskin/api/v4/nagios/switches/myswtemplate1.foil.php\n\n\n\n\n\nYou can then elect to use this template by tacking the name onto the API request:\n\n\nhttps://ixp.example.com/api/v4/nagios/switches/{infraid}/{template}\n\n\n\n\n\nwhere, in this example, \n{template}\n would be: \nmyswtemplate1\n.\n\n\nYou can pass one optional parameter to Nagios via GET/POST which is the host definition to inherit from (see customer reachability testing about for full details and examples):\n\n\ncurl --data \nhost_definition=my-sw-host-def\n -X POST \n\\\n\n    -H \nContent-Type: application/x-www-form-urlencoded\n \n\\\n\n    -H \nX-IXP-Manager-API-Key: my-ixp-manager-api-key\n \n\\\n\n    https://ixpexample.com/api/v4/nagios/switches/2\n\n\n\n\n\nService Checking\n\uf0c1\n\n\nThe recommended way to check various services on your production switches is to use the host groups created by the above switch API call. An example of the hostgroups produced include:\n\n\n\n\nixp-production-switches-infraid-2\n: all switches on an infrastructure with DB ID 2;\n\n\nixp-switches-infraid-2-dc-dub1\n: all switches in location dc-dub1;\n\n\nixp-switches-infraid-2-extreme\n: all Extreme switches on an infrastructure with DB ID 2; and\n\n\nixp-switches-infraid-2-extreme-x670g2-48x-4q\n: all Extreme switches of model X670G2-48x-4q on an infrastructure with DB ID 2.\n\n\n\n\nUsing these, you can create generic service definitions to apply to all hosts such as:\n\n\ndefine service{\n    use                             my-ixp-production-switch-service\n    hostgroup_name                  ixp-production-switches-infraid-1, ixp-production-switches-infraid-2\n    service_description             ping - IPv4\n    check_command                   check_ping_ipv4!10!100.0,10%!200.0,20%\n}\n\ndefine service  {\n    use                             my-ixp-production-switch-service\n    hostgroup_name                  ixp-production-switches-infraid-1, ixp-production-switches-infraid-2\n    service_description             SSH\n    check_command                   check_ssh\n}\n\n\n\n\n\nYou can target vendor / model specific checks as appropriate:\n\n\ndefine service{\n    use                             my-ixp-production-switch-service\n    hostgroup_name                  ixp-switches-infraid-1-extreme, ixp-switches-infraid-2-extreme\n    service_description             Chassis\n    check_command                   check_extreme_chassis\n}\n\n\n\n\n\nThe one thing you'll need to keep an eye on is adding hostgroups to service checks as you create new infrastructures / add new switch vendors / models.\n\n\nHint:\n over the years, we at \nINEX\n have written a number of switch chassis check scripts and these can be found on Github at \nbarryo/nagios-plugins\n.\n\n\nFor example the Extreme version checks and returns something like:\n\n\n\n\nOK - CPU: 5sec - 10%. Uptime: 62.8 days. PSUs: 1 - presentOK: 2 - presentOK:. Overall system power state: redundant power available. Fans: [101 - OK (4311 RPM)]: [102 - OK (9273 RPM)]: [103 - OK (4468 RPM)]: [104 - OK (9637 RPM)]: [105 - OK (4165 RPM)]: [106 - OK (9273 RPM)]:. Temp: 34'C. Memory (slot:usage%): 1:29%.\n\n\n\n\nBirdseye Daemon Monitoring\n\uf0c1\n\n\nWe monitor our Bird instances at INEX directly through Birdseye, the software we use for our \nlooking glass\n. This means it is currently tightly coupled to Bird and Birdseye until such time as we look at a second router software.\n\n\nIXP Manager produces a host and service configuration for each router such as:\n\n\ndefine host     {\n        use                     ixp-manager-host-birdseye-daemon\n        host_name               bird-rc1q-cork-ipv4\n        alias                   INEX Cork - Quarantine Route Collector - IPv4\n        address                 10.40.5.134\n        _apiurl                 http://rc1q-ipv4.cork.inex.ie/api\n}\n\ndefine service     {\n    use                     ixp-manager-service-birdseye-daemon\n    host_name               bird-rc1q-cork-ipv4\n}\n\n\n\n\n\nYou can use the \nIXP Manager\n API to get the Nagios configuration for all or a given VLAN using the following endpoint format (both GET and POST requests work):\n\n\nhttps://ixp.example.com/api/v4/nagios/birdseye-daemons\nhttps://ixp.example.com/api/v4/nagios/birdseye-daemons/{template}\nhttps://ixp.example.com/api/v4/nagios/birdseye-daemons/default/{vlanid}\nhttps://ixp.example.com/api/v4/nagios/birdseye-daemons/{template}/{vlanid}\n\n\n\n\n\nwhere:\n\n\n\n\n{template}\n is the optional skin (see below).\n\n\n{vlanid}\n is the VLAN id to limit the results to. If setting this, you need to provide a template also (or \ndefault\n for the standard template).\n\n\n\n\nYou can use \nskinning\n to make changes to the bundled \ndefault\n template or, \npreferably\n, add your own.\n\n\nLet's say you wanted to add your own template called \nmybetemplate1\n and your skin is named \nmyskin\n. The best way to proceed is to copy the bundled example:\n\n\ncd\n \n$IXPROOT\n\nmkdir -p resources/skins/myskin/api/v4/nagios/birdseye-daemons\ncp resources/views/api/v4/nagios/birdseye-daemons/default.foil.php resources/skins/myskin/api/v4/nagios/birdseye-daemons/mybetemplate1.foil.php\n\n\n\n\n\nYou can then elect to use this template by tacking the name onto the API request:\n\n\nhttps://ixp.example.com/api/v4/nagios/birdseye-daemons/{template}\n\n\n\n\n\nwhere, in this example, \n{template}\n would be: \nmybetemplate1\n.\n\n\nYou can pass two optional parameter to Nagios via GET/POST which is the host and service definition to inherit from (see customer reachability testing about for full details and examples):\n\n\ncurl --data \nhost_definition=my-be-host-def\nservice_definition=my-be-srv-def\n -X POST \n\\\n\n    -H \nContent-Type: application/x-www-form-urlencoded\n \n\\\n\n    -H \nX-IXP-Manager-API-Key: my-ixp-manager-api-key\n \n\\\n\n    https://ixpexample.com/api/v4/nagios/birdseye-daemons\n\n\n\n\n\nThe default values for the host and service definitions are \nixp-manager-host-birdseye-daemon\n and \nixp-manager-service-birdseye-daemon\n respectively.\n\n\nService Checking\n\uf0c1\n\n\nYou will need to create a parent host and service definition for the generated configuration such as:\n\n\ndefine host {\n    name                    ixp-manager-host-birdseye-daemon\n    check_command           check-host-alive\n    check_period            24x7\n    max_check_attempts      10\n    notification_interval   120\n    notification_period     24x7\n    notification_options    d,u,r\n    contact_groups          admins\n    register                0\n}\n\ndefine service {\n    name                    ixp-manager-service-birdseye-daemon\n    service_description     Bird BGP Service\n    check_command           check_birdseye_daemon!$_HOSTAPIURL$\n    check_period            24x7\n    max_check_attempts      10\n    check_interval          5\n    retry_check_interval    1\n    contact_groups          admins\n    notification_interval   120\n    notification_period     24x7\n    notification_options    w,u,c,r\n    register                0\n}\n\ndefine command{\n        command_name    check_birdseye_daemon\n        command_line    /usr/local/nagios-plugins-other/nagios-check-birdseye.php -a $ARG1$\n}\n\n\n\n\n\nThe Nagios script we use is bundled with \ninex/birdseye\n and can be found \nhere\n.\n\n\nTypical Nagios state output:\n\n\n\n\nOK: Bird 1.6.2. Bird's Eye 1.0.4. Router ID 192.0.2.126. Uptime: 235 days. Last Reconfigure: 2017-07-17 16:00:04.26 BGP sessions up of 28.\n\n\n\n\nBirdseye BGP Session Monitoring\n\uf0c1\n\n\nWe monitor our Bird route collector, route server and AS112 Bird BGP sessions at INEX directly through Birdseye, the software we use for our \nlooking glass\n. This means it is currently tightly coupled to Bird and Birdseye until such time as we look at a second router software.\n\n\nIXP Manager produces a host and service configuration for each router type such as:\n\n\n### Router: INEX LAN1 - Route Collector - IPv4 / 192.0.2.126.\n\ndefine service     {\n    use                     ixp-manager-member-bgp-session-service\n    host_name               as112-reverse-dns-as112-ipv4-vlanid2-vliid99\n    service_description     BGP session to rc1-lan1-ipv4 (INEX LAN1 - Route Collector - IPv4)\n    _api_url                http://www.example.com/api\n    _protocol               pb_0099_as112\n}\n\n\n\n\n\nThe configuration also includes hostgroups for the given VLAN, protocol and type for:\n\n\n\n\nper-router;\n\n\nall sessions.\n\n\n\n\nYou can use the \nIXP Manager\n API to get the Nagios configuration for a given protocol, VLAN and router type using the following templates:\n\n\nhttps://ixp.example.com/api/v4/nagios/birdseye-bgp-sessions/{vlanid}/{protocol}/{type}\nhttps://ixp.example.com/api/v4/nagios/birdseye-bgp-sessions/{vlanid}/{protocol}/{type}/{template}\n\n\n\n\n\nwhere:\n\n\n\n\n{vlanid}\n is the VLAN id to generate the configuration for.\n\n\n{protocol}\n is either 4 (ipv4) or 6 (ipv6).\n\n\n{type}\n is one of (these are defined in \nEntities\\Router\n):\n\n\n1\n for route servers;\n\n\n2\n for route collectors;\n\n\n3\n for AS112\n\n\n\n\nYou can use \nskinning\n to make changes to the bundled \ndefault\n template or, \npreferably\n, add your own.\n\n\nLet's say you wanted to add your own template called \nmyrstemplate1\n and your skin is named \nmyskin\n. The best way to proceed is to copy the bundled example:\n\n\ncd\n \n$IXPROOT\n\nmkdir -p resources/skins/myskin/api/v4/nagios/birdseye-bgp-sessions\ncp resources/views/api/v4/nagios/birdseye-bgp-sessions/default.foil.php resources/skins/myskin/api/v4/nagios/birdseye-bgp-sessions/myrstemplate1.foil.php\n\n\n\n\n\nYou can then elect to use this template by tacking the name onto the API request:\n\n\nhttps://ixp.example.com/api/v4/nagios/birdseye-bgp-sessions/{vlanid}/{protocol}/{type}/{template}\n\n\n\n\n\nwhere, in this example, \n{template}\n would be: \nmyrstemplate1\n.\n\n\nYou can pass one optional parameter to Nagios via GET/POST which is the service definition to inherit from (see customer reachability testing about for full details and examples):\n\n\ncurl --data \nservice_definition=my-rs-srv-def\n -X POST \n\\\n\n    -H \nContent-Type: application/x-www-form-urlencoded\n \n\\\n\n    -H \nX-IXP-Manager-API-Key: my-ixp-manager-api-key\n \n\\\n\n    https://ixpexample.com/api/v4/nagios/birdseye-bgpsessions/2/4/1\n\n\n\n\n\nThe default values for the service definition is \nixp-manager-member-bgp-session-service\n respectively.\n\n\nService Checking\n\uf0c1\n\n\nYou will need to create a parent service definition and a check command for the generated configuration such as:\n\n\ndefine service {\n    name                    ixp-manager-member-bgp-session-service\n    service_description     Member Bird BGP Sessions\n    check_period            24x7\n    max_check_attempts      10\n    check_interval          5\n    retry_check_interval    1\n    contact_groups          admins\n    notification_interval   120\n    notification_period     24x7\n    notification_options    w,u,c,r\n    register                0\n    check_command           check_birdseye_bgp_session!$_SERVICEAPIURL!$_SERVICEPROTOCOL\n}\n\ndefine command{\n    command_name    check_birdseye_bgp_session\n    command_line    /path/to/nagios-check-birdseye-bgp-sessions.php -a $ARG1$ -p $ARG2$ -n\n}\n\n\n\n\n\nThe Nagios script we use is bundled with \ninex/birdseye\n and can be found \nhere\n.", 
            "title": "Nagios"
        }, 
        {
            "location": "/features/nagios/#nagios-monitoring", 
            "text": "At  INEX  we use Nagios to monitor a number of production services including:   peering LAN switches;  member reachability (ping v4/v6);  member route collector sessions;  member route server sessions.   IXP Manager can generate configuration to monitor the above for you.  NB: IXP Manager will not install and configure Nagios from scratch. You need a working Nagios installation first and then IXP Manager will automate the above areas of the configuration.", 
            "title": "Nagios Monitoring"
        }, 
        {
            "location": "/features/nagios/#historical-notes", 
            "text": "If you have used Nagios on IXP Manager  4.5, then how the configuration is generated has changed. The  older documentation may be available here . In previous versions of IXP Manager, we generated entire / monolithic Nagios configuration files. We have found in practice that this does not scale well and creates a number of limitations.  IXP Manager  = v4.5 now simply creates the targets on a per VLAN and protocol basis.", 
            "title": "Historical Notes"
        }, 
        {
            "location": "/features/nagios/#sample-scripts", 
            "text": "You will find sample scripts for pulling Nagios configuration from IXP Manager and reloading Nagios at:  https://github.com/inex/IXP-Manager/tree/master/tools/runtime/nagios", 
            "title": "Sample Scripts"
        }, 
        {
            "location": "/features/nagios/#monitoring-member-reachability", 
            "text": "We monitor all member router interfaces (unless asked not to) via ICMP[v6] pings with Nagios. This is all controlled by the Nagios configuration created with this feature.  To enable / disable these checks, edit the VLAN interface configuration and set IPvX Can Ping appropriately.  Note that when IPvX Can Ping is disabled, the host definition is created anyway as this would be used for other Nagios checks such as route collector sessions.  There is an additional option when editing a member's VLAN interface called  Busy Host . This changes the Nagios ping fidelity from  250.0,20%!500.0,60%  to  1000.0,80%!2000.0,90%  (using the default object definitions which are configurable). This is useful for routers with slow / rate limited control planes.  Members are added to a number of hostgroups also:   a per-switch hostgroup;  a per cabinet hostgroup;  a per location / data centre hostgroup;  an all members hostgroup.   These hostgroups are very useful to single out issues and for post-maintenance checks.  You can use the  IXP Manager  API to get the Nagios configuration for a given VLAN and protocol using the following endpoint format (both GET and POST requests work):  https://ixp.example.com/api/v4/nagios/customers/{vlanid}/{protocol}  where:   vlanid  is the database ID ( DB ID ) of the VLAN. You can find the DB ID in IXP Manager in the VLAN table (select  VLANs  from the left hand side menu).  protocol  is either  4  for  IPv4  or 6 for  IPv6 .   If either of these are invalid, the API will return with a HTTP 404 response.  And example of a target in the reponse is:  ###############################################################################################\n###\n### Packet Clearing House DNS\n###\n### Equinix DB2 (Kilcarbery) / Packet Clearing House DNS / swi1-kcp1-1.\n###\n\n### Host: 185.6.36.60 / inex.woodynet.net / Peering VLAN #1.\n\ndefine host {\n    use                     ixp-manager-member-host\n    host_name               packet-clearing-house-dns-as42-ipv4-vlanid2-vliid109\n    alias                   Packet Clearing House DNS / swi1-kcp1-1 / Peering VLAN #1.\n    address                 185.6.36.60\n}\n\n### Service: 185.6.36.60 / inex.woodynet.net / Peering VLAN #1.\n\ndefine service {\n    use                     ixp-manager-member-ping-service\n    host_name               packet-clearing-house-dns-as42-ipv4-vlanid2-vliid109\n}", 
            "title": "Monitoring Member Reachability"
        }, 
        {
            "location": "/features/nagios/#configuring-nagios-for-member-reachability", 
            "text": "You will notice that the above configuration example is very light and is missing an awful lot of Nagios required configuration directives. This is intentional so that IXP Manager is not too prescriptive and allows you to define your own Nagios objects without having to resort to skinning IXP Manager.  Two of the most important elements of Nagios configuration which you need to understand are  object definitions  and  object inheritance .  You can pass three optional parameters to Nagios via GET/POST and these are:   host_definition ; defaults to:  ixp-manager-member-host .  service_definition ; defaults to  ixp-manager-member-service .  ping_service_definition ; defaults to:  ixp-manager-member-ping-service .  ping_busy_service_definition ; defaults to:  ixp-manager-member-ping-busy-service .   An example of changing two of these parameters is:  curl --data  host_definition=my-host-def service_definition=my-service-def  -X POST  \\ \n    -H  Content-Type: application/x-www-form-urlencoded   \\ \n    -H  X-IXP-Manager-API-Key: my-ixp-manager-api-key   \\ \n    https://ixpexample.com/api/v4/nagios/customers/2/4  An example of the three objects that INEX use for this are:  define host {\n    name                    ixp-manager-member-host\n    check_command           check-host-alive\n    check_period            24x7\n    max_check_attempts      10\n    notification_interval   120\n    notification_period     24x7\n    notification_options    d,u,r\n    contact_groups          admins\n    register                0\n}\n\ndefine service {\n    name                    ixp-manager-member-service\n    check_period            24x7\n    max_check_attempts      10\n    check_interval          5\n    retry_check_interval    1\n    contact_groups          admins\n    notification_interval   120\n    notification_period     24x7\n    notification_options    w,u,c,r\n    register                0\n}\n\ndefine service {\n    name                    ixp-manager-member-ping-service\n    use                     ixp-manager-member-service\n    service_description     PING\n    check_command           check_ping!250.0,20%!500.0,60%\n    register                0\n}\n\ndefine service {\n    name                    ixp-manager-member-ping-busy-service\n    use                     ixp-manager-member-service\n    service_description     PING-Busy\n    check_command           check_ping!1000.0,80%!2000.0,90%\n    register                0\n}", 
            "title": "Configuring Nagios for Member Reachability"
        }, 
        {
            "location": "/features/nagios/#templates-skinning", 
            "text": "You can use  skinning  to make changes to the bundled  default  template or,  preferably , add your own.  Let's say you wanted to add your own template called  mytemplate1  and your skin is named  myskin . The best way to proceed is to copy the bundled example:  cd   $IXPROOT \nmkdir -p resources/skins/myskin/api/v4/nagios/customers\ncp resources/views/api/v4/nagios/customers/default.foil.php resources/skins/myskin/api/v4/nagios/customers/mytemplate1.foil.php  You can now edit this template as required. The only constraint on the template name is it can only contain characters from the classes  a-z, 0-9, - .  NB:  do not use uppercase characters.  You can then elect to use this template by tacking the name onto the API request:  https://ixp.example.com/api/v4/nagios/customers/{vlanid}/{protocol}/{template}  where, in this example,  {template}  would be:  mytemplate1 .  As a policy, INEX tends to use the bundled templates and as such they should be fit for general purpose.", 
            "title": "Templates / Skinning"
        }, 
        {
            "location": "/features/nagios/#switch-monitoring", 
            "text": "We monitor all production peering LAN switches for a number of difference services (see below).  IXP Manager produces a host configuration for each production switch such as:  #\n# swi2-dc1-1 - DUB01.XX.YY.ZZ, Data Centre DUB1.\n#\n\ndefine host {\n    use                     ixp-manager-production-switch\n    host_name               swi2-dc1-1.mgmt.inex.ie\n    alias                   swi2-dc1-1\n    address                 192.0.2.4\n}  Members are added to a number of hostgroups also:   switches per location / data centre;  all switches in the requested infrastructure;  grouped by vendor name (the vendor's  shortname  as defined in IXP Manager);  grouped by vendor model (as discovered by SNMP).   These hostgroups are very useful when defining service checks.  You can use the  IXP Manager  API to get the Nagios configuration for a given infrastructure using the following endpoint format (both GET and POST requests work):  https://ixp.example.com/api/v4/nagios/switches/{infraid}  where:   infraid  is the database ID ( DB ID ) of the infrastructure. You can find the DB ID in IXP Manager in the infrastructures table (select  Infrastructures  from the left hand side menu).   You can use  skinning  to make changes to the bundled  default  template or,  preferably , add your own.  Let's say you wanted to add your own template called  myswtemplate1  and your skin is named  myskin . The best way to proceed is to copy the bundled example:  cd   $IXPROOT \nmkdir -p resources/skins/myskin/api/v4/nagios/switches\ncp resources/views/api/v4/nagios/switches/default.foil.php resources/skins/myskin/api/v4/nagios/switches/myswtemplate1.foil.php  You can then elect to use this template by tacking the name onto the API request:  https://ixp.example.com/api/v4/nagios/switches/{infraid}/{template}  where, in this example,  {template}  would be:  myswtemplate1 .  You can pass one optional parameter to Nagios via GET/POST which is the host definition to inherit from (see customer reachability testing about for full details and examples):  curl --data  host_definition=my-sw-host-def  -X POST  \\ \n    -H  Content-Type: application/x-www-form-urlencoded   \\ \n    -H  X-IXP-Manager-API-Key: my-ixp-manager-api-key   \\ \n    https://ixpexample.com/api/v4/nagios/switches/2", 
            "title": "Switch Monitoring"
        }, 
        {
            "location": "/features/nagios/#service-checking", 
            "text": "The recommended way to check various services on your production switches is to use the host groups created by the above switch API call. An example of the hostgroups produced include:   ixp-production-switches-infraid-2 : all switches on an infrastructure with DB ID 2;  ixp-switches-infraid-2-dc-dub1 : all switches in location dc-dub1;  ixp-switches-infraid-2-extreme : all Extreme switches on an infrastructure with DB ID 2; and  ixp-switches-infraid-2-extreme-x670g2-48x-4q : all Extreme switches of model X670G2-48x-4q on an infrastructure with DB ID 2.   Using these, you can create generic service definitions to apply to all hosts such as:  define service{\n    use                             my-ixp-production-switch-service\n    hostgroup_name                  ixp-production-switches-infraid-1, ixp-production-switches-infraid-2\n    service_description             ping - IPv4\n    check_command                   check_ping_ipv4!10!100.0,10%!200.0,20%\n}\n\ndefine service  {\n    use                             my-ixp-production-switch-service\n    hostgroup_name                  ixp-production-switches-infraid-1, ixp-production-switches-infraid-2\n    service_description             SSH\n    check_command                   check_ssh\n}  You can target vendor / model specific checks as appropriate:  define service{\n    use                             my-ixp-production-switch-service\n    hostgroup_name                  ixp-switches-infraid-1-extreme, ixp-switches-infraid-2-extreme\n    service_description             Chassis\n    check_command                   check_extreme_chassis\n}  The one thing you'll need to keep an eye on is adding hostgroups to service checks as you create new infrastructures / add new switch vendors / models.  Hint:  over the years, we at  INEX  have written a number of switch chassis check scripts and these can be found on Github at  barryo/nagios-plugins .  For example the Extreme version checks and returns something like:   OK - CPU: 5sec - 10%. Uptime: 62.8 days. PSUs: 1 - presentOK: 2 - presentOK:. Overall system power state: redundant power available. Fans: [101 - OK (4311 RPM)]: [102 - OK (9273 RPM)]: [103 - OK (4468 RPM)]: [104 - OK (9637 RPM)]: [105 - OK (4165 RPM)]: [106 - OK (9273 RPM)]:. Temp: 34'C. Memory (slot:usage%): 1:29%.", 
            "title": "Service Checking"
        }, 
        {
            "location": "/features/nagios/#birdseye-daemon-monitoring", 
            "text": "We monitor our Bird instances at INEX directly through Birdseye, the software we use for our  looking glass . This means it is currently tightly coupled to Bird and Birdseye until such time as we look at a second router software.  IXP Manager produces a host and service configuration for each router such as:  define host     {\n        use                     ixp-manager-host-birdseye-daemon\n        host_name               bird-rc1q-cork-ipv4\n        alias                   INEX Cork - Quarantine Route Collector - IPv4\n        address                 10.40.5.134\n        _apiurl                 http://rc1q-ipv4.cork.inex.ie/api\n}\n\ndefine service     {\n    use                     ixp-manager-service-birdseye-daemon\n    host_name               bird-rc1q-cork-ipv4\n}  You can use the  IXP Manager  API to get the Nagios configuration for all or a given VLAN using the following endpoint format (both GET and POST requests work):  https://ixp.example.com/api/v4/nagios/birdseye-daemons\nhttps://ixp.example.com/api/v4/nagios/birdseye-daemons/{template}\nhttps://ixp.example.com/api/v4/nagios/birdseye-daemons/default/{vlanid}\nhttps://ixp.example.com/api/v4/nagios/birdseye-daemons/{template}/{vlanid}  where:   {template}  is the optional skin (see below).  {vlanid}  is the VLAN id to limit the results to. If setting this, you need to provide a template also (or  default  for the standard template).   You can use  skinning  to make changes to the bundled  default  template or,  preferably , add your own.  Let's say you wanted to add your own template called  mybetemplate1  and your skin is named  myskin . The best way to proceed is to copy the bundled example:  cd   $IXPROOT \nmkdir -p resources/skins/myskin/api/v4/nagios/birdseye-daemons\ncp resources/views/api/v4/nagios/birdseye-daemons/default.foil.php resources/skins/myskin/api/v4/nagios/birdseye-daemons/mybetemplate1.foil.php  You can then elect to use this template by tacking the name onto the API request:  https://ixp.example.com/api/v4/nagios/birdseye-daemons/{template}  where, in this example,  {template}  would be:  mybetemplate1 .  You can pass two optional parameter to Nagios via GET/POST which is the host and service definition to inherit from (see customer reachability testing about for full details and examples):  curl --data  host_definition=my-be-host-def service_definition=my-be-srv-def  -X POST  \\ \n    -H  Content-Type: application/x-www-form-urlencoded   \\ \n    -H  X-IXP-Manager-API-Key: my-ixp-manager-api-key   \\ \n    https://ixpexample.com/api/v4/nagios/birdseye-daemons  The default values for the host and service definitions are  ixp-manager-host-birdseye-daemon  and  ixp-manager-service-birdseye-daemon  respectively.", 
            "title": "Birdseye Daemon Monitoring"
        }, 
        {
            "location": "/features/nagios/#service-checking_1", 
            "text": "You will need to create a parent host and service definition for the generated configuration such as:  define host {\n    name                    ixp-manager-host-birdseye-daemon\n    check_command           check-host-alive\n    check_period            24x7\n    max_check_attempts      10\n    notification_interval   120\n    notification_period     24x7\n    notification_options    d,u,r\n    contact_groups          admins\n    register                0\n}\n\ndefine service {\n    name                    ixp-manager-service-birdseye-daemon\n    service_description     Bird BGP Service\n    check_command           check_birdseye_daemon!$_HOSTAPIURL$\n    check_period            24x7\n    max_check_attempts      10\n    check_interval          5\n    retry_check_interval    1\n    contact_groups          admins\n    notification_interval   120\n    notification_period     24x7\n    notification_options    w,u,c,r\n    register                0\n}\n\ndefine command{\n        command_name    check_birdseye_daemon\n        command_line    /usr/local/nagios-plugins-other/nagios-check-birdseye.php -a $ARG1$\n}  The Nagios script we use is bundled with  inex/birdseye  and can be found  here .  Typical Nagios state output:   OK: Bird 1.6.2. Bird's Eye 1.0.4. Router ID 192.0.2.126. Uptime: 235 days. Last Reconfigure: 2017-07-17 16:00:04.26 BGP sessions up of 28.", 
            "title": "Service Checking"
        }, 
        {
            "location": "/features/nagios/#birdseye-bgp-session-monitoring", 
            "text": "We monitor our Bird route collector, route server and AS112 Bird BGP sessions at INEX directly through Birdseye, the software we use for our  looking glass . This means it is currently tightly coupled to Bird and Birdseye until such time as we look at a second router software.  IXP Manager produces a host and service configuration for each router type such as:  ### Router: INEX LAN1 - Route Collector - IPv4 / 192.0.2.126.\n\ndefine service     {\n    use                     ixp-manager-member-bgp-session-service\n    host_name               as112-reverse-dns-as112-ipv4-vlanid2-vliid99\n    service_description     BGP session to rc1-lan1-ipv4 (INEX LAN1 - Route Collector - IPv4)\n    _api_url                http://www.example.com/api\n    _protocol               pb_0099_as112\n}  The configuration also includes hostgroups for the given VLAN, protocol and type for:   per-router;  all sessions.   You can use the  IXP Manager  API to get the Nagios configuration for a given protocol, VLAN and router type using the following templates:  https://ixp.example.com/api/v4/nagios/birdseye-bgp-sessions/{vlanid}/{protocol}/{type}\nhttps://ixp.example.com/api/v4/nagios/birdseye-bgp-sessions/{vlanid}/{protocol}/{type}/{template}  where:   {vlanid}  is the VLAN id to generate the configuration for.  {protocol}  is either 4 (ipv4) or 6 (ipv6).  {type}  is one of (these are defined in  Entities\\Router ):  1  for route servers;  2  for route collectors;  3  for AS112   You can use  skinning  to make changes to the bundled  default  template or,  preferably , add your own.  Let's say you wanted to add your own template called  myrstemplate1  and your skin is named  myskin . The best way to proceed is to copy the bundled example:  cd   $IXPROOT \nmkdir -p resources/skins/myskin/api/v4/nagios/birdseye-bgp-sessions\ncp resources/views/api/v4/nagios/birdseye-bgp-sessions/default.foil.php resources/skins/myskin/api/v4/nagios/birdseye-bgp-sessions/myrstemplate1.foil.php  You can then elect to use this template by tacking the name onto the API request:  https://ixp.example.com/api/v4/nagios/birdseye-bgp-sessions/{vlanid}/{protocol}/{type}/{template}  where, in this example,  {template}  would be:  myrstemplate1 .  You can pass one optional parameter to Nagios via GET/POST which is the service definition to inherit from (see customer reachability testing about for full details and examples):  curl --data  service_definition=my-rs-srv-def  -X POST  \\ \n    -H  Content-Type: application/x-www-form-urlencoded   \\ \n    -H  X-IXP-Manager-API-Key: my-ixp-manager-api-key   \\ \n    https://ixpexample.com/api/v4/nagios/birdseye-bgpsessions/2/4/1  The default values for the service definition is  ixp-manager-member-bgp-session-service  respectively.", 
            "title": "Birdseye BGP Session Monitoring"
        }, 
        {
            "location": "/features/nagios/#service-checking_2", 
            "text": "You will need to create a parent service definition and a check command for the generated configuration such as:  define service {\n    name                    ixp-manager-member-bgp-session-service\n    service_description     Member Bird BGP Sessions\n    check_period            24x7\n    max_check_attempts      10\n    check_interval          5\n    retry_check_interval    1\n    contact_groups          admins\n    notification_interval   120\n    notification_period     24x7\n    notification_options    w,u,c,r\n    register                0\n    check_command           check_birdseye_bgp_session!$_SERVICEAPIURL!$_SERVICEPROTOCOL\n}\n\ndefine command{\n    command_name    check_birdseye_bgp_session\n    command_line    /path/to/nagios-check-birdseye-bgp-sessions.php -a $ARG1$ -p $ARG2$ -n\n}  The Nagios script we use is bundled with  inex/birdseye  and can be found  here .", 
            "title": "Service Checking"
        }, 
        {
            "location": "/features/patch-panels/", 
            "text": "Patch Panels / Cross Connects\n\uf0c1\n\n\nOne of the more difficult things for an IXP to manage is the sheer volume of patch panels / cross connects they need to manage. We have approached the issue a number of times in IXP Manger but abandoned the attempt every time. Typically our original solutions were over-engineered where all we really needed was something which could replace a spreadsheet per panel.\n\n\nWe believe we have now developed a feature complete and useful means of managing patch panels and associated cross connects.\n\n\nFeatures\n\uf0c1\n\n\n\n\nAdd / edit patch panels  (which includes cable and connector types).\n\n\nList associated patch panel ports which includes:\n\n\ntheir state (such as available / prewired, awaiting cross connect, connected, awaiting cease, reserved, broken).\n\n\nassociated customer and/or switchport.\n\n\nco-location provider's circuit reference.\n\n\ninternal ticket references.\n\n\nTransition ports from available / prewired to awaiting x-connect to connected to awaiting cease to ceased and then available again.\n\n\nCustomer view of their cross connects.\n\n\nPublic (visible to customers) and private notes per cross connect.\n\n\nAttach public and private files to cross connects (such as test results, completion documents, order forms, etc).\n\n\nMaintain complete history of a patch panel port.\n\n\nGenerate and email LoAs (as PDF) with a URL verification function for co-location providers.\n\n\nGenerate emails for connection and cease requests as well as an email providing full customer view of a cross connect.\n\n\nTypically fibre ports are \nduplex\n ports but there is a growing use of BiDi optics meaning simplex ports. Our implementation treats all ports as simplex but you can mark it as duplex and set its partner port.\n\n\n\n\nDuplex Fibre Ports\n\uf0c1\n\n\nWe suggest adding fibre ports as two ports per duplex port. I.e. if your patch panel has 12 duplex ports, enter this as 24 ports. When allocating ports later, you can set it as a duplex port and select its \npartner / slave port\n. This will future proof your patch panels for the growing use of bidi optics and other simplex based xWDM fibre solutions.\n\n\nFrom our experience, duplex fibre ports are often identified as their individual strands. For example, \nduplex port 5\n would be referenced as \nF9/F10\n.\n\n\nYour mileage may vary on this but we need to allow this flexibility to cover both use-cases. You always have options however:\n\n\n\n\nyou can change the presentation of how these ports are referenced externally by \nskinning\n the templates.\n\n\nyou have the option to edit emails before they are sent to also present this as you wish.\n\n\nyou can chose to treat duplex ports as single ports rather than doubling them up.\n\n\nwhen you have duplex ports on a patch panel, IXP Manager will provide a duplex view by default with a CSS-based toggle to reveal the typical partner ports.\n\n\nif you think IXP Manager can make this easier, please talk to us. \nBut we cannot cover every use case programatically. We've opted to allow flexibility rather than dictate a particular format.\n\n\n\n\nAdding a Patch Panel\n\uf0c1\n\n\nThe following image shows a typical \nadd a new patch panel\n form (as of v4.3). You'll note that clicking \nHelp\n provides detailed context aware help messages.\n\n\n\n\nMost of this is self-explanatory but:\n\n\n\n\nBy default, we set the \nColocation Reference\n to the \nPatch Panel Name\n. We are not sure it's a good idea for IXPs to create a second name different to the co-location provider's but this option is available to you. \nSeriously, think about what you are doing here - more references means more confusion!\n The cabinet and cable type is displayed in the list of patch panels so even with obscure data centre references, it should be easy to find what you need.\n\n\nLocation Notes\n: Data centre / co-location providers do a lot of weird, wonderful and strange things! They provide multiple references for a single patch panel (IXP cabinet, MMR, etc.), they get taken over and re-reference everything or even provide no discernable reference. The field is a freetext field that will be included (and parsed as Markdown) in all emails generated by IXP Manager to help you help them identify a patch panel!\n\n\n\n\nIn addition to that, we will also use a cabinets \nU's are counted from top/bottom\n, and a patch panel's \nU position\n and \nmounted at front/rear\n to also create a location description.\n\n When setting the \nNumber of Ports\n, ensure you count duplex fibre ports as \ntwo ports\n. So 12 duplex fibre ports would be entered as 24. When editing a patch panel, this input field represents the number of additional ports you want to add to a patch panel and thus defaults to 0 in that situation.\n\n \nPort Name Prefix\n: This is an optional field intended for use on fibre patch panels. As an example, you may wish to prefix individual fibre strands in a duplex port with F which would mean the name of a duplex port would be displayed as F1/F2.\n* \nChargeable\n: Usually IXPs request their members to come to them and bear the costs of that. However, sometimes a co-location facility may charge the IXP for a half circuit or the IXP may need order and pay for the connection. Setting this only sets the default option when allocating ports to members later. The options are Yes / No / Half / Other.\n\n\nFiltering Patch Panel Ports\n\uf0c1\n\n\nQuite often, all you are looking for is a free in a particular location (data centre) or cabinet of a particular cable type (UTP / SMF / etc.).\n\n\nIXP Manager makes this easy from the \nPatch Panels\n page via the top right button labeled \nFilter Options\n. When clicked, this yields an advanced search as follows:\n\n\n\n\nCabinets auto-fills when you chose (or change) a location.\n\n\nPatch Panel Port States\n\uf0c1\n\n\nA patch panel port can have the following states:\n\n\n\n\nAvailable\n: The port is free and available for use.\n\n\nPrewired\n: This is equivalent to available but it means the port is prewired to a given switchport (you set the port when setting the prewired status). This is useful for IXPs that prewire a bunch of ports to avoid remote hands costs / data centre visits.\n\n\nAwaiting Xconnect\n: Port has been assigned to a member and we are awaiting the co-location provider to install the cross connect. In this state, context aware actions such as emailing connection requests, LoA generation and \nSet Connected\n are all available.\n\n\nConnected\n: Connected and in use.\n\n\nAwaiting Cease\n: This connection is no longer required and we are awaiting the end user / co-location provider to cease the connection.\n\n\nCeased\n: You will never see a ceased state. When a cross connect is marked as ceased, it's current state is archived (for history, include files) and the port is reset to \nAvailable\n. We do not revert to \nPrewired\n but an information message is shown to the user to hint this.\n\n\nReserved\n: Useful to mark particular ports as \noff limits\n for whatever reason.\n\n\nBroken\n\n\nOther\n\n\n\n\nFree / Available Ports\n\uf0c1\n\n\nIXP Manager will colour ports in the \nAvailable\n, \nPrewired\n and \nAwaiting Cease\n states are green allowing an easy visual indication of available ports.\n\n\nPatch Panel Port Lifecycle\n\uf0c1\n\n\nPatch panel ports start as either \navailable\n or \nprewired\n. The context menu in these states is:\n\n\n\n\n\n\nUnset Prewired\n is available as this port has a \nPrewired\n status. Clicking this reverts it to plain \nAvailable\n and disassociates it from the prewired port.\n\n\nEdit Note...\n is always available and provides a pop up to edit public and private notes associated with the port (current lifecycle - ceased ports have their notes at that time archived and cleared).\n\n\n\n\nThe main lifecycle option here is \nAllocate\n:\n\n\n\n\n\n\n\n\nDescription\n: A one line short description to be shown in the list of patch panel ports. Just enough to help explain the ports purpose. Detailed information should be placed in the notes section. Can also be used to explain a reserved / broken / other port. Note that this is parsed as Markdown. \nNB:\n A description is discouraged for customer ports connected to a switch. The customer name and switch port are the description.\n\n\n\n\n\n\nColocation Circuit Reference\n: this is the reference provided by the colocation provider to uniquely reference this cross connect.\n\n\n\n\n\n\nTicket Reference(s)\n: This is a free text field to be used by IXPs as they wish. The intended use is to enter helpdesk ticket references that relate to this cross connect order.\n\n\n\n\n\n\nDuplex connection?\n: Clicking this allows you to select the slave port for duplex connections.\n\n\n\n\n\n\nSwitch / Switch Port\n / \nCustomer\n: You have a number of options when allocating a port:\n\n\n\n\n\n\nIf the port is pre-wired then the switch / switch port will be set here.\n\n\n\n\nIf you chose a switch port which has been allocated to a customer, then this patch panel port will also be allocated to that customer. The backend logic will detect if this is the case and update the customer field.\n\n\nConversely, if you chose a customer first, the switch / switch port dropdowns will be populated with only that customer's assigned ports.\n\n\nSometimes you will get cross connects that are not intended to be connected to peering switches (e.g. connections to co-located customer equipment, IXP metro connections, etc.). In these cases, just select the customer (and if it's the IXP itself, select the IXP customer) and leave switch / switch port unselected.\n\n\n\n\nIf you need to reset these fields, just click either of the Reset button.\n\n\n\n\n\n\nPatch Panel Port Status\n: when allocating a port, this will allow you to set the state to \nAwaiting Xconnect\n or \nConnected\n.\n\n\n\n\n\n\nPhysical Interface Status\n: this is not depicted above. If the selected switch port has already been assigned to a customer by way of a physical interface, you will have the option to update this here also.\n\n\n\n\n\n\nPublic\n and \nPrivate Notes\n: Public notes are available to the customer. Both fields are interpreted as Markdown.\n\n\n\n\n\n\nChargeable\n: Usually IXPs request their members to come to them and bear the costs of that. However, sometimes a co-location facility may charge the IXP for a half circuit or the IXP may need order and pay for the connection. The options are Yes / No / Half / Other. How individual IXPs use this is up to them.\n\n\n\n\n\n\nInternal Use\n: Marks the port as used by the IXP itself. E.g. metro connections.\n\n\n\n\n\n\nOwned By\n: Useful indication for billing and cease requests. Should represent the contractural owner of the cross connect. One of: Customer, IXP, Service Provider, Data Centre, Other. \nService Provider\n might be a metro provider where they ordered the cross connect.\n\n\n\n\n\n\nOnce a port is allocated, it enters the \nAwaiting XConnect\n / \nConnected\n state and there are additional context menu options available:\n\n\n\n\nThe three lifecycle actions are:\n\n\n\n\nSet Connected\n: updates the status (and allows you to add public/private notes). You next action after this should be \nEmail - Connect\n.\n\n\nSet Awaiting Cease\n: mark the port and pending disconnection. Your next action after this should be \nEmail - Cease\n.\n\n\nSet Ceased\n: this is a \ntransitive state\n in that it doesn't \nstick\n. When you mark a patch panel as ceased, the existing details (including files and notes) are archived as part of the port's history and then port is then cleared and made available again.\n\n\n\n\nFile Attachments\n\uf0c1\n\n\nOver the lifetime of a cross connect - and particularly when it is being ordered, there may be files exchanges between you and your customers or the colocation provider. These can be added to the patch panel port via the \nAttach File...\n option.\n\n\nThe dialog will dynamically determine the maximum file upload size based on your PHP settings. To alter this, change the following in your server's appropriate \nphp.ini\n:\n\n\n; Maximum allowed size for uploaded files.\nupload_max_filesize = 40M\n\n; Must be greater than or equal to upload_max_filesize\npost_max_size = 40M\n\n\n\n\n\nPlease search the internet for further help as this is outside the scope of IXP Manager documentation.\n\n\nThe following features apply to file attachments:\n\n\n\n\nthey are archived along with the port history when a cross connect is ceased.\n\n\nthey are stored under \n$IXPROOT/storage/files/ppp\n.\n\n\ntwo files of the same name cannot be uploaded for a single patch panel port.\n\n\nthey can be marked as public or private:\n\n\npublic files are accessible to the customer through their own dashboard.\n\n\npublic files are attached to the \nEmail - Information\n email.\n\n\n\n\nLoA Generation\n\uf0c1\n\n\nMany co-location providers will not accept a cross connect order without a LoA \n(Letter of Agency/Authority)\n from the party to whom the cross connect is to be delivered (typically the IXP).\n\n\nIXP Manager will generate a PDF LoA to download or include in the emails it generates for you. Here is an example:\n\n\n\n\nYou will need to \nskin\n this yourself to change the legalese, address and contact details and potentially add a logo. See the version INEX uses \nhere\n (which includes and embedded PNG logo).\n\n\nNote that \nDompdf\n is used to turn the HTML template into a PDF and it has some restrictions.\n\n\nYou have two options for generating LoAs (without having IXP Manager email them):\n\n\n\n\nDownload PDF\n: downloads the PDF via your browser.\n\n\nView PDF\n: displays the PDF LoA in your browser (where browser supports it).\n\n\n\n\nLoA Verification\n\uf0c1\n\n\nThe stock LoA template (and INEX's version) includes a link that allows co-location browsers to click on to verify its veracity.\n\n\nOn successful verification, the end user sees:\n\n\n\n\nEmail Generation\n\uf0c1\n\n\nIXP Manager allows you to send four emails related to patch panels / cross connects (port status dependent). These are listed below. The Email editor looks as follows:\n\n\n\n\nNote that:\n\n\n\n\nthe option to attach a PDF LoA is a checkbox.\n\n\nthe email is written in Markdown with a preview available. The email is sent as both HTML (from the Markdown) and the plaintext version.\n\n\n\n\nThe four email templates available are:\n\n\n\n\nEmail - Connect\n: Email the customer a request to order a cross connect to the given demarcation points. A LoA is attached as a PDF by default unless you uncheck the box in the email editor.\n\n\nEmail - Cease\n: Email the customer a request to cease a cross connect.\n\n\nEmail - Information\n: Email the customer all details on file about a cross connect. We often get requests for this at INEX and this simplifies the process. The generated email includes:\n\n\nthe standard details regarding port and co-location reference;\n\n\npublic notes;\n\n\npublic files as attachments.\n\n\nEmail - LoA\n: Email a LoA to the customer as attached as a PDF. This is similar to \nEmail - Connect\n but it is more reflective of a typical response to a second request for a LoA.\n\n\n\n\nAll email templates can be \nskinned\n for your own needs. See INEX's example skins \nhere\n.\n\n\nViewing Patch Panel Details and Archives\n\uf0c1\n\n\nEach patch panel port row has the following button:\n\n\n\n\nThe number in the badge indicates how many historical records are available.\n\n\nClicking on the button yields the following view screen:\n\n\n\n\nDevelopment History\n\uf0c1\n\n\nThe Patch Panels functionality was developed during Q1 2017 and added in March 2017. This was made possible from sponsorship which enabled us to hire a new full time developer. We are especially grateful to our sponsors - \nplease see them here\n.", 
            "title": "Patch Panels"
        }, 
        {
            "location": "/features/patch-panels/#patch-panels-cross-connects", 
            "text": "One of the more difficult things for an IXP to manage is the sheer volume of patch panels / cross connects they need to manage. We have approached the issue a number of times in IXP Manger but abandoned the attempt every time. Typically our original solutions were over-engineered where all we really needed was something which could replace a spreadsheet per panel.  We believe we have now developed a feature complete and useful means of managing patch panels and associated cross connects.", 
            "title": "Patch Panels / Cross Connects"
        }, 
        {
            "location": "/features/patch-panels/#features", 
            "text": "Add / edit patch panels  (which includes cable and connector types).  List associated patch panel ports which includes:  their state (such as available / prewired, awaiting cross connect, connected, awaiting cease, reserved, broken).  associated customer and/or switchport.  co-location provider's circuit reference.  internal ticket references.  Transition ports from available / prewired to awaiting x-connect to connected to awaiting cease to ceased and then available again.  Customer view of their cross connects.  Public (visible to customers) and private notes per cross connect.  Attach public and private files to cross connects (such as test results, completion documents, order forms, etc).  Maintain complete history of a patch panel port.  Generate and email LoAs (as PDF) with a URL verification function for co-location providers.  Generate emails for connection and cease requests as well as an email providing full customer view of a cross connect.  Typically fibre ports are  duplex  ports but there is a growing use of BiDi optics meaning simplex ports. Our implementation treats all ports as simplex but you can mark it as duplex and set its partner port.", 
            "title": "Features"
        }, 
        {
            "location": "/features/patch-panels/#duplex-fibre-ports", 
            "text": "We suggest adding fibre ports as two ports per duplex port. I.e. if your patch panel has 12 duplex ports, enter this as 24 ports. When allocating ports later, you can set it as a duplex port and select its  partner / slave port . This will future proof your patch panels for the growing use of bidi optics and other simplex based xWDM fibre solutions.  From our experience, duplex fibre ports are often identified as their individual strands. For example,  duplex port 5  would be referenced as  F9/F10 .  Your mileage may vary on this but we need to allow this flexibility to cover both use-cases. You always have options however:   you can change the presentation of how these ports are referenced externally by  skinning  the templates.  you have the option to edit emails before they are sent to also present this as you wish.  you can chose to treat duplex ports as single ports rather than doubling them up.  when you have duplex ports on a patch panel, IXP Manager will provide a duplex view by default with a CSS-based toggle to reveal the typical partner ports.  if you think IXP Manager can make this easier, please talk to us.  But we cannot cover every use case programatically. We've opted to allow flexibility rather than dictate a particular format.", 
            "title": "Duplex Fibre Ports"
        }, 
        {
            "location": "/features/patch-panels/#adding-a-patch-panel", 
            "text": "The following image shows a typical  add a new patch panel  form (as of v4.3). You'll note that clicking  Help  provides detailed context aware help messages.   Most of this is self-explanatory but:   By default, we set the  Colocation Reference  to the  Patch Panel Name . We are not sure it's a good idea for IXPs to create a second name different to the co-location provider's but this option is available to you.  Seriously, think about what you are doing here - more references means more confusion!  The cabinet and cable type is displayed in the list of patch panels so even with obscure data centre references, it should be easy to find what you need.  Location Notes : Data centre / co-location providers do a lot of weird, wonderful and strange things! They provide multiple references for a single patch panel (IXP cabinet, MMR, etc.), they get taken over and re-reference everything or even provide no discernable reference. The field is a freetext field that will be included (and parsed as Markdown) in all emails generated by IXP Manager to help you help them identify a patch panel!   In addition to that, we will also use a cabinets  U's are counted from top/bottom , and a patch panel's  U position  and  mounted at front/rear  to also create a location description.  When setting the  Number of Ports , ensure you count duplex fibre ports as  two ports . So 12 duplex fibre ports would be entered as 24. When editing a patch panel, this input field represents the number of additional ports you want to add to a patch panel and thus defaults to 0 in that situation.   Port Name Prefix : This is an optional field intended for use on fibre patch panels. As an example, you may wish to prefix individual fibre strands in a duplex port with F which would mean the name of a duplex port would be displayed as F1/F2.\n*  Chargeable : Usually IXPs request their members to come to them and bear the costs of that. However, sometimes a co-location facility may charge the IXP for a half circuit or the IXP may need order and pay for the connection. Setting this only sets the default option when allocating ports to members later. The options are Yes / No / Half / Other.", 
            "title": "Adding a Patch Panel"
        }, 
        {
            "location": "/features/patch-panels/#filtering-patch-panel-ports", 
            "text": "Quite often, all you are looking for is a free in a particular location (data centre) or cabinet of a particular cable type (UTP / SMF / etc.).  IXP Manager makes this easy from the  Patch Panels  page via the top right button labeled  Filter Options . When clicked, this yields an advanced search as follows:   Cabinets auto-fills when you chose (or change) a location.", 
            "title": "Filtering Patch Panel Ports"
        }, 
        {
            "location": "/features/patch-panels/#patch-panel-port-states", 
            "text": "A patch panel port can have the following states:   Available : The port is free and available for use.  Prewired : This is equivalent to available but it means the port is prewired to a given switchport (you set the port when setting the prewired status). This is useful for IXPs that prewire a bunch of ports to avoid remote hands costs / data centre visits.  Awaiting Xconnect : Port has been assigned to a member and we are awaiting the co-location provider to install the cross connect. In this state, context aware actions such as emailing connection requests, LoA generation and  Set Connected  are all available.  Connected : Connected and in use.  Awaiting Cease : This connection is no longer required and we are awaiting the end user / co-location provider to cease the connection.  Ceased : You will never see a ceased state. When a cross connect is marked as ceased, it's current state is archived (for history, include files) and the port is reset to  Available . We do not revert to  Prewired  but an information message is shown to the user to hint this.  Reserved : Useful to mark particular ports as  off limits  for whatever reason.  Broken  Other", 
            "title": "Patch Panel Port States"
        }, 
        {
            "location": "/features/patch-panels/#free-available-ports", 
            "text": "IXP Manager will colour ports in the  Available ,  Prewired  and  Awaiting Cease  states are green allowing an easy visual indication of available ports.", 
            "title": "Free / Available Ports"
        }, 
        {
            "location": "/features/patch-panels/#patch-panel-port-lifecycle", 
            "text": "Patch panel ports start as either  available  or  prewired . The context menu in these states is:    Unset Prewired  is available as this port has a  Prewired  status. Clicking this reverts it to plain  Available  and disassociates it from the prewired port.  Edit Note...  is always available and provides a pop up to edit public and private notes associated with the port (current lifecycle - ceased ports have their notes at that time archived and cleared).   The main lifecycle option here is  Allocate :     Description : A one line short description to be shown in the list of patch panel ports. Just enough to help explain the ports purpose. Detailed information should be placed in the notes section. Can also be used to explain a reserved / broken / other port. Note that this is parsed as Markdown.  NB:  A description is discouraged for customer ports connected to a switch. The customer name and switch port are the description.    Colocation Circuit Reference : this is the reference provided by the colocation provider to uniquely reference this cross connect.    Ticket Reference(s) : This is a free text field to be used by IXPs as they wish. The intended use is to enter helpdesk ticket references that relate to this cross connect order.    Duplex connection? : Clicking this allows you to select the slave port for duplex connections.    Switch / Switch Port  /  Customer : You have a number of options when allocating a port:    If the port is pre-wired then the switch / switch port will be set here.   If you chose a switch port which has been allocated to a customer, then this patch panel port will also be allocated to that customer. The backend logic will detect if this is the case and update the customer field.  Conversely, if you chose a customer first, the switch / switch port dropdowns will be populated with only that customer's assigned ports.  Sometimes you will get cross connects that are not intended to be connected to peering switches (e.g. connections to co-located customer equipment, IXP metro connections, etc.). In these cases, just select the customer (and if it's the IXP itself, select the IXP customer) and leave switch / switch port unselected.   If you need to reset these fields, just click either of the Reset button.    Patch Panel Port Status : when allocating a port, this will allow you to set the state to  Awaiting Xconnect  or  Connected .    Physical Interface Status : this is not depicted above. If the selected switch port has already been assigned to a customer by way of a physical interface, you will have the option to update this here also.    Public  and  Private Notes : Public notes are available to the customer. Both fields are interpreted as Markdown.    Chargeable : Usually IXPs request their members to come to them and bear the costs of that. However, sometimes a co-location facility may charge the IXP for a half circuit or the IXP may need order and pay for the connection. The options are Yes / No / Half / Other. How individual IXPs use this is up to them.    Internal Use : Marks the port as used by the IXP itself. E.g. metro connections.    Owned By : Useful indication for billing and cease requests. Should represent the contractural owner of the cross connect. One of: Customer, IXP, Service Provider, Data Centre, Other.  Service Provider  might be a metro provider where they ordered the cross connect.    Once a port is allocated, it enters the  Awaiting XConnect  /  Connected  state and there are additional context menu options available:   The three lifecycle actions are:   Set Connected : updates the status (and allows you to add public/private notes). You next action after this should be  Email - Connect .  Set Awaiting Cease : mark the port and pending disconnection. Your next action after this should be  Email - Cease .  Set Ceased : this is a  transitive state  in that it doesn't  stick . When you mark a patch panel as ceased, the existing details (including files and notes) are archived as part of the port's history and then port is then cleared and made available again.", 
            "title": "Patch Panel Port Lifecycle"
        }, 
        {
            "location": "/features/patch-panels/#file-attachments", 
            "text": "Over the lifetime of a cross connect - and particularly when it is being ordered, there may be files exchanges between you and your customers or the colocation provider. These can be added to the patch panel port via the  Attach File...  option.  The dialog will dynamically determine the maximum file upload size based on your PHP settings. To alter this, change the following in your server's appropriate  php.ini :  ; Maximum allowed size for uploaded files.\nupload_max_filesize = 40M\n\n; Must be greater than or equal to upload_max_filesize\npost_max_size = 40M  Please search the internet for further help as this is outside the scope of IXP Manager documentation.  The following features apply to file attachments:   they are archived along with the port history when a cross connect is ceased.  they are stored under  $IXPROOT/storage/files/ppp .  two files of the same name cannot be uploaded for a single patch panel port.  they can be marked as public or private:  public files are accessible to the customer through their own dashboard.  public files are attached to the  Email - Information  email.", 
            "title": "File Attachments"
        }, 
        {
            "location": "/features/patch-panels/#loa-generation", 
            "text": "Many co-location providers will not accept a cross connect order without a LoA  (Letter of Agency/Authority)  from the party to whom the cross connect is to be delivered (typically the IXP).  IXP Manager will generate a PDF LoA to download or include in the emails it generates for you. Here is an example:   You will need to  skin  this yourself to change the legalese, address and contact details and potentially add a logo. See the version INEX uses  here  (which includes and embedded PNG logo).  Note that  Dompdf  is used to turn the HTML template into a PDF and it has some restrictions.  You have two options for generating LoAs (without having IXP Manager email them):   Download PDF : downloads the PDF via your browser.  View PDF : displays the PDF LoA in your browser (where browser supports it).", 
            "title": "LoA Generation"
        }, 
        {
            "location": "/features/patch-panels/#loa-verification", 
            "text": "The stock LoA template (and INEX's version) includes a link that allows co-location browsers to click on to verify its veracity.  On successful verification, the end user sees:", 
            "title": "LoA Verification"
        }, 
        {
            "location": "/features/patch-panels/#email-generation", 
            "text": "IXP Manager allows you to send four emails related to patch panels / cross connects (port status dependent). These are listed below. The Email editor looks as follows:   Note that:   the option to attach a PDF LoA is a checkbox.  the email is written in Markdown with a preview available. The email is sent as both HTML (from the Markdown) and the plaintext version.   The four email templates available are:   Email - Connect : Email the customer a request to order a cross connect to the given demarcation points. A LoA is attached as a PDF by default unless you uncheck the box in the email editor.  Email - Cease : Email the customer a request to cease a cross connect.  Email - Information : Email the customer all details on file about a cross connect. We often get requests for this at INEX and this simplifies the process. The generated email includes:  the standard details regarding port and co-location reference;  public notes;  public files as attachments.  Email - LoA : Email a LoA to the customer as attached as a PDF. This is similar to  Email - Connect  but it is more reflective of a typical response to a second request for a LoA.   All email templates can be  skinned  for your own needs. See INEX's example skins  here .", 
            "title": "Email Generation"
        }, 
        {
            "location": "/features/patch-panels/#viewing-patch-panel-details-and-archives", 
            "text": "Each patch panel port row has the following button:   The number in the badge indicates how many historical records are available.  Clicking on the button yields the following view screen:", 
            "title": "Viewing Patch Panel Details and Archives"
        }, 
        {
            "location": "/features/patch-panels/#development-history", 
            "text": "The Patch Panels functionality was developed during Q1 2017 and added in March 2017. This was made possible from sponsorship which enabled us to hire a new full time developer. We are especially grateful to our sponsors -  please see them here .", 
            "title": "Development History"
        }, 
        {
            "location": "/features/reseller/", 
            "text": "Reseller Functionality\n\uf0c1\n\n\nReseller mode must be explicitly enabled with a \n.env\n option:\n\n\nIXP_RESELLER_ENABLED=true\n\n\n\n\n\nIntroduction\n\uf0c1\n\n\nIn our model, a \nresold\n member is still a fully fledged member, they just happen to reach the exchange via someone else's network. You / we would still have a relationship with the member independent of the reseller and would still be required to carry out the standard turn up (for us, this includes IP assignment, quarantine procedures, route collector session, route server sessions if appropriate, etc.).\n\n\nIXP Manager's functionality is simply to:\n\n\n\n\nrecord that a reseller relationship exists\n\n\nallow you to manage reseller and fanout ports\n\n\n\n\nFeatures\n\uf0c1\n\n\n\n\nA customer / member can now also be a reseller. If you have a non-customer reseller, create them as an associate or internal member as appropriate. This is a boolean switch available in the add / edit customer page.\n\n\nAny customer can be marked as a \nresold customer of a named reseller\n. This is set in the add / edit customer page.\n\n\nIf a customer is a reseller or a resold customer, this is clearly visible in the customer overview page.\n\n\nA reseller cannot be \ndemoted\n from reseller status while there are resold customers assigned to it.\n\n\nIn the reseller customer overview page, there is a new tab listing all the customers they have resold to the IXP.\n\n\nIn the reseller customer overview page, the ports are separated into reseller uplink ports, the reseller's own peering ports and the fanout ports used to deliver the reseller's customers' traffic.\n\n\n\n\nReseller and Fanout Ports.\n\uf0c1\n\n\nFor resellers, we need to enforce the \none port - one mac - one address\n rule on the peering LAN.\n\n\nDepending on switch technology, this can be done using\n\n\n\n\na virtual ethernet port; or\n\n\na dedicated fanout switch / port.\n\n\n\n\n\n\nCurrently the schema cannot adequately handle a virtual ethernet port.\n\n\n\n\nTypically, we'd assign a dedicated switch (or bunch of switch ports) as a \nfanout\n switch with a \nreseller uplink port\n (or LAG). The reseller delivers their customer traffic in dedicated VLANs over this uplink port. We then break each individual customer's traffic into dedicated \nfanout ports\n. These physical fanout ports have a one to one relationship with peering ports for that customer (these can be single physical ports or LAGs).\n\n\nThe reseller functionality includes:\n\n\n\n\nnew switch port types for \nreseller\n (reseller uplink ports) and \nfanout\n;\n\n\na clear 1:1 relationship between peering ports that come via fanout ports;\n\n\na reseller has all their peering, reseller uplink and associated fanout ports listed in their overview and portal page;\n\n\nthe add physical interface form and the add interface wizard support linking a peering port to a new fanout port as part of the process.\n\n\n\n\nOptions\n\uf0c1\n\n\nThe following are set in \n.env\n:\n\n\nTo enable reseller functionality, set the following to \ntrue\n:\n\n\nIXP_RESELLER_ENABLED=false\n\n\n\n\n\nIf your resold customers are billed directly by the reseller and not the IXP, set this to true to remove billing details from their admin and member areas.\n\n\nIXP_RESELLER_RESOLD_BILLING=false\n\n\n\n\n\nCoding Hints\n\uf0c1\n\n\nIn the (older Zend Framework) controllers, you can execute reseller code via:\n\n\nif( $this-\nresellerMode() ) {\n\n\n    // your reseller specific code here\n\n\n}\n\n\n\n\n\n\nAnd in (the older Zend Framework) Smarty templates, you can add reseller only content via:\n\n\n{if $resellerMode}\n    \n!-- Your reseller content --\n\n{/if}\n\n\n\n\n\nIf you have a \n$customer\n entity, you can see if it is a reseller via:\n\n\nif( $customer-\nisReseller() ) {}\n\n\n\n\n\n\nTo see if a customer is a resold customer or get the reseller customer entity:\n\n\nif( $customer-\ngetReseller() ) {} // returns false if not a resold customer\n\n\n\n\n\n\nFinally, to get all resold customer entities of a reseller:\n\n\n$customer-\ngetResoldCustomers()\n\n\n\n\n\n\n\n\nReseller functionality was added jointly by \nINEX\n and \nLONAP\n in June 2013.", 
            "title": "Reseller Functionality"
        }, 
        {
            "location": "/features/reseller/#reseller-functionality", 
            "text": "Reseller mode must be explicitly enabled with a  .env  option:  IXP_RESELLER_ENABLED=true", 
            "title": "Reseller Functionality"
        }, 
        {
            "location": "/features/reseller/#introduction", 
            "text": "In our model, a  resold  member is still a fully fledged member, they just happen to reach the exchange via someone else's network. You / we would still have a relationship with the member independent of the reseller and would still be required to carry out the standard turn up (for us, this includes IP assignment, quarantine procedures, route collector session, route server sessions if appropriate, etc.).  IXP Manager's functionality is simply to:   record that a reseller relationship exists  allow you to manage reseller and fanout ports", 
            "title": "Introduction"
        }, 
        {
            "location": "/features/reseller/#features", 
            "text": "A customer / member can now also be a reseller. If you have a non-customer reseller, create them as an associate or internal member as appropriate. This is a boolean switch available in the add / edit customer page.  Any customer can be marked as a  resold customer of a named reseller . This is set in the add / edit customer page.  If a customer is a reseller or a resold customer, this is clearly visible in the customer overview page.  A reseller cannot be  demoted  from reseller status while there are resold customers assigned to it.  In the reseller customer overview page, there is a new tab listing all the customers they have resold to the IXP.  In the reseller customer overview page, the ports are separated into reseller uplink ports, the reseller's own peering ports and the fanout ports used to deliver the reseller's customers' traffic.", 
            "title": "Features"
        }, 
        {
            "location": "/features/reseller/#reseller-and-fanout-ports", 
            "text": "For resellers, we need to enforce the  one port - one mac - one address  rule on the peering LAN.  Depending on switch technology, this can be done using   a virtual ethernet port; or  a dedicated fanout switch / port.    Currently the schema cannot adequately handle a virtual ethernet port.   Typically, we'd assign a dedicated switch (or bunch of switch ports) as a  fanout  switch with a  reseller uplink port  (or LAG). The reseller delivers their customer traffic in dedicated VLANs over this uplink port. We then break each individual customer's traffic into dedicated  fanout ports . These physical fanout ports have a one to one relationship with peering ports for that customer (these can be single physical ports or LAGs).  The reseller functionality includes:   new switch port types for  reseller  (reseller uplink ports) and  fanout ;  a clear 1:1 relationship between peering ports that come via fanout ports;  a reseller has all their peering, reseller uplink and associated fanout ports listed in their overview and portal page;  the add physical interface form and the add interface wizard support linking a peering port to a new fanout port as part of the process.", 
            "title": "Reseller and Fanout Ports."
        }, 
        {
            "location": "/features/reseller/#options", 
            "text": "The following are set in  .env :  To enable reseller functionality, set the following to  true :  IXP_RESELLER_ENABLED=false  If your resold customers are billed directly by the reseller and not the IXP, set this to true to remove billing details from their admin and member areas.  IXP_RESELLER_RESOLD_BILLING=false", 
            "title": "Options"
        }, 
        {
            "location": "/features/reseller/#coding-hints", 
            "text": "In the (older Zend Framework) controllers, you can execute reseller code via:  if( $this- resellerMode() ) {      // your reseller specific code here  }   And in (the older Zend Framework) Smarty templates, you can add reseller only content via:  {if $resellerMode}\n     !-- Your reseller content -- \n{/if}  If you have a  $customer  entity, you can see if it is a reseller via:  if( $customer- isReseller() ) {}   To see if a customer is a resold customer or get the reseller customer entity:  if( $customer- getReseller() ) {} // returns false if not a resold customer   Finally, to get all resold customer entities of a reseller:  $customer- getResoldCustomers()    Reseller functionality was added jointly by  INEX  and  LONAP  in June 2013.", 
            "title": "Coding Hints"
        }, 
        {
            "location": "/features/route-collectors/", 
            "text": "Route Collectors\n\uf0c1\n\n\n\n\nPrerequisite Reading:\n Ensure you first familiarize yourself with \nthe generic documentation on managing and generating router configurations here\n.\n\n\n\n\nRoute collectors are an important member setup, diagnostic and metric tool for IXPs. Route collects essentially accept all routes and advertise none. \nIXP Manager\n will generate route collector configuration for you. You \ncan see an example of this generated configuration here\n.\n\n\nAt \nINEX\n we use the Bird BGP daemon as our collector using the stock configuration as generated by IXP Manager. We also use this same setup for the quarantine LAN collectors. You can see \nour live looking glasses here\n for more information.\n\n\nSetting Up\n\uf0c1\n\n\nYou first need to add your route collector(s) to the \nIXP Manager\n routers database. See \nthis page on how to do that\n.\n\n\nTypically an IXP's route collector service will share the ASN of the IXP's own management network (\nbut be different to the route server entry\n). You should also add the route collectors to your initial \ninternal\n customer representing your IXP on to IXP Manager. Here's INEX's example from our peering LAN1 in Dublin:\n\n\n\n\nOther Information\n\uf0c1\n\n\nQuarantine\n\uf0c1\n\n\nWe also use a quarantine route collector when provisioning new member connections. This is a Bird BGP daemon running on a virtual machine on our quarantine LAN. For is, this quarantine LAN is:\n\n\n\n\na separate dedicated VLAN on our peering switches;\n\n\nuses the same addressing as the production LAN;\n\n\nour quarantine route collector even has the same MAC as the production version.\n\n\n\n\nWhen \nadding routers to IXP Manager\n, setting the \nquarantine\n flag means that the configuration will only contain interfaces that are on the quarantine VLAN.", 
            "title": "Route Collectors"
        }, 
        {
            "location": "/features/route-collectors/#route-collectors", 
            "text": "Prerequisite Reading:  Ensure you first familiarize yourself with  the generic documentation on managing and generating router configurations here .   Route collectors are an important member setup, diagnostic and metric tool for IXPs. Route collects essentially accept all routes and advertise none.  IXP Manager  will generate route collector configuration for you. You  can see an example of this generated configuration here .  At  INEX  we use the Bird BGP daemon as our collector using the stock configuration as generated by IXP Manager. We also use this same setup for the quarantine LAN collectors. You can see  our live looking glasses here  for more information.", 
            "title": "Route Collectors"
        }, 
        {
            "location": "/features/route-collectors/#setting-up", 
            "text": "You first need to add your route collector(s) to the  IXP Manager  routers database. See  this page on how to do that .  Typically an IXP's route collector service will share the ASN of the IXP's own management network ( but be different to the route server entry ). You should also add the route collectors to your initial  internal  customer representing your IXP on to IXP Manager. Here's INEX's example from our peering LAN1 in Dublin:", 
            "title": "Setting Up"
        }, 
        {
            "location": "/features/route-collectors/#other-information", 
            "text": "", 
            "title": "Other Information"
        }, 
        {
            "location": "/features/route-collectors/#quarantine", 
            "text": "We also use a quarantine route collector when provisioning new member connections. This is a Bird BGP daemon running on a virtual machine on our quarantine LAN. For is, this quarantine LAN is:   a separate dedicated VLAN on our peering switches;  uses the same addressing as the production LAN;  our quarantine route collector even has the same MAC as the production version.   When  adding routers to IXP Manager , setting the  quarantine  flag means that the configuration will only contain interfaces that are on the quarantine VLAN.", 
            "title": "Quarantine"
        }, 
        {
            "location": "/features/route-servers/", 
            "text": "Route Servers\n\uf0c1\n\n\n\n\nPrerequisite Reading:\n Ensure you first familiarize yourself with \nthe generic documentation on managing and generating router configurations here\n.\n\n\n\n\nNormally on a peering exchange, all connected parties will establish bilateral peering relationships with each other customer connected to the exchange. As the number of connected parties increases, it becomes increasingly more difficult to manage peering relationships with customers of the exchange. A typical peering exchange full-mesh eBGP configuration might look something similar to the diagram on the left hand side.\n\n\n\n\nThe full-mesh BGP session relationship scenario requires that each BGP speaker configure and manage BGP sessions to every other BGP speaker on the exchange. In this example, a full-mesh setup requires 7 BGP sessions per member router, and this increases every time a new member connects to the exchange.\n\n\nHowever, by using a route servers for peering relationships, the number of BGP sessions per router stays at two: one for each route server (assuming a resilient set up). Clearly this is a more sustainable way of maintaining IXP peering relationships with a large number of participants.\n\n\nConfiguration Generation Features\n\uf0c1\n\n\nThis is \ncovered in the router documentation here\n. Please review that to learn how to automatically generate route server configurations. This section goes into a bit more specific detail on INEX's route server configuration (as shipped with IXP Manager) and why it's safe to use.\n\n\nThe features of the route server configurations that IXP Manager generates include:\n\n\n\n\nfull prefix filtering based on IRRDB entries (can be disabled on a per member basis if required) - see \nthe IRRDB documentation here\n;\n\n\nfull origin ASN filtering based on IRRDB entries (can be disabled on a per member basis if required);\n\n\nin all cases, prefix filtering for IPv4 and v6 based on the IANA special purpose registries (also known as bogon lists);\n\n\nensuring next hop is the neighbor address to ensure no next hop hijacking;\n\n\nmax prefix limits;\n\n\nmultiple VLAN interfaces for a single member supported;\n\n\nlarge BGP communities supported;\n\n\na decade of production use and experience.\n\n\n\n\nThere are \nsome old notes on route server testing here\n which may also be useful.\n\n\nSetting Up\n\uf0c1\n\n\nYou first need to add your route servers to the \nIXP Manager\n routers database. See \nthis page on how to do that\n.\n\n\nTypically an IXP's route server service will have a dedicated ASN that is different to the IXP's own management / route collector ASN. As such, you need to add a new \ninternal\n customer to IXP Manager.\n\n\nYou are strongly advised to use / request a 16-bit ASN from your RIR for route server use. If you do not, you will be unable to offer your members standard community based filtering.\n\n\nHere's an example from INEX for our \nroute server #1\n:\n\n\n\n\nYou then need to create an interface for this route server on each peering LAN where the service will be offered. Here again is INEX's example from our peering LAN1 in Dublin:\n\n\n\n\nThere's a couple things to note in the above:\n\n\n\n\nAS112 Client\n is checked which means (so long as \nRoute Server Client\n is checked on the \nAS112 service\n) the AS112 service will peer with the route servers.\n\n\nApply IRRDB Filtering\n has no meaning here as this is the route server rather than the route server client.", 
            "title": "Route Servers"
        }, 
        {
            "location": "/features/route-servers/#route-servers", 
            "text": "Prerequisite Reading:  Ensure you first familiarize yourself with  the generic documentation on managing and generating router configurations here .   Normally on a peering exchange, all connected parties will establish bilateral peering relationships with each other customer connected to the exchange. As the number of connected parties increases, it becomes increasingly more difficult to manage peering relationships with customers of the exchange. A typical peering exchange full-mesh eBGP configuration might look something similar to the diagram on the left hand side.   The full-mesh BGP session relationship scenario requires that each BGP speaker configure and manage BGP sessions to every other BGP speaker on the exchange. In this example, a full-mesh setup requires 7 BGP sessions per member router, and this increases every time a new member connects to the exchange.  However, by using a route servers for peering relationships, the number of BGP sessions per router stays at two: one for each route server (assuming a resilient set up). Clearly this is a more sustainable way of maintaining IXP peering relationships with a large number of participants.", 
            "title": "Route Servers"
        }, 
        {
            "location": "/features/route-servers/#configuration-generation-features", 
            "text": "This is  covered in the router documentation here . Please review that to learn how to automatically generate route server configurations. This section goes into a bit more specific detail on INEX's route server configuration (as shipped with IXP Manager) and why it's safe to use.  The features of the route server configurations that IXP Manager generates include:   full prefix filtering based on IRRDB entries (can be disabled on a per member basis if required) - see  the IRRDB documentation here ;  full origin ASN filtering based on IRRDB entries (can be disabled on a per member basis if required);  in all cases, prefix filtering for IPv4 and v6 based on the IANA special purpose registries (also known as bogon lists);  ensuring next hop is the neighbor address to ensure no next hop hijacking;  max prefix limits;  multiple VLAN interfaces for a single member supported;  large BGP communities supported;  a decade of production use and experience.   There are  some old notes on route server testing here  which may also be useful.", 
            "title": "Configuration Generation Features"
        }, 
        {
            "location": "/features/route-servers/#setting-up", 
            "text": "You first need to add your route servers to the  IXP Manager  routers database. See  this page on how to do that .  Typically an IXP's route server service will have a dedicated ASN that is different to the IXP's own management / route collector ASN. As such, you need to add a new  internal  customer to IXP Manager.  You are strongly advised to use / request a 16-bit ASN from your RIR for route server use. If you do not, you will be unable to offer your members standard community based filtering.  Here's an example from INEX for our  route server #1 :   You then need to create an interface for this route server on each peering LAN where the service will be offered. Here again is INEX's example from our peering LAN1 in Dublin:   There's a couple things to note in the above:   AS112 Client  is checked which means (so long as  Route Server Client  is checked on the  AS112 service ) the AS112 service will peer with the route servers.  Apply IRRDB Filtering  has no meaning here as this is the route server rather than the route server client.", 
            "title": "Setting Up"
        }, 
        {
            "location": "/features/routers/", 
            "text": "Routers\n\uf0c1\n\n\nIXP Manager can generate router configuration for typical IXP services such as:\n\n\n\n\nroute collectors\n;\n\n\nroute servers\n (with \nIRRDB filtering\n); and\n\n\nAS112 services\n.\n\n\n\n\nSee the above pages for specific information on each of those use cases and below for instructions on how to generate configuration.\n\n\nManaging Routers\n\uf0c1\n\n\nThe basic elements of \na router\n are configured in \nIXP Manager\n under the \nIXP Admin Actions - Routers\n option on the left hand menu.\n\n\nWhen you goto add / edit a router, the green help button willl provide explanatory details on each field of information required:\n\n\n\n\nFrom the router management page, you can:\n\n\n\n\nadd / edit / delete a router;\n\n\nview all the details of a router;\n\n\ngenerate and view a router's configuration.\n\n\n\n\nConfiguration Generation Overview\n\uf0c1\n\n\nThe simplest configuration to generate is the route collector configuration. A route collector is an IXP router which serves only to \naccept all routes and export no routes\n. It is used for problem diagnosis, to aid customer monitoring and for looking glasses (see \nINEX's here\n).\n\n\nThe \nstandard configuration\n simply pulls in a fairly standard header (sets up router ID, listening address and - for the collector at least - some unused filters) and creates a session for all customer routers on the given VLAN.\n\n\nWhen adding a router, you give it a \nhandle\n. For example: \nrc1-lan1-ipv4\n which, for INEX, would mean a route collector on peering LAN1 using IPv4. Then - for the given router handle - the configuration can be generated and pulled using the API as follows:\n\n\n#! /bin/sh\n\n\n\n# The API Key.\n\n\n# This is generated in IXP Manager via the top right menu: *My Account -\n API Keys*\n\n\nKEY\n=\nyour-admin-ixp-manager-api-key\n\n\n\n# The base URL of your IXP Manager install plus: \napi/v4/router/gen-config\n\n\nURL\n=\nhttps://ixp.example.com/api/v4/router/gen-config\n\n\n\n# The handle is as described above:\n\n\nHANDLE\n=\nrc1-lan1-ipv4\n\n\n\n# Then the configuration can be pulled as follows:\n\ncurl --fail -s -H \nX-IXP-Manager-API-Key: \n${\nKEY\n}\n \n${\nURL\n}\n/\n${\nHANDLE\n}\n \n${\nHANDLE\n}\n.conf\n\n\n\n\n\nConfigurations for the route server and AS112 templates can be configured just as easily.\n\n\nThe stock templates for both are secure and well tested and can be used by setting the \ntemplate\n element of the router to one of the following:\n\n\n\n\nAS112: \n'api/v4/router/as112/bird/standard'\n\n\nRoute Collector: \n'api/v4/router/collector/bird/standard'\n\n\nRoute Server: \n'api/v4/router/server/bird/standard'\n\n\n\n\nWe also provide sample scripts for automating the re-configuration of these services by cron:\n\n\n\n\nAS112 scripts \ncan be found here\n.\n\n\nRoute collector scripts \ncan be found here\n.\n\n\nRoute server scripts - see the \n-v4\n scripts \nin this directory\n. These are quite robust and have been in production for ~3 years at INEX (as of Jan 2017).\n\n\n\n\nAll of these scripts have been written defensivily such that if there is any issue getting the configuring or validating the configuration then the running router instance should be unaffected. This has worked in practice at INEX when IXP Manager was under maintenance, when there were management connectivity issues and when there were database issues. They also use the \nupdated API\n (see below) to mark when the router configuration update script ran successfully.\n\n\nUpdated API\n\uf0c1\n\n\nIt can be useful to know that the scripts for updating the router configuration for AS112, route collector and route server BGP daemons run successfully. At INEX for example, we have three LANs and so 10 individual servers running a total of 30 Bird instances which is unwieldy to check and monitor manually.\n\n\nWhen viewing routers in IXP Manager, you may have noticed the \nLast Updated\n column which will initially show \n(unknown)\n. All our update scripts (see above) trigger the updated API call when a route configuration run has completed successfully. Note that this does not mean that a configuration has necessarily changed but rather that the update script ran and executed correctly. In other words: \nthe configuration was successfully pulled from IXP Manager, compared to the running configuration and, if changed, successfully applied\n.\n\n\nThe API call to update the \nlast updated\n field to \nnow\n is a POST as follows:\n\n\ncurl -s -X POST -H \nX-IXP-Manager-API-Key: my-ixp-manager-api-key\n \\\n    https://ixp.example.com/api/v4/router/updated/{handle}\n\n\n\n\n\nwhere \n{handle}\n should be replaced with the route handle as described above.\n\n\nThe result is a JSON object with the datetime as set and is equivalent to the result of the following API call which fetchs the \nlast updated\n field without setting it:\n\n\ncurl -s -X GET -H \nX-IXP-Manager-API-Key: my-ixp-manager-api-key\n \\\n    https://ixp.example.com/api/v4/router/updated/{handle}\n\n{\nlast_updated\n:\n2017-05-21T19:14:43+00:00\n,\nlast_updated_unix\n:1495394083}\n\n\n\n\n\nThere are two useful additional API endpoints. To get the last updated time of \nall\n routers, use:\n\n\ncurl -s -X GET -H \nX-IXP-Manager-API-Key: my-ixp-manager-api-key\n \\\n    https://ixp.example.com/api/v4/router/updated\n\n{\nhandle1\n:{\nlast_updated\n:\n2017-05-21T19:14:43+00:00\n,\nlast_updated_unix\n:1495394083},\n \nhandle2\n:{\nlast_updated\n:null,\nlast_updated_unix\n:null},\n ...}\n\n\n\n\n\nThe above output shows the format of the reply as well as the fact that routers without a last updated value set will be included as null values.\n\n\nLastly, you can request the last updated time of routers where that time exceeds a given number of seconds. \nIn this call, routers without a last updated time will not be returned.\n This is useful for monitoring applications such as Nagios where you would want a warning / alert on any routers that have not updated in the last day for example:\n\n\ncurl -s -X GET -H \nX-IXP-Manager-API-Key: my-ixp-manager-api-key\n \\\n    https://ixp.example.com/api/v4/router/updated-before/86400\n\n[]\n\n\n\n\n\nThis example also shows that an empty JSON object is returned for an empty result. Otherwise the format of the reply is the same as for the call above for all routers:\n\n\n{\nhandle1\n:{\nlast_updated\n:\n2017-05-21T19:14:43+00:00\n,\nlast_updated_unix\n:1495394083},...}\n\n\n\n\n\nExamples\n\uf0c1\n\n\nWe use \nTravis CI\n to test IXP Manager before pushing new releases. The primary purpose of this is to ensure that the configuration for routers generated matches known good configurations from the same sample database.\n\n\nThese known good configurations also serve as useful examples of what the standard IXP Manager configuration generates.\n\n\nSee \nthese known good configurations here\n with the prefix \nci-apiv4-\n and:\n\n\n\n\nas112\n: AS112 router configurations conforming to \nrfc7534\n (AS112 Nameserver Operations) and implementing \nrfc7535\n (AS112 Redirection Using DNAME). There are configs to serve queries over both IPv4 and IPv6. See \nthe AS112 documentation for more details\n.\n\n\nrc1\n: route collector configurations. Peering with the route collector is mandatory at many IXPs including INEX. These are incredably useful for monitoring, diagnosing issues and providing looking glasses. We also use the quarantine version of these for turning up new member connections.\n\n\nrs1\n: route collector configurations. See below for full details of what these implement. Note also that the \nci-apiv4-rs1-lan2-ipv4.conf\n file includes BGP large communities (\nrfc8092\n). See \nthe route servers documentation for more details\n.\n\n\n\n\nLive Status\n\uf0c1\n\n\nThe live status of any configured routers that have API access can be seen in \nIXP Manager\n via the \nLive Status\n sub-menu option of \nRouters\n on the left hand side menu.\n\n\nEach router is queried twice via AJAX requests to provide:\n\n\n\n\nBGP daemon version\n\n\nAPI version\n\n\nconfigured BGP sessions\n\n\nestablished BGP sessions\n\n\nlast updated time\n\n\nlast reboot time", 
            "title": "Router Configuration"
        }, 
        {
            "location": "/features/routers/#routers", 
            "text": "IXP Manager can generate router configuration for typical IXP services such as:   route collectors ;  route servers  (with  IRRDB filtering ); and  AS112 services .   See the above pages for specific information on each of those use cases and below for instructions on how to generate configuration.", 
            "title": "Routers"
        }, 
        {
            "location": "/features/routers/#managing-routers", 
            "text": "The basic elements of  a router  are configured in  IXP Manager  under the  IXP Admin Actions - Routers  option on the left hand menu.  When you goto add / edit a router, the green help button willl provide explanatory details on each field of information required:   From the router management page, you can:   add / edit / delete a router;  view all the details of a router;  generate and view a router's configuration.", 
            "title": "Managing Routers"
        }, 
        {
            "location": "/features/routers/#configuration-generation-overview", 
            "text": "The simplest configuration to generate is the route collector configuration. A route collector is an IXP router which serves only to  accept all routes and export no routes . It is used for problem diagnosis, to aid customer monitoring and for looking glasses (see  INEX's here ).  The  standard configuration  simply pulls in a fairly standard header (sets up router ID, listening address and - for the collector at least - some unused filters) and creates a session for all customer routers on the given VLAN.  When adding a router, you give it a  handle . For example:  rc1-lan1-ipv4  which, for INEX, would mean a route collector on peering LAN1 using IPv4. Then - for the given router handle - the configuration can be generated and pulled using the API as follows:  #! /bin/sh  # The API Key.  # This is generated in IXP Manager via the top right menu: *My Account -  API Keys*  KEY = your-admin-ixp-manager-api-key  # The base URL of your IXP Manager install plus:  api/v4/router/gen-config  URL = https://ixp.example.com/api/v4/router/gen-config  # The handle is as described above:  HANDLE = rc1-lan1-ipv4  # Then the configuration can be pulled as follows: \ncurl --fail -s -H  X-IXP-Manager-API-Key:  ${ KEY }   ${ URL } / ${ HANDLE }   ${ HANDLE } .conf  Configurations for the route server and AS112 templates can be configured just as easily.  The stock templates for both are secure and well tested and can be used by setting the  template  element of the router to one of the following:   AS112:  'api/v4/router/as112/bird/standard'  Route Collector:  'api/v4/router/collector/bird/standard'  Route Server:  'api/v4/router/server/bird/standard'   We also provide sample scripts for automating the re-configuration of these services by cron:   AS112 scripts  can be found here .  Route collector scripts  can be found here .  Route server scripts - see the  -v4  scripts  in this directory . These are quite robust and have been in production for ~3 years at INEX (as of Jan 2017).   All of these scripts have been written defensivily such that if there is any issue getting the configuring or validating the configuration then the running router instance should be unaffected. This has worked in practice at INEX when IXP Manager was under maintenance, when there were management connectivity issues and when there were database issues. They also use the  updated API  (see below) to mark when the router configuration update script ran successfully.", 
            "title": "Configuration Generation Overview"
        }, 
        {
            "location": "/features/routers/#updated-api", 
            "text": "It can be useful to know that the scripts for updating the router configuration for AS112, route collector and route server BGP daemons run successfully. At INEX for example, we have three LANs and so 10 individual servers running a total of 30 Bird instances which is unwieldy to check and monitor manually.  When viewing routers in IXP Manager, you may have noticed the  Last Updated  column which will initially show  (unknown) . All our update scripts (see above) trigger the updated API call when a route configuration run has completed successfully. Note that this does not mean that a configuration has necessarily changed but rather that the update script ran and executed correctly. In other words:  the configuration was successfully pulled from IXP Manager, compared to the running configuration and, if changed, successfully applied .  The API call to update the  last updated  field to  now  is a POST as follows:  curl -s -X POST -H  X-IXP-Manager-API-Key: my-ixp-manager-api-key  \\\n    https://ixp.example.com/api/v4/router/updated/{handle}  where  {handle}  should be replaced with the route handle as described above.  The result is a JSON object with the datetime as set and is equivalent to the result of the following API call which fetchs the  last updated  field without setting it:  curl -s -X GET -H  X-IXP-Manager-API-Key: my-ixp-manager-api-key  \\\n    https://ixp.example.com/api/v4/router/updated/{handle}\n\n{ last_updated : 2017-05-21T19:14:43+00:00 , last_updated_unix :1495394083}  There are two useful additional API endpoints. To get the last updated time of  all  routers, use:  curl -s -X GET -H  X-IXP-Manager-API-Key: my-ixp-manager-api-key  \\\n    https://ixp.example.com/api/v4/router/updated\n\n{ handle1 :{ last_updated : 2017-05-21T19:14:43+00:00 , last_updated_unix :1495394083},\n  handle2 :{ last_updated :null, last_updated_unix :null},\n ...}  The above output shows the format of the reply as well as the fact that routers without a last updated value set will be included as null values.  Lastly, you can request the last updated time of routers where that time exceeds a given number of seconds.  In this call, routers without a last updated time will not be returned.  This is useful for monitoring applications such as Nagios where you would want a warning / alert on any routers that have not updated in the last day for example:  curl -s -X GET -H  X-IXP-Manager-API-Key: my-ixp-manager-api-key  \\\n    https://ixp.example.com/api/v4/router/updated-before/86400\n\n[]  This example also shows that an empty JSON object is returned for an empty result. Otherwise the format of the reply is the same as for the call above for all routers:  { handle1 :{ last_updated : 2017-05-21T19:14:43+00:00 , last_updated_unix :1495394083},...}", 
            "title": "Updated API"
        }, 
        {
            "location": "/features/routers/#examples", 
            "text": "We use  Travis CI  to test IXP Manager before pushing new releases. The primary purpose of this is to ensure that the configuration for routers generated matches known good configurations from the same sample database.  These known good configurations also serve as useful examples of what the standard IXP Manager configuration generates.  See  these known good configurations here  with the prefix  ci-apiv4-  and:   as112 : AS112 router configurations conforming to  rfc7534  (AS112 Nameserver Operations) and implementing  rfc7535  (AS112 Redirection Using DNAME). There are configs to serve queries over both IPv4 and IPv6. See  the AS112 documentation for more details .  rc1 : route collector configurations. Peering with the route collector is mandatory at many IXPs including INEX. These are incredably useful for monitoring, diagnosing issues and providing looking glasses. We also use the quarantine version of these for turning up new member connections.  rs1 : route collector configurations. See below for full details of what these implement. Note also that the  ci-apiv4-rs1-lan2-ipv4.conf  file includes BGP large communities ( rfc8092 ). See  the route servers documentation for more details .", 
            "title": "Examples"
        }, 
        {
            "location": "/features/routers/#live-status", 
            "text": "The live status of any configured routers that have API access can be seen in  IXP Manager  via the  Live Status  sub-menu option of  Routers  on the left hand side menu.  Each router is queried twice via AJAX requests to provide:   BGP daemon version  API version  configured BGP sessions  established BGP sessions  last updated time  last reboot time", 
            "title": "Live Status"
        }, 
        {
            "location": "/features/skinning/", 
            "text": "Templates \n Skinning\n\uf0c1\n\n\n\n\nRemember that v4 is a transition version of \nIXP Manager\n from Zend Framework / Smarty to Laravel and so much of the frontend / templating still uses v3 templates and code. As such, how to skin a page will depend on whether the template is found in \nresources/views\n (v4) or \napplication/[modules/xxx/]views\n (v3). Both are covered here.\n\n\n\n\nIXP Manager\n supports template/view skinning allowing users to substitute any of their own templates in place of the default ones shipped with IXP Manager.\n\n\nSkinning in Version 4+\n\uf0c1\n\n\nFirst, set the following parameter in \n.env\n:\n\n\nVIEW_SKIN=\nexample\n\n\n\n\n\n\nSkins should then be placed in the \nresources/skins/example\n directory (\nexample\n should be substituted for whatever you want to call your own skin). The default templates can be found in \nresources/views\n directory. INEX bundles its own skinned templates in \nresources/skins/inex\n as an example.\n\n\nOnce a skin is enabled from \n.env\n, then any templates found in the skin directory \n(using the same directory structure as found under \nresouces/views\n)\n will take precedence over the default template file. This means you do not need to recreate / copy all the default files - just replace the ones you want.\n\n\nIn previous versions of \nIXP Manager\n, we used Smarty as the templating engine. This meant that if someone wanted to help improve \nIXP Manager\n then they would need to become familiar with PHP \nand\n Smarty. In v4 we dropped Smarty and, rather than using another compiled templating engine, we have decided to go with native PHP templates.\n\n\nFor this, we are using \nFoil\n - \nFoil brings all the flexibility and power of modern template engines to native PHP templates. Write simple, clean and concise templates with nothing more than PHP.\n Also, simulaneously supported are Lavael's own \nBlade templates\n which we sometimes use for simple pages.\n\n\nExample\n\uf0c1\n\n\nThe \ngraphing\n MRTG configuration generator allows for custom configuration content at the top and bottom of the file. In order to have your custom configuration enabled, you need to skin two files.\n\n\nHere's an example:\n\n\n# position ourselves in the IXP Manager root directory\ncd ${IXPROOT}\n\n# make the skin directory\nmkdir resources/skins/example\n\n# create the full path required for the MRTG configuration files:\nmkdir -p resources/skins/example/services/grapher/mrtg\n\n# copy over the customisation files:\ncp views/services/grapher/mrtg/custom-header.foil.php resources/skins/example/services/grapher/mrtg\ncp views/services/grapher/mrtg/custom-footer.foil.php resources/skins/example/services/grapher/mrtg\n\n# edit the above files as required\nvi resources/skins/example/services/grapher/mrtg/custom-header.plates.php\nvi resources/skins/example/services/grapher/mrtg/custom-footer.plates.php\n\n\n\n\n\nThen, finally, edit \n.env\n and set the skin to use:\n\n\nVIEW_SKINS=\nexample\n\n\n\n\n\n\nYou can of course skin any file including the non-custom MRTG files as suits your needs.\n\n\nCustom Variables / Configuration Options\n\uf0c1\n\n\nWhen you are skinning your own templates, you may find you need to create custom configuration options for values you do not want to store directly in your own templates. For this, we have a configuration file which is excluded from Git. Initiate it via::\n\n\ncp config/custom.php.dist config/custom.php\n\n\n\n\n\nThis is \nLaravel's standard configuration file format\n (which is an associative PHP array). You can also use Laravel's dotenv variables here too.\n\n\nAs an example, if you were to create a configuration option:\n\n\n?php\n\n\nexample\n \n=\n \n[\n\n    \nkey\n \n=\n \nmy own config value\n,\n\n\n],\n\n\n\n\n\n\nthen in code this would be accessible as:\n\n\n?php\n\n\nconfig\n(\n \ncustom.example.key\n,\n \ndefault value if not set|null\n \n)\n\n\n\n\n\n\nwhere the second parameter is a default option if the requested configuration setting has not been defined (which defaults to \nnull\n). In templates, this can be accessed the same way or rendered in the template with::\n\n\n?\n=\n \nconfig\n(\n \ncustom.example.key\n,\n \ndefault\n \n)\n \n?\n\n\n\n\n\n\nSkinning Old Templates\n\uf0c1\n\n\nThis is still important as \nIXP Manager\n v4 still uses most of the previous templates.\n\n\nTo skin files found under \napplication/[modules/xxx/]views\n, proceed as follows:\n\n\n\n\n\n\nset a skin name in \n.env\n:\n   \nVIEW_SMARTY_SKIN=\nmyskin\n\n\n\n\n\n\n\n\n\n\ncreate a directory with a matching name: \napplication/views/_skins/myskin\n.\n\n\n\n\n\n\nOnce the above \n.env\n option is set, then any pages in its skin directory (using the same directory structure as \napplication/views\n will take precedence over the default template files. This means you do not need to recreate / copy all the default files - just replace the ones you want.\n\n\nFinding Templates\n\uf0c1\n\n\nUsually there is one of two places to find a template:\n\n\n\n\nNew pages in \n=v4: \nresources/views/$controller/$action\n\n\nOld pages from \nv4: \napplication/views/$controller/$action\n\n\n\n\nIf you're skinning, then there's an extra two places:\n\n\n\n\nNew pages in \n=v4: \nresources/skins/$skin/$controller/$action\n\n\nOld pages from \nv4: \napplication/views/_skins/$skin/$controller/$action\n\n\n\n\nThe indicated variables above mean:\n\n\n\n\n$controller\n: typically the first part of the URL (after the main IXP Manager site) for the page you are looking at. Examples include: \npatch-panel\n, \nrouter\n but they may also be deeper API paths such as \napi/v4/router\n.\n\n\n$action\n: the last part of the URL such as \nedit\n.\n\n\n$skin\n: the name of your skin as defined above.\n\n\n\n\nTypically\n, following the URL path in the views directory will yield the template file you need.\n\n\nTo help identify if the page you are looking at is from the \n=v4 code base, we have added a HTML comment to the templates which appears just after the \nhead\n tag as follows:\n\n\n\n\n\n\nFor \n=v4 (new codebase):\n\n\n!--  IXP MANAGER - template directory: resources/[views|skins] --\n\n\n\n\n\n\n\n\n\n\nFor \nv4 (old codebase):\n\n\n!--  IXP MANAGER - template directory: application/views --", 
            "title": "Skinning"
        }, 
        {
            "location": "/features/skinning/#templates-skinning", 
            "text": "Remember that v4 is a transition version of  IXP Manager  from Zend Framework / Smarty to Laravel and so much of the frontend / templating still uses v3 templates and code. As such, how to skin a page will depend on whether the template is found in  resources/views  (v4) or  application/[modules/xxx/]views  (v3). Both are covered here.   IXP Manager  supports template/view skinning allowing users to substitute any of their own templates in place of the default ones shipped with IXP Manager.", 
            "title": "Templates &amp; Skinning"
        }, 
        {
            "location": "/features/skinning/#skinning-in-version-4", 
            "text": "First, set the following parameter in  .env :  VIEW_SKIN= example   Skins should then be placed in the  resources/skins/example  directory ( example  should be substituted for whatever you want to call your own skin). The default templates can be found in  resources/views  directory. INEX bundles its own skinned templates in  resources/skins/inex  as an example.  Once a skin is enabled from  .env , then any templates found in the skin directory  (using the same directory structure as found under  resouces/views )  will take precedence over the default template file. This means you do not need to recreate / copy all the default files - just replace the ones you want.  In previous versions of  IXP Manager , we used Smarty as the templating engine. This meant that if someone wanted to help improve  IXP Manager  then they would need to become familiar with PHP  and  Smarty. In v4 we dropped Smarty and, rather than using another compiled templating engine, we have decided to go with native PHP templates.  For this, we are using  Foil  -  Foil brings all the flexibility and power of modern template engines to native PHP templates. Write simple, clean and concise templates with nothing more than PHP.  Also, simulaneously supported are Lavael's own  Blade templates  which we sometimes use for simple pages.", 
            "title": "Skinning in Version 4+"
        }, 
        {
            "location": "/features/skinning/#example", 
            "text": "The  graphing  MRTG configuration generator allows for custom configuration content at the top and bottom of the file. In order to have your custom configuration enabled, you need to skin two files.  Here's an example:  # position ourselves in the IXP Manager root directory\ncd ${IXPROOT}\n\n# make the skin directory\nmkdir resources/skins/example\n\n# create the full path required for the MRTG configuration files:\nmkdir -p resources/skins/example/services/grapher/mrtg\n\n# copy over the customisation files:\ncp views/services/grapher/mrtg/custom-header.foil.php resources/skins/example/services/grapher/mrtg\ncp views/services/grapher/mrtg/custom-footer.foil.php resources/skins/example/services/grapher/mrtg\n\n# edit the above files as required\nvi resources/skins/example/services/grapher/mrtg/custom-header.plates.php\nvi resources/skins/example/services/grapher/mrtg/custom-footer.plates.php  Then, finally, edit  .env  and set the skin to use:  VIEW_SKINS= example   You can of course skin any file including the non-custom MRTG files as suits your needs.", 
            "title": "Example"
        }, 
        {
            "location": "/features/skinning/#custom-variables-configuration-options", 
            "text": "When you are skinning your own templates, you may find you need to create custom configuration options for values you do not want to store directly in your own templates. For this, we have a configuration file which is excluded from Git. Initiate it via::  cp config/custom.php.dist config/custom.php  This is  Laravel's standard configuration file format  (which is an associative PHP array). You can also use Laravel's dotenv variables here too.  As an example, if you were to create a configuration option:  ?php  example   =   [ \n     key   =   my own config value ,  ],   then in code this would be accessible as:  ?php  config (   custom.example.key ,   default value if not set|null   )   where the second parameter is a default option if the requested configuration setting has not been defined (which defaults to  null ). In templates, this can be accessed the same way or rendered in the template with::  ? =   config (   custom.example.key ,   default   )   ?", 
            "title": "Custom Variables / Configuration Options"
        }, 
        {
            "location": "/features/skinning/#skinning-old-templates", 
            "text": "This is still important as  IXP Manager  v4 still uses most of the previous templates.  To skin files found under  application/[modules/xxx/]views , proceed as follows:    set a skin name in  .env :\n    VIEW_SMARTY_SKIN= myskin      create a directory with a matching name:  application/views/_skins/myskin .    Once the above  .env  option is set, then any pages in its skin directory (using the same directory structure as  application/views  will take precedence over the default template files. This means you do not need to recreate / copy all the default files - just replace the ones you want.", 
            "title": "Skinning Old Templates"
        }, 
        {
            "location": "/features/skinning/#finding-templates", 
            "text": "Usually there is one of two places to find a template:   New pages in  =v4:  resources/views/$controller/$action  Old pages from  v4:  application/views/$controller/$action   If you're skinning, then there's an extra two places:   New pages in  =v4:  resources/skins/$skin/$controller/$action  Old pages from  v4:  application/views/_skins/$skin/$controller/$action   The indicated variables above mean:   $controller : typically the first part of the URL (after the main IXP Manager site) for the page you are looking at. Examples include:  patch-panel ,  router  but they may also be deeper API paths such as  api/v4/router .  $action : the last part of the URL such as  edit .  $skin : the name of your skin as defined above.   Typically , following the URL path in the views directory will yield the template file you need.  To help identify if the page you are looking at is from the  =v4 code base, we have added a HTML comment to the templates which appears just after the  head  tag as follows:    For  =v4 (new codebase):  !--  IXP MANAGER - template directory: resources/[views|skins] --     For  v4 (old codebase):  !--  IXP MANAGER - template directory: application/views --", 
            "title": "Finding Templates"
        }, 
        {
            "location": "/features/smokeping/", 
            "text": "Smokeping\n\uf0c1\n\n\nSmokeping is a tool for monitoring network latency and is an invaluable asset when diagnosing many IXP issues.\n\n\n\n\nWhile it should never be used as a tool for monitoring IXP latency (as routers de-prioritise ICMP requests and handle them in their management plane, it acts more of a indication of the router load than the latency of the exchange fabric), it can be an extremely useful tool for identifying and diagnosing other customer / member issues.\n\n\n\n\nIXP Manager can configure Smokeping to monitor member routers and display those graphs in member statistic pages. Presuming it is installed.\n\n\nHistorical Notes\n\uf0c1\n\n\nIf you have used Smokeping on IXP Manager \n4.5, then how the configuration is generated has changed. The \nolder documentation may be available here\n. In previous versions of IXP Manager, we generated entire / monolithic Smokeping configuration files. We have found in practice that this does not scale well and creates a number of limitations.\n\n\nIXP Manager \n= v4.5 now simply creates the targets on a per VLAN and protocol basis.\n\n\nTarget Selection\n\uf0c1\n\n\nThis section explains the rules on how a member router (target) is selected to be included in the generated Smokeping configuration.\n\n\nWhen generating a list of targets per VLAN and protocol, the API call to IXP Manager will select all VLAN interfaces (member routers) where:\n\n\n\n\nthat protocol (IPv4/6) is enabled for the member;\n\n\nCan Ping\n has been checked for that protocol; and\n\n\nthe virtual interface pertaining to the VLAN interface has at least on physical interface in the connected state.\n\n\n\n\nGenerating Smokeping Targets\n\uf0c1\n\n\nYou can use the \nIXP Manager\n API to get the Smokeping target configurations for a given VLAN and protocol using the following endpoint format (both GET and POST requests work):\n\n\nhttps://ixp.example.com/api/v4/vlan/smokeping/{vlanid}/{protocol}\n\n\n\n\n\nwhere:\n\n\n\n\nvlanid\n is the database ID (\nDB ID\n) of the VLAN. You can find the DB ID in IXP Manager in the VLAN table (select \nVLANs\n from the left hand side menu).\n\n\nprotocol\n is either \n4\n for \nIPv4\n or 6 for \nIPv6\n.\n\n\n\n\nIf either of these are invalid, the API will return with a HTTP 404 response.\n\n\nAnd example of a target in the reponse is:\n\n\n# AS112 Reverse DNS / 185.6.36.6\n+++ vlanint_86_ipv4\nmenu = AS112 Reverse DNS (IPv4)\ntitle =  Peering VLAN #1 :: AS112 Reverse DNS via 185.6.36.6\nprobe = FPing\nhost = 185.6.36.6\n\n\n\n\n\nOptional Parameters\n\uf0c1\n\n\nYou can optionally POST one or both of the following to change elements of the default template:\n\n\n\n\nlevel\n: the Smokeping level / hierarchy of the target. Defaults to \n+++\n.\n\n\nprobe\n: the probe to use when measuring latency to the target. Defaults for \nFPing\n for IPv4 and \nFPing6\n for IPv6.\n\n\n\n\nAn example of changing these parameters is:\n\n\ncurl --data \nlevel=%2B%2B\nprobe=MyPing\n -X POST \n\\\n\n    -H \nContent-Type: application/x-www-form-urlencoded\n \n\\\n\n    -H \nX-IXP-Manager-API-Key: my-ixp-manager-api-key\n \n\\\n\n    https://ixpexample.com/api/v4/vlan/smokeping/2/4\n\n\n\n\n\nTemplates / Skinning\n\uf0c1\n\n\nYou can use \nskinning\n to make changes to the bundled \ndefault\n template or, \npreferably\n, add your own.\n\n\nLet's say you wanted to add your own template called \nmytemplate1\n and your skin is named \nmyskin\n. The best way to proceed is to copy the bundled example:\n\n\ncd\n \n$IXPROOT\n\nmkdir -p resources/skins/myskin/api/v4/vlan/smokeping\ncp resources/views/api/v4/vlan/smokeping/default.foil.php resources/skins/myskin/api/v4/vlan/smokeping/mytemplate1.foil.php\n\n\n\n\n\nYou can now edit this template as required. The only constraint on the template name is it can only contain characters from the classes \na-z, 0-9, -\n. \nNB:\n do not use uppercase characters.\n\n\nThe following variables are available in the template:\n\n\n\n\n$t-\nvlis\n: array of the VLAN interfaces/targets - it is generated \nby the Repositories\\VlanInterface::getForProto() function\n.\n\n\n$t-\nvlan\n: instance of the \nVlan\n entity object\n.\n\n\n$t-\nprotocol\n: either \n4\n or \n6\n.\n\n\nprobe\n and \nlevel\n as defined above / passed via a post request.\n\n\n\n\nSetting Up Smokeping\n\uf0c1\n\n\nThis section explains how to set up Smokeping with IXP Manager. We assume you already have a base install of Smokeping.\n\n\nGenerating / Updating Targets\n\uf0c1\n\n\nAt INEX, we would use a script \nsuch as this one which is bundled with IXP Manager\n to (re)generate our targets by cron and update Smokeping if necessary.\n\n\nTo use this script yourself, you just need to copy it to the appropriate Smokeping server and edit the first few lines:\n\n\nKEY\n=\nmy-ixp-manager-api-key\n\n\nURL\n=\nhttps://ixp.example.com/api/v4/vlan/smokeping\n\n\nETCPATH\n=\n/etc/smokeping\n\n\nSMOKEPING\n=\n/usr/bin/smokeping\n\n\nSMOKEPING_RELOAD\n=\n/etc/rc.d/smokeping reload\n\n\nVLANS\n=\n1 2\n\n\nPROTOCOLS\n=\n4 6\n\n\n\n\nwhere:\n\n\n\n\nKEY\n is your IXP Manager \nAPI key\n.\n\n\nURL\n is the API endpoint as descibed above.\n\n\nETCPATH\n is where the script puts the target files (named \n$ETCPATH/targets-vlan${vlanid}-ipv${proto}.cfg\n)\n\n\nSMOKEPING\n is the Smokeping binary command. Just used to validate the config with \n--check\n before reloading.\n\n\nSMOKEPING_RELOAD\n - the command to reload Smokeping.\n\n\nVLANS\n - space separated list of VLAN DB IDs as described above. You probably only have one of these typically.\n\n\nPROTOCOLS\n - the protocols to generate the configuration for.\n\n\n\n\nThe script iterates over the VLAN IDs and protocols to create the individual configuration files.\n\n\nUsing Targets in Smokeping\n\uf0c1\n\n\nOnce the above target file(s) are created, we can use them in our standard Smokeping configuration file as follows:\n\n\n+ infra_1\nmenu = IXP Infrastructures 1\ntitle = IXP Infrastructures 1\n\n\n++ vlan_1\nmenu = Peering VLAN 1\ntitle = IXP Infra 1 :: Peering VLAN 1\n\n\n@include targets-vlan1-ipv4.cfg\n@include targets-vlan1-ipv6.cfg\n\n\n\n\n\nApache Configuration\n\uf0c1\n\n\nYou need to be able to configure IXP Manager with the base Smokeping URL such as \nhttp://www.example.com/smokeping\n. This should be the URL to Smokeping that is the standard Smokeping entry page.\n\n\nIXP Manager will add the trailing slash as assume the directory index is configured for the CGI script. Thus you need an Apache configuration such as:\n\n\nScriptAlias /smokeping/smokeping.cgi /usr/lib/cgi-bin/smokeping.cgi\nAlias /smokeping /usr/share/smokeping/www\n\n\nDirectory \n/usr/share/smokeping/www\n\n    Options FollowSymLinks\n    DirectoryIndex smokeping.cgi\n\n/Directory\n\n\n\n\n\n\nIXP Manager Configuration\n\uf0c1\n\n\nThe current implementation of Smokeping in IXP Manager is as a \nbridge\n between IXP manager v3 and Grapher - where we hope it will eventually end up.\n\n\nOnce you have configured Smokeping and Apache/web server as above, you really just need to set the following in your IXP Manager \n.env\n file:\n\n\nGRAPHER_SMOKEPING_URL=\nhttp://www.example.com/smokeping\n\n\n\n\n\n\nwhere the URL is as you set up in Apache above.\n\n\nThere may be instances where you have multiple VLANs where it is not possible to have a single Smokeping instance graph latency for every VLAN. Particularly as the Smokeping daemon for a given VLAN needs to have an interface / IP address on that VLAN.\n\n\nINEX has such a situation where we have a regional exchange, \nINEX Cork\n, that is located in a different city to the main INEX LANs and IXP Manager. In this situation, you can configure Smokeping URL overrides on a per VLAN basis by creating a file called \n$IXPROOT/config/grapher_smokeping_overrides.php\n which returns an array as follows:\n\n\n?php\n\n\n\nreturn\n \n[\n\n    \n2\n \n=\n \nhttp://www.example.com/smokeping\n,\n\n    \n4\n \n=\n \nhttp://www.example2.com/smokeping\n,\n\n    \n// etc ...\n\n\n];\n\n\n\n\n\n\nwhere the array index (\n2\n and \n4\n in the above example) is the VLAN DB ID as explained above.\n\n\nViewing Smokeping in IXP Manager\n\uf0c1\n\n\nWhen configured correctly, there will be a Smokeping button available in the member drilldown graphs (per port graphs) in both the member and admin sections.\n\n\nTroubleshooting\n\uf0c1\n\n\nSee \nissue #122\n for a discussion on Ubuntu installation and diagnosing issues in general (relates to IXP Manager v3 but may still be useful).\n\n\nWhen you look at the source HTML of the Smokeping page that IXP Manager generates, you'll see generated Smokeping image URLs like the following:\n\n\nhttps://www.example.com/ixp/smokeping/retrieve-image/ixp/1/scale/3hours/infra/2/vlan/3/vlanint/94/proto/ipv4\n\n\n\n\n\nIXP Manager will call something like\n\n\nfile_get_contents( \nhttps://www.example.com/smokeping/?.....\n )\n\n\n\n\n\n\nYou should see these requests to Smokeping in your Smokeping web server log files. Find these and compare them to the URLs that Smokeping itself generates for its own display of the images to ensure you have everything - and especially the Smokeping URL in IXP configuration set up correctly.\n\n\nAlso, try testing these URLs directly on the IXP Manager server via:\n\n\nphp -r \necho file_get_contents( \nhttps://...\n );", 
            "title": "Smokeping"
        }, 
        {
            "location": "/features/smokeping/#smokeping", 
            "text": "Smokeping is a tool for monitoring network latency and is an invaluable asset when diagnosing many IXP issues.   While it should never be used as a tool for monitoring IXP latency (as routers de-prioritise ICMP requests and handle them in their management plane, it acts more of a indication of the router load than the latency of the exchange fabric), it can be an extremely useful tool for identifying and diagnosing other customer / member issues.   IXP Manager can configure Smokeping to monitor member routers and display those graphs in member statistic pages. Presuming it is installed.", 
            "title": "Smokeping"
        }, 
        {
            "location": "/features/smokeping/#historical-notes", 
            "text": "If you have used Smokeping on IXP Manager  4.5, then how the configuration is generated has changed. The  older documentation may be available here . In previous versions of IXP Manager, we generated entire / monolithic Smokeping configuration files. We have found in practice that this does not scale well and creates a number of limitations.  IXP Manager  = v4.5 now simply creates the targets on a per VLAN and protocol basis.", 
            "title": "Historical Notes"
        }, 
        {
            "location": "/features/smokeping/#target-selection", 
            "text": "This section explains the rules on how a member router (target) is selected to be included in the generated Smokeping configuration.  When generating a list of targets per VLAN and protocol, the API call to IXP Manager will select all VLAN interfaces (member routers) where:   that protocol (IPv4/6) is enabled for the member;  Can Ping  has been checked for that protocol; and  the virtual interface pertaining to the VLAN interface has at least on physical interface in the connected state.", 
            "title": "Target Selection"
        }, 
        {
            "location": "/features/smokeping/#generating-smokeping-targets", 
            "text": "You can use the  IXP Manager  API to get the Smokeping target configurations for a given VLAN and protocol using the following endpoint format (both GET and POST requests work):  https://ixp.example.com/api/v4/vlan/smokeping/{vlanid}/{protocol}  where:   vlanid  is the database ID ( DB ID ) of the VLAN. You can find the DB ID in IXP Manager in the VLAN table (select  VLANs  from the left hand side menu).  protocol  is either  4  for  IPv4  or 6 for  IPv6 .   If either of these are invalid, the API will return with a HTTP 404 response.  And example of a target in the reponse is:  # AS112 Reverse DNS / 185.6.36.6\n+++ vlanint_86_ipv4\nmenu = AS112 Reverse DNS (IPv4)\ntitle =  Peering VLAN #1 :: AS112 Reverse DNS via 185.6.36.6\nprobe = FPing\nhost = 185.6.36.6", 
            "title": "Generating Smokeping Targets"
        }, 
        {
            "location": "/features/smokeping/#optional-parameters", 
            "text": "You can optionally POST one or both of the following to change elements of the default template:   level : the Smokeping level / hierarchy of the target. Defaults to  +++ .  probe : the probe to use when measuring latency to the target. Defaults for  FPing  for IPv4 and  FPing6  for IPv6.   An example of changing these parameters is:  curl --data  level=%2B%2B probe=MyPing  -X POST  \\ \n    -H  Content-Type: application/x-www-form-urlencoded   \\ \n    -H  X-IXP-Manager-API-Key: my-ixp-manager-api-key   \\ \n    https://ixpexample.com/api/v4/vlan/smokeping/2/4", 
            "title": "Optional Parameters"
        }, 
        {
            "location": "/features/smokeping/#templates-skinning", 
            "text": "You can use  skinning  to make changes to the bundled  default  template or,  preferably , add your own.  Let's say you wanted to add your own template called  mytemplate1  and your skin is named  myskin . The best way to proceed is to copy the bundled example:  cd   $IXPROOT \nmkdir -p resources/skins/myskin/api/v4/vlan/smokeping\ncp resources/views/api/v4/vlan/smokeping/default.foil.php resources/skins/myskin/api/v4/vlan/smokeping/mytemplate1.foil.php  You can now edit this template as required. The only constraint on the template name is it can only contain characters from the classes  a-z, 0-9, - .  NB:  do not use uppercase characters.  The following variables are available in the template:   $t- vlis : array of the VLAN interfaces/targets - it is generated  by the Repositories\\VlanInterface::getForProto() function .  $t- vlan : instance of the  Vlan  entity object .  $t- protocol : either  4  or  6 .  probe  and  level  as defined above / passed via a post request.", 
            "title": "Templates / Skinning"
        }, 
        {
            "location": "/features/smokeping/#setting-up-smokeping", 
            "text": "This section explains how to set up Smokeping with IXP Manager. We assume you already have a base install of Smokeping.", 
            "title": "Setting Up Smokeping"
        }, 
        {
            "location": "/features/smokeping/#generating-updating-targets", 
            "text": "At INEX, we would use a script  such as this one which is bundled with IXP Manager  to (re)generate our targets by cron and update Smokeping if necessary.  To use this script yourself, you just need to copy it to the appropriate Smokeping server and edit the first few lines:  KEY = my-ixp-manager-api-key  URL = https://ixp.example.com/api/v4/vlan/smokeping  ETCPATH = /etc/smokeping  SMOKEPING = /usr/bin/smokeping  SMOKEPING_RELOAD = /etc/rc.d/smokeping reload  VLANS = 1 2  PROTOCOLS = 4 6  \n\nwhere:   KEY  is your IXP Manager  API key .  URL  is the API endpoint as descibed above.  ETCPATH  is where the script puts the target files (named  $ETCPATH/targets-vlan${vlanid}-ipv${proto}.cfg )  SMOKEPING  is the Smokeping binary command. Just used to validate the config with  --check  before reloading.  SMOKEPING_RELOAD  - the command to reload Smokeping.  VLANS  - space separated list of VLAN DB IDs as described above. You probably only have one of these typically.  PROTOCOLS  - the protocols to generate the configuration for.   The script iterates over the VLAN IDs and protocols to create the individual configuration files.", 
            "title": "Generating / Updating Targets"
        }, 
        {
            "location": "/features/smokeping/#using-targets-in-smokeping", 
            "text": "Once the above target file(s) are created, we can use them in our standard Smokeping configuration file as follows:  + infra_1\nmenu = IXP Infrastructures 1\ntitle = IXP Infrastructures 1\n\n\n++ vlan_1\nmenu = Peering VLAN 1\ntitle = IXP Infra 1 :: Peering VLAN 1\n\n\n@include targets-vlan1-ipv4.cfg\n@include targets-vlan1-ipv6.cfg", 
            "title": "Using Targets in Smokeping"
        }, 
        {
            "location": "/features/smokeping/#apache-configuration", 
            "text": "You need to be able to configure IXP Manager with the base Smokeping URL such as  http://www.example.com/smokeping . This should be the URL to Smokeping that is the standard Smokeping entry page.  IXP Manager will add the trailing slash as assume the directory index is configured for the CGI script. Thus you need an Apache configuration such as:  ScriptAlias /smokeping/smokeping.cgi /usr/lib/cgi-bin/smokeping.cgi\nAlias /smokeping /usr/share/smokeping/www Directory  /usr/share/smokeping/www \n    Options FollowSymLinks\n    DirectoryIndex smokeping.cgi /Directory", 
            "title": "Apache Configuration"
        }, 
        {
            "location": "/features/smokeping/#ixp-manager-configuration", 
            "text": "The current implementation of Smokeping in IXP Manager is as a  bridge  between IXP manager v3 and Grapher - where we hope it will eventually end up.  Once you have configured Smokeping and Apache/web server as above, you really just need to set the following in your IXP Manager  .env  file:  GRAPHER_SMOKEPING_URL= http://www.example.com/smokeping   where the URL is as you set up in Apache above.  There may be instances where you have multiple VLANs where it is not possible to have a single Smokeping instance graph latency for every VLAN. Particularly as the Smokeping daemon for a given VLAN needs to have an interface / IP address on that VLAN.  INEX has such a situation where we have a regional exchange,  INEX Cork , that is located in a different city to the main INEX LANs and IXP Manager. In this situation, you can configure Smokeping URL overrides on a per VLAN basis by creating a file called  $IXPROOT/config/grapher_smokeping_overrides.php  which returns an array as follows:  ?php  return   [ \n     2   =   http://www.example.com/smokeping , \n     4   =   http://www.example2.com/smokeping , \n     // etc ...  ];   where the array index ( 2  and  4  in the above example) is the VLAN DB ID as explained above.", 
            "title": "IXP Manager Configuration"
        }, 
        {
            "location": "/features/smokeping/#viewing-smokeping-in-ixp-manager", 
            "text": "When configured correctly, there will be a Smokeping button available in the member drilldown graphs (per port graphs) in both the member and admin sections.", 
            "title": "Viewing Smokeping in IXP Manager"
        }, 
        {
            "location": "/features/smokeping/#troubleshooting", 
            "text": "See  issue #122  for a discussion on Ubuntu installation and diagnosing issues in general (relates to IXP Manager v3 but may still be useful).  When you look at the source HTML of the Smokeping page that IXP Manager generates, you'll see generated Smokeping image URLs like the following:  https://www.example.com/ixp/smokeping/retrieve-image/ixp/1/scale/3hours/infra/2/vlan/3/vlanint/94/proto/ipv4  IXP Manager will call something like  file_get_contents(  https://www.example.com/smokeping/?.....  )   You should see these requests to Smokeping in your Smokeping web server log files. Find these and compare them to the URLs that Smokeping itself generates for its own display of the images to ensure you have everything - and especially the Smokeping URL in IXP configuration set up correctly.  Also, try testing these URLs directly on the IXP Manager server via:  php -r  echo file_get_contents(  https://...  );", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/features/static-content/", 
            "text": "Static Content\n\uf0c1\n\n\nIXP Manager\n can serve some static pages for you if you wish. The typical use cases for this are:\n\n\n\n\nsupport details / contact page;\n\n\nother static content relevant to your members.\n\n\n\n\nOverview\n\uf0c1\n\n\nIn IXP Manager, there are four types of users as described \nin the users page\n. Static contact can be added which requires a minimum user privilege to access (e.g. \npriv == 0\n would be publicly accessible through to \npriv == 3\n which would require a superadmin).\n\n\nTo create static content, you should first \nset up skinning\n for your installation. Let's assume you called your skin \nexample\n.\n\n\nTo create a publically accessible static content page called \nmisc-benefits\n, you would first create a content directory in your skin as follows:\n\n\ncd\n \n$IXPROOT\n\nmkdir -p resources/skins/example/content/\n{\n0,1,2,3\n}\n\n\n\n\n\n\nwhere the directories \n0, 1, 2, 3\n represent the \nminimum required user privilege\n to access the content. You can now create your content page as follows:\n\n\ncp resources/views/content/0/example.foil.php resources/skins/example/content/0/misc-benefits.foil.php\n\n\n\n\n\nand then edit that page.\n\n\nIt can be accessed using a URL such as: \nhttps://ixp.example.com/content/0/misc-benefits\n where the route template is: \ncontent/{priv}/{page}\n.\n\n\n\n\n{priv}\n is the \nminimum required user privilege\n required to access the page and is used first for testing the user's permissions and second as the directory to check for the file.\n\n\n{page}\n is the name of the file to load (less \n.foil.php\n) and \nplease be aware that this is normalised as follows:\n\n\npreg_replace( \n/[^a-z0-9\\-_]/\n, \n, strtolower( $page ) )\n\n\n\n\ni.e. the file name can only contain characters from the class \n[a-z0-9\\-_]\n and all lower case. \nPrior to v4.8.0 the \nstrtolower()\n mistakenly occurred after the \npreg_replace()\n.\n\n\n\n\nThe \nexample.foil.php\n template copied above should provide the necessary structure for you. Essentially just replace the title and the content.\n\n\nFor publically accessible documents, there is an alias route:\n\n\n/public-content/{page}  -\n treated as: /content/0/{page}\n\n\n\n\n\nSupport / Contact Template\n\uf0c1\n\n\nIXP Manager ships with a link to \nSupport\n in the main title menu. You should copy and adjust this as neccessary via skinning:\n\n\ncp resources/views/content/0/support.foil.php resources/skins/example/content/0/support.foil.php\n\n\n\n\n\nDocumentation Menu\n\uf0c1\n\n\nYou can link to your own static contact pages using the \nDocumentation\n menu by skinning this file:\n\n\ncp resources/views/header-documentation.foil.php resources/skins/example/header-documentation.foil.php\n\n\n\n\n\nThe stock version includes a link to the example page and a external link to the IXP Manager website \n(we would be much obliged if you left this in place!)\n.\n\n\nINEX's own version of this can be found in the shipped \nresources/skins/inex/header-documentation.foil.php\n file which shows how we use it.", 
            "title": "Static Content"
        }, 
        {
            "location": "/features/static-content/#static-content", 
            "text": "IXP Manager  can serve some static pages for you if you wish. The typical use cases for this are:   support details / contact page;  other static content relevant to your members.", 
            "title": "Static Content"
        }, 
        {
            "location": "/features/static-content/#overview", 
            "text": "In IXP Manager, there are four types of users as described  in the users page . Static contact can be added which requires a minimum user privilege to access (e.g.  priv == 0  would be publicly accessible through to  priv == 3  which would require a superadmin).  To create static content, you should first  set up skinning  for your installation. Let's assume you called your skin  example .  To create a publically accessible static content page called  misc-benefits , you would first create a content directory in your skin as follows:  cd   $IXPROOT \nmkdir -p resources/skins/example/content/ { 0,1,2,3 }   where the directories  0, 1, 2, 3  represent the  minimum required user privilege  to access the content. You can now create your content page as follows:  cp resources/views/content/0/example.foil.php resources/skins/example/content/0/misc-benefits.foil.php  and then edit that page.  It can be accessed using a URL such as:  https://ixp.example.com/content/0/misc-benefits  where the route template is:  content/{priv}/{page} .   {priv}  is the  minimum required user privilege  required to access the page and is used first for testing the user's permissions and second as the directory to check for the file.  {page}  is the name of the file to load (less  .foil.php ) and  please be aware that this is normalised as follows:  preg_replace(  /[^a-z0-9\\-_]/ ,  , strtolower( $page ) )  \n\ni.e. the file name can only contain characters from the class  [a-z0-9\\-_]  and all lower case.  Prior to v4.8.0 the  strtolower()  mistakenly occurred after the  preg_replace() .   The  example.foil.php  template copied above should provide the necessary structure for you. Essentially just replace the title and the content.  For publically accessible documents, there is an alias route:  /public-content/{page}  -  treated as: /content/0/{page}", 
            "title": "Overview"
        }, 
        {
            "location": "/features/static-content/#support-contact-template", 
            "text": "IXP Manager ships with a link to  Support  in the main title menu. You should copy and adjust this as neccessary via skinning:  cp resources/views/content/0/support.foil.php resources/skins/example/content/0/support.foil.php", 
            "title": "Support / Contact Template"
        }, 
        {
            "location": "/features/static-content/#documentation-menu", 
            "text": "You can link to your own static contact pages using the  Documentation  menu by skinning this file:  cp resources/views/header-documentation.foil.php resources/skins/example/header-documentation.foil.php  The stock version includes a link to the example page and a external link to the IXP Manager website  (we would be much obliged if you left this in place!) .  INEX's own version of this can be found in the shipped  resources/skins/inex/header-documentation.foil.php  file which shows how we use it.", 
            "title": "Documentation Menu"
        }, 
        {
            "location": "/features/tacacs/", 
            "text": "TACACS (User Formatting)\n\uf0c1\n\n\nIXP Manager\n can generate formatted lists of user information. The best example of this is for TACACS.\n\n\nTACACS is used in most IXPs to manage access to switching and routing devices:\n\n\n\n\nto allow staff access to these devices with administrative privileges;\n\n\nto allow limited / full access to vendor support / TAC personnel;\n\n\nto allow member user access to services such as the route collector.\n\n\n\n\nIXP Manager\n comes with a flexible template for generating the user section of a TACACS file.\n\n\nGenerating TACACS Configuration\n\uf0c1\n\n\nYou can use the \nIXP Manager\n API to get the user section of a TACACS file using the following endpoint formats (both GET and POST requests work):\n\n\nhttps://ixp.example.com/api/v4/user/formatted\nhttps://ixp.example.com/api/v4/user/formatted/{priv}\nhttps://ixp.example.com/api/v4/user/formatted/{priv}/{template}\n\n\n\n\n\nwhere:\n\n\n\n\npriv\n is an optional user privilege to limit the user selection to. See \nthe available integer values on the \nAUTH_\n constants here\n. You typically want \n3\n.\n\n\ntemplate\n is an optional template (rather than \n$IXPROOT/resources/views/api/v4/user/formatted/default\n). See below.\n\n\n\n\nAnd example of a user in the reponse is:\n\n\nuser=joebloggs {\n    member=admin\n    login = des \n$2y$10$pHln5b4DrPj3uuhgfg45HeWEQLK/3ngRxYgYppbnYzleJ.9EpLAN.\n\n}\n\n\n\n\n\nOptional Parameters\n\uf0c1\n\n\nYou can optionally POST any of the following to change elements of the default template:\n\n\n\n\ntemplate\n: only relavent when you want to specify a specific template without a privilege.\n\n\npriv\n: same as above.\n\n\nusers\n: a comma-separated list of usernames to return rather than all / all based on privilege.\n\n\nbcrypt\n: IXP Manager stores bcrypt hashes with the prefix \n2y\n. Some systems, such as TACACS+ on FreeBSD, require \n2a\n. If you set \nbcrypt=2a\n, this substitution will be made before the data is returned.\n\n\ngroup\n: we put all users in the \nadmin\n group in the default template. You can change that here.\n\n\n\n\nAn example of changing these parameters is:\n\n\ncurl --data \nusers=bob,alice\ngroup=god\nbcrypt=2a\n -X POST \n\\\n\n    -H \nContent-Type: application/x-www-form-urlencoded\n \n\\\n\n    -H \nX-IXP-Manager-API-Key: my-ixp-manager-api-key\n \n\\\n\n    https://ixpexample.com/api/v4/user/formatted\n\n\n\n\n\nTemplates / Skinning\n\uf0c1\n\n\nYou can use \nskinning\n to make changes to the bundled \ndefault\n template or, \npreferably\n, add your own.\n\n\nLet's say you wanted to add your own template called \nmytemplate1\n and your skin is named \nmyskin\n. The best way to proceed is to copy the bundled example:\n\n\ncd\n \n$IXPROOT\n\nmkdir -p resources/skins/myskin/api/v4/user/formatted\ncp resources/views/api/v4/user/formatted/default.foil.php resources/skins/myskin/api/v4/user/formatted/mytemplate1.foil.php\n\n\n\n\n\nYou can now edit this template as required. The only constraint on the template name is it can only contain characters from the classes \na-z, 0-9, -\n. \nNB:\n do not use uppercase characters.\n\n\nAll variables available in the template can be \nseen in the default template\n.\n\n\nSetting Up TACACS\n\uf0c1\n\n\nThis section explains how to set up TACACS with IXP Manager. We assume you already have an understanding of TACACS.\n\n\nGenerating / Updating TACACS\n\uf0c1\n\n\nAt INEX, we use a script that:\n\n\n\n\nincludes the header and footer information for the conf file;\n\n\npulls the user details from IXP Manager (specific users);\n\n\nvalidates the config;\n\n\ncompares to current;\n\n\nreloads / restarts tac_plus if required.\n\n\n\n\nYou can find that script \nin this directory\n. Alter it to suit your own purposes.", 
            "title": "TACACS"
        }, 
        {
            "location": "/features/tacacs/#tacacs-user-formatting", 
            "text": "IXP Manager  can generate formatted lists of user information. The best example of this is for TACACS.  TACACS is used in most IXPs to manage access to switching and routing devices:   to allow staff access to these devices with administrative privileges;  to allow limited / full access to vendor support / TAC personnel;  to allow member user access to services such as the route collector.   IXP Manager  comes with a flexible template for generating the user section of a TACACS file.", 
            "title": "TACACS (User Formatting)"
        }, 
        {
            "location": "/features/tacacs/#generating-tacacs-configuration", 
            "text": "You can use the  IXP Manager  API to get the user section of a TACACS file using the following endpoint formats (both GET and POST requests work):  https://ixp.example.com/api/v4/user/formatted\nhttps://ixp.example.com/api/v4/user/formatted/{priv}\nhttps://ixp.example.com/api/v4/user/formatted/{priv}/{template}  where:   priv  is an optional user privilege to limit the user selection to. See  the available integer values on the  AUTH_  constants here . You typically want  3 .  template  is an optional template (rather than  $IXPROOT/resources/views/api/v4/user/formatted/default ). See below.   And example of a user in the reponse is:  user=joebloggs {\n    member=admin\n    login = des  $2y$10$pHln5b4DrPj3uuhgfg45HeWEQLK/3ngRxYgYppbnYzleJ.9EpLAN. \n}", 
            "title": "Generating TACACS Configuration"
        }, 
        {
            "location": "/features/tacacs/#optional-parameters", 
            "text": "You can optionally POST any of the following to change elements of the default template:   template : only relavent when you want to specify a specific template without a privilege.  priv : same as above.  users : a comma-separated list of usernames to return rather than all / all based on privilege.  bcrypt : IXP Manager stores bcrypt hashes with the prefix  2y . Some systems, such as TACACS+ on FreeBSD, require  2a . If you set  bcrypt=2a , this substitution will be made before the data is returned.  group : we put all users in the  admin  group in the default template. You can change that here.   An example of changing these parameters is:  curl --data  users=bob,alice group=god bcrypt=2a  -X POST  \\ \n    -H  Content-Type: application/x-www-form-urlencoded   \\ \n    -H  X-IXP-Manager-API-Key: my-ixp-manager-api-key   \\ \n    https://ixpexample.com/api/v4/user/formatted", 
            "title": "Optional Parameters"
        }, 
        {
            "location": "/features/tacacs/#templates-skinning", 
            "text": "You can use  skinning  to make changes to the bundled  default  template or,  preferably , add your own.  Let's say you wanted to add your own template called  mytemplate1  and your skin is named  myskin . The best way to proceed is to copy the bundled example:  cd   $IXPROOT \nmkdir -p resources/skins/myskin/api/v4/user/formatted\ncp resources/views/api/v4/user/formatted/default.foil.php resources/skins/myskin/api/v4/user/formatted/mytemplate1.foil.php  You can now edit this template as required. The only constraint on the template name is it can only contain characters from the classes  a-z, 0-9, - .  NB:  do not use uppercase characters.  All variables available in the template can be  seen in the default template .", 
            "title": "Templates / Skinning"
        }, 
        {
            "location": "/features/tacacs/#setting-up-tacacs", 
            "text": "This section explains how to set up TACACS with IXP Manager. We assume you already have an understanding of TACACS.", 
            "title": "Setting Up TACACS"
        }, 
        {
            "location": "/features/tacacs/#generating-updating-tacacs", 
            "text": "At INEX, we use a script that:   includes the header and footer information for the conf file;  pulls the user details from IXP Manager (specific users);  validates the config;  compares to current;  reloads / restarts tac_plus if required.   You can find that script  in this directory . Alter it to suit your own purposes.", 
            "title": "Generating / Updating TACACS"
        }, 
        {
            "location": "/dev/api/", 
            "text": "API\n\uf0c1\n\n\nYou'll find API documentation when logged into IXP manager under \nMy Account / API Keys\n.", 
            "title": "API"
        }, 
        {
            "location": "/dev/api/#api", 
            "text": "You'll find API documentation when logged into IXP manager under  My Account / API Keys .", 
            "title": "API"
        }, 
        {
            "location": "/dev/ci/", 
            "text": "Continuous Integration\n\uf0c1\n\n\nIXP Manager grew out of a code base and schema that started in the early '90s. Long before \ntest driven development\n or \nbehaviour driven development\n was fashionable for PHP. However, as IXP Manager is taking over more and more critical configuration tasks, we need to back fill some automated testing with continuous integration.\n\n\nFor this we have chosen \nTravis-CI\n which provides free cloud based CI linked with GitHub for open source projects. Our current build status is: \n\n\nWe won't be aggressively writing tests for the existing codebase but will add tests as appropriate as we continue development. What follows is some basic instructions on how to set up tests and an overview (or links) to tests we have implemented.\n\n\nSetting Up PHPUnit Tests\n\uf0c1\n\n\nDISCLAIMER:\n This is not a tutorial on unit testing, phpunit or anything else. If you have no experience with these tools, please read up on them elsewhere first.\n\n\nDocumentation by real example can be found via the \n.travis.yml\n file and \nthe Travis data directory\n which contains scripts, database dumps and configurations.\n\n\nTesting assumes \na known good sample database\n which contains a small mix of customers with different configuration options. The files generated from this database are tested against \nknown good\n configuration files. You first need to create a database, add a database user, import this testing database and then configure a \n.env\n section for testing.\n\n\nIn MySQL:\n\n\nCREATE\n \nDATABASE\n \nixp_ci\n \nCHARACTER\n \nSET\n \n=\n \nutf8mb4\n \nCOLLATE\n \n=\n \nutf8mb4_unicode_ci\n;\n\n\nGRANT\n \nALL\n \nON\n \n`ixp_ci`\n.\n*\n \nTO\n \n`ixp_ci`\n@\n`localhost`\n \nIDENTIFIED\n \nBY\n \nsomepassword\n;\n\n\nFLUSH\n \nPRIVILEGES\n;\n\n\n\n\n\n\nThen import the sample database:\n\n\nbzcat data/travis-ci/travis_ci_test_db.sql.bz2  \n|\n mysql -h localhost -u ixp_ci -psomepassword ixp_ci\n\n\n\n\n\nNow, create your \n.env\n for testing, such as:\n\n\nDB_HOST\n=\nlocalhost\n\n\nDB_DATABASE\n=\nixp_ci\n\n\nDB_USERNAME\n=\nixp_ci\n\n\nDB_PASSWORD\n=\nsomepassword\n\n\n\n\n\n\nNote that the \nphpunit.xml\n file in the root directory has some default settings matching the test database. You should not need to edit these.\n\n\nTest Database Notes\n\uf0c1\n\n\n\n\nthe \nSUPERADMIN\n username / password is one-way hashed using bcrypt. If you want to log into the frontend of the test databse, these details are: \ntravis\n / \ntravisci\n.\n\n\n\n\nRunning Tests\n\uf0c1\n\n\nIn one console session, start the artisan / Laravel web server:\n\n\n# move to the root directory of IXP Manager\n\n\ncd\n \n$IXPROOT\n\nphp artisan serve\n\n\n\n\n\nAnd then kick off the tests:\n\n\nphpunit\n\n\n\n\n\nSample output:\n\n\nPHPUnit 6.1.0 by Sebastian Bergmann and contributors.\n\n...............                                                   15 / 15 (100%)\n\nTime: 1.65 seconds, Memory: 32.00MB\n\nOK (15 tests, 67 assertions)", 
            "title": "Continuous Integration"
        }, 
        {
            "location": "/dev/ci/#continuous-integration", 
            "text": "IXP Manager grew out of a code base and schema that started in the early '90s. Long before  test driven development  or  behaviour driven development  was fashionable for PHP. However, as IXP Manager is taking over more and more critical configuration tasks, we need to back fill some automated testing with continuous integration.  For this we have chosen  Travis-CI  which provides free cloud based CI linked with GitHub for open source projects. Our current build status is:   We won't be aggressively writing tests for the existing codebase but will add tests as appropriate as we continue development. What follows is some basic instructions on how to set up tests and an overview (or links) to tests we have implemented.", 
            "title": "Continuous Integration"
        }, 
        {
            "location": "/dev/ci/#setting-up-phpunit-tests", 
            "text": "DISCLAIMER:  This is not a tutorial on unit testing, phpunit or anything else. If you have no experience with these tools, please read up on them elsewhere first.  Documentation by real example can be found via the  .travis.yml  file and  the Travis data directory  which contains scripts, database dumps and configurations.  Testing assumes  a known good sample database  which contains a small mix of customers with different configuration options. The files generated from this database are tested against  known good  configuration files. You first need to create a database, add a database user, import this testing database and then configure a  .env  section for testing.  In MySQL:  CREATE   DATABASE   ixp_ci   CHARACTER   SET   =   utf8mb4   COLLATE   =   utf8mb4_unicode_ci ;  GRANT   ALL   ON   `ixp_ci` . *   TO   `ixp_ci` @ `localhost`   IDENTIFIED   BY   somepassword ;  FLUSH   PRIVILEGES ;   Then import the sample database:  bzcat data/travis-ci/travis_ci_test_db.sql.bz2   |  mysql -h localhost -u ixp_ci -psomepassword ixp_ci  Now, create your  .env  for testing, such as:  DB_HOST = localhost  DB_DATABASE = ixp_ci  DB_USERNAME = ixp_ci  DB_PASSWORD = somepassword   Note that the  phpunit.xml  file in the root directory has some default settings matching the test database. You should not need to edit these.", 
            "title": "Setting Up PHPUnit Tests"
        }, 
        {
            "location": "/dev/ci/#test-database-notes", 
            "text": "the  SUPERADMIN  username / password is one-way hashed using bcrypt. If you want to log into the frontend of the test databse, these details are:  travis  /  travisci .", 
            "title": "Test Database Notes"
        }, 
        {
            "location": "/dev/ci/#running-tests", 
            "text": "In one console session, start the artisan / Laravel web server:  # move to the root directory of IXP Manager  cd   $IXPROOT \nphp artisan serve  And then kick off the tests:  phpunit  Sample output:  PHPUnit 6.1.0 by Sebastian Bergmann and contributors.\n\n...............                                                   15 / 15 (100%)\n\nTime: 1.65 seconds, Memory: 32.00MB\n\nOK (15 tests, 67 assertions)", 
            "title": "Running Tests"
        }, 
        {
            "location": "/dev/cla/", 
            "text": "Contributor License Agreement\n\uf0c1\n\n\nPlease see the \ncontributing instructions\n for full details.\n\n\nThird-party patches are welcomed for adding functionality and  fixing bugs. Before they can be accepted into the project, contributors must sign the below \nContributor License Agreement\n (\ngpg --clearsign inex-cla.txt\n) and email it to \noperations (at) inex (dot) ie\n.\n\n\nIndividual Contributor License Agreement v1.1\n=============================================\n\nInternet Neutral Exchange Association Company Limited By Guarantee\n\nThis document clarifies the terms under which You, the person listed below,\nmay make Contributions \u2014 which may include without limitation, software, bug\nfixes, configuration changes, documentation, or any other materials \u2014 to any\nof the projects owned or managed by Internet Neutral Exchange Association\nCompany Limited By Guarantee, hereinafter known as \nINEX\n.\n\nPlease complete the following information about You and the Contributions.\nIf You have questions about these terms, please contact us at\nmanager@inex.ie.\n\nYou accept and agree to the following terms and conditions for Your present\nand future Contributions submitted to INEX.  Except for the license granted\nherein to INEX, You reserve all right, title, and interest in and to Your\nContributions.\n\nINEX projects (code, documentation, and any other materials) are released\nunder the terms of the GNU General Public License, v2.0.\n\nYou certify that:\n\n(a) Your Contributions are created in whole or in part by You and You have\nthe right to submit it under the designated license; or\n\n(b) Your Contributions are based upon previous work that, to the best of\nyour knowledge, is covered under an appropriate open source license and You\nhave the right under that license to submit that work with modifications,\nwhether created in whole or in part by You, under the designated license; or\n\n(c) Your Contributions are provided directly to You by some other person who\ncertified (a) or (b) and You have not modified them.\n\n(d) You understand and agree that INEX projects and Your Contributions are\npublic and that a record of the Contributions (including all metadata and\npersonal information You submit with them) is maintained indefinitely and\nmay be redistributed in a manner consistent with INEX\ns policies and/or the\nrequirements of the GNU General Public License v2.0 where they are relevant.\n\n(e) You are granting Your Contributions to INEX under the terms of the GNU\nGeneral Public License v2.0.\n\nFull Name:\nEmail Addresses:\nDate:", 
            "title": "Contributer License Agreement"
        }, 
        {
            "location": "/dev/cla/#contributor-license-agreement", 
            "text": "Please see the  contributing instructions  for full details.  Third-party patches are welcomed for adding functionality and  fixing bugs. Before they can be accepted into the project, contributors must sign the below  Contributor License Agreement  ( gpg --clearsign inex-cla.txt ) and email it to  operations (at) inex (dot) ie .  Individual Contributor License Agreement v1.1\n=============================================\n\nInternet Neutral Exchange Association Company Limited By Guarantee\n\nThis document clarifies the terms under which You, the person listed below,\nmay make Contributions \u2014 which may include without limitation, software, bug\nfixes, configuration changes, documentation, or any other materials \u2014 to any\nof the projects owned or managed by Internet Neutral Exchange Association\nCompany Limited By Guarantee, hereinafter known as  INEX .\n\nPlease complete the following information about You and the Contributions.\nIf You have questions about these terms, please contact us at\nmanager@inex.ie.\n\nYou accept and agree to the following terms and conditions for Your present\nand future Contributions submitted to INEX.  Except for the license granted\nherein to INEX, You reserve all right, title, and interest in and to Your\nContributions.\n\nINEX projects (code, documentation, and any other materials) are released\nunder the terms of the GNU General Public License, v2.0.\n\nYou certify that:\n\n(a) Your Contributions are created in whole or in part by You and You have\nthe right to submit it under the designated license; or\n\n(b) Your Contributions are based upon previous work that, to the best of\nyour knowledge, is covered under an appropriate open source license and You\nhave the right under that license to submit that work with modifications,\nwhether created in whole or in part by You, under the designated license; or\n\n(c) Your Contributions are provided directly to You by some other person who\ncertified (a) or (b) and You have not modified them.\n\n(d) You understand and agree that INEX projects and Your Contributions are\npublic and that a record of the Contributions (including all metadata and\npersonal information You submit with them) is maintained indefinitely and\nmay be redistributed in a manner consistent with INEX s policies and/or the\nrequirements of the GNU General Public License v2.0 where they are relevant.\n\n(e) You are granting Your Contributions to INEX under the terms of the GNU\nGeneral Public License v2.0.\n\nFull Name:\nEmail Addresses:\nDate:", 
            "title": "Contributor License Agreement"
        }, 
        {
            "location": "/dev/docker/", 
            "text": "Docker\n\uf0c1\n\n\nFor development purposes, we have both Docker and \nVagrant\n build files.\n\n\nThis page on Docker for IXP Manager development should be read in conjunction with the \nofficial IXP Manager Docker repository\n. While that repository is not for development purposes, the terminology and container descriptions apply here also.\n\n\nTL;DR Guide to Get Docker Running\n\uf0c1\n\n\nIf you want to get IXP Manager with Docker up and running quickly, follow these steps:\n\n\n\n\nInstall Docker (see: \nhttps://www.docker.com/community-edition\n)\n\n\n\n\nClone IXP Manager to a directory:\n\n\ngit clone https://github.com/inex/IXP-Manager.git ixpmanager\n\ncd \nixpmanager\n\n\n\n3. Copy the stock Docker/IXP Manager configuration file and default database:\n\n\ncp .env.docker .env\ncp tools/docker/containers/mysql/docker.sql.dist tools/docker/containers/mysql/docker.sql\n\n\n\n\n\n\n\n\n\nSpin up the Docker containers\n\n\ndocker-compose -p ixpm up\n\n\n\n\n\n\n\n\n\nAccess IXP Manager on: http://localhost:8880/\n\n\n\n\n\n\nLog in with one of the following username / passwords:\n\n\n\n\n\n\nAdmin user: \ndocker / docker01\n\n\n\n\nCustomer Admin: \nas112admin / as112admin\n\n\nCustomer User: \nas112user / as112user\n\n\n\n\nGeneral Overview\n\uf0c1\n\n\nAs the IXP Manager ecosystem grows, it becomes harder and harder to maintain ubiquitous development environments. Docker is ideally suited to solving these issues.\n\n\nThe multi-container Docker environment for developing IXP Manager builds an IXP Manager system which includes:\n\n\n\n\na custom MySQL database container (from \nmysql/5.7\n).\n\n\nthe complete IXP Manager application build on the \nphp/7.0-apache\n base. This has been preconfigured with some customers, routers, switches, etc. to match the following containers.\n\n\ntwo emulated switches via SNMP endpoints (using the excellent \nSNMP Agent Simulator\n via \ntandrup/snmpsim\n);\n\n\na mail trap with a web-based frontend to capture and analyse all emails sent by IXP Manager (thanks to \nschickling/mailcatcher\n).\n\n\na mrtg container to query the switches and build up mrtg log files / graphs (via \ncityhawk/mrtg\n).\n\n\na Bird-based route server pre-configured for 3 x IPv4 and 2 x IPv6 sessions. This also includes our \nBird's Eye\n looking glass which has been integrated into \nrs1\n container and configured into the IXP Manager container.\n\n\nfive Bird-based route server clients complete with routes and a route server session.\n\n\n\n\nUseful Docker Commands\n\uf0c1\n\n\nThe following are a list of Docker commands that are useful in general but also specifically for the IXP Manager Docker environment.\n\n\nNote that in our examples, we set the Docker project name to \nixpm\n and so that prefix is used in some of the below. We also assume that only one IXP Manager Docker environments is running and so we complate Docker container names with \n_1\n.\n\n\n# show all running containers\n\ndocker ps\n\n\n# show all containers - running and stopped\n\ndocker ps -a\n\n\n# stop a container:\n\ndocker stop \ncontainer\n\n\n\n# start a container:\n\ndocker start \ncontainer\n\n\n\n# we create a \nixpmanager\n network. Sometimes you need to delete this when\n\n\n# stopping / starting the environment\n\ndocker network rm ixpm_ixpmanager\n\n\n# you can copy files into a docker container via:\n\ndocker cp test.sql ixmp_mysql_1:/tmp\n\n# where \nixmp_mysql_1\n is the container name.\n\n\n# reverse it to copy a file out:\n\ndocker cp ixmp_mysql_1:/tmp/dump.sql .\n\n\n# I use two useful aliases for stopping and removing all containers:\n\n\nalias \ndocker-stop-all\n=\ndocker stop $(docker ps -a -q)\n\n\nalias \ndocker-rm-all\n=\ndocker rm $(docker ps -a -q)\n\n\n\n# You can also remove all unused (unattached) volumes:\n\ndocker volume prune\n\n# WARNING: you might want to check what will be deleted with:\n\ndocker volume ls -f \ndangling\n=\ntrue\n\n\n\n\n\n\nDevelopment Use\n\uf0c1\n\n\nAs above, please note that in our examples, we set the Docker project name to \nixpm\n and so that prefix is used in some of the below. We also assume that only one IXP Manager Docker environments is running and so we complete Docker container names with \n_1\n.\n\n\nFor most routine development use, you only need two containers usually:\n\n\ndocker-compose -p ixpm up mysql www\n\n\n\n\n\nIf you are sending emails as part of your development process, include the mail catcher:\n\n\ndocker-compose -p ixpm up mysql www mailcatcher\n\n\n\n\n\nMySQL Database\n\uf0c1\n\n\nWhen the mysql container builds, it pre-populates the database with the contents of the SQL file found at \ntools/docker/containers/mysql/docker.sql\n. This is not present by default and is ignored by Git (to ensure you do not accidentally commit a production database!).\n\n\nA default SQL database is bundled and should be placed in this location via:\n\n\ncp tools/docker/containers/mysql/docker.sql.dist tools/docker/containers/mysql/docker.sql\n\n\n\n\n\nYou can put your own database here also. If you do, you will need to rebuilt the mysql contain:\n\n\n docker-compose build mysql\n \n```\n\n\n You can access the MySQL database via:\n\n\n```\nsh\ndocker \nexec\n -it ixpm_mysql_1 mysql -i ixpmanager\n\n\n\n\n\nAnd you can get shell access to the container with:\n\n\ndocker \nexec\n -it ixpm_mysql_1 bash\n\n\n\n\n\nWeb Server\n\uf0c1\n\n\nNote that the \nwww\n container mounts the IXP Manager development directory under \n/srv/ixpmanager\n. This means all local code changes are immediately reflected on the Docker web server.\n\n\nThe Dockerfile used to build the \nwww\n container can be found at \ntools/docker/containers/www/Dockerfile\n.\n\n\nYou can access the container with:\n\n\ndocker \nexec\n -it ixpm_www_1 bash\n\n\n\n\n\nMailcatcher\n\uf0c1\n\n\nWe include a mailcatcher container which catches all emails IXP Manager sends and displays them on a web frontend. Ensure this container is started by either:\n\n\n# start all containers:\n\ndocker-compose -p ixpm up\n\n# start mailcatcher with (at least) mysql and www:\n\ndocker-compose -p ixpm up mysql www mailcatcher\n\n\n\n\n\nThe \n.env.docker\n config contains the following SMTP / mail settings which ensure emails get send to the mailcatcher:\n\n\nMAIL_HOST=172.30.201.11\nMAIL_PORT=1025\n\n\n\n\n\nYou can then view emails sent on: http://localhost:1080/\n\n\nEmulating Switches\n\uf0c1\n\n\nixpm_switch1_1\n and \nixpm_switch2_1\n emulate switches by replaying SNMP dumps from real INEX switches (with some sanitisation). The OIDs for traffic have been replaced with a dynamic function to give varying values.\n\n\nFrom the \nwww\n container, you can interact with these via:\n\n\n$ docker exec -it ixpm_www_1 bash\n# ping switch1\n...\n64 bytes from switch1 (172.30.201.60): icmp_seq=1 ttl=64 time=0.135 ms\n...\n# ping switch2\n...\n64 bytes from switch2 (172.30.201.61): icmp_seq=1 ttl=64 time=0.150 ms\n...\n\n\n# snmpwalk -On -v 2c -c switch1 switch1 .1.3.6.1.2.1.1.5.0\n.1.3.6.1.2.1.1.5.0 = STRING: \nswitch1\n\n# snmpwalk -On -v 2c -c switch2 switch2 .1.3.6.1.2.1.1.5.0\n.1.3.6.1.2.1.1.5.0 = STRING: \nswitch2\n\n\n\n\n\n\nYou'll note from the above that the hostnames \nswitch1\n and \nswitch2\n work from the \nwww\n container. Note also that the SNMP community is the hostname (\nswitch1\n or \nswitch2\n as appropriate).\n\n\nThe packaged database only contains \nswitch1\n. This allows you can add the second switch via http://localhost:8880/switch/add-by-snmp by setting the hostname and community to \nswitch2\n.\n\n\nIf you want to add new customers for testing, add \nswitch2\n and then use interfaces \nEthernet 2, 8, 13\n and \n6 and 7\n as a lag as these have been preset to provide dynamic stats.\n\n\nRoute Server and Clients\n\uf0c1\n\n\nThe containers include a working route server (\nixpm_rs1_1\n) with 3 IPv4 clients (\nixpm_cust-as112_1\n, \nixpm_cust-as42_1\n, \nixpm_cust-as1213_1\n) and and 2 IPv6 clients (\nixpm_cust-as1213-v6_1\n, \nixpm_cust-as25441-v6_1\n). IXP Manager also includes a working looking glass for this with Bird's Eye installed on the route server.\n\n\nYou can access the Bird BGP clients on the five sample customers using the following examples:\n\n\n# access Bird command line interface:\n\ndocker \nexec\n -it ixpm_cust-as112_1 birdc\n\n\n# run a specific Bird command\n\ndocker \nexec\n -it ixpm_cust-as112_1 birdc show protocols\n\n\n\n\n\nThe route server runs an IPv4 and an IPv6 daemon. These can be accessed via the looking glass at http://127.0.0.1:8880/lg or on the command line via:\n\n\n# ipv4 daemon:\n\ndocker \nexec\n -it ixpm_rs1_1 birdc -s /var/run/bird/bird-rs1-ipv4.ctl\n\n\n# ipv6 daemon:\n\ndocker \nexec\n -it ixpm_rs1_1 birdc6 -s /var/run/bird/bird-rs1-ipv6.ctl\n\n\n\n\n\nIn this container, Bird's Eye can be found at \n/srv/birdseye\n with the web server config under \n/etc/lighttpd/lighttpd.conf\n.\n\n\nWe include the IXP Manager scripts for updating the route server configuration and reconfiguring Bird:\n\n\n# get shell access to the container\n\ndocker \nexec\n -it ixpm_rs1_1 bash\n\n\n# all scripts under the following directory\n\n\ncd\n /usr/local/sbin/\n\n\n# reconfigure both daemons:\n\n./api-reconfigure-all-v4.sh\n\n\n# reconfigure a specific daemon with verbosity:\n\n./api-reconfigure-v4.sh -d -h rs1-ipv4\n\n\n\n\n\nMrtg / Grapher\n\uf0c1\n\n\nFor developing / testing Grapher with Mrtg, we include a container that runs Mrtg via cron from a pre-configured \nmrtg.conf\n file.\n\n\nNB: please ensure to update the \nGRAPHER_BACKENDS\n option in \n.env\n so it includes \nmrtg\n as follows:\n\n\nGRAPHER_BACKENDS=\nmrtg|dummy\n\n\n\n\n\n\nThe configuration file matches the \ndocker.sql\n configuration and can be seen in the IXP Manager source directory at \ntools/docker/mrtg/mrtg.cfg\n.\n\n\nYou can access the Mrtg container via:\n\n\ndocker \nexec\n -it ixpm_mrtg_1 sh\n\n\n\n\n\nWe also install a script in the root directory of the container that will pull a new configuration from IXP Manager. Run it via:\n\n\ndocker \nexec\n -it ixpm_mrtg_1 sh\n\ncd\n /\n./update-mrtg-conf.sh\n\n\n# or without entering the container:\n\ndocker \nexec\n -it ixpm_mrtg_1 /update-mrtg-conf.sh\n\n\n\n\n\nIt will replace \n/etc/mrtg.conf\n for the next cron run. It also sets the configuration not to run as a daemon as cron is more useful for development.\n\n\nDev Tool Integrations\n\uf0c1\n\n\nNB: these tools and integrations are not IXP Manager specific but rather the typical Docker / PHP development tool chain. Please use support forums for the relevant sections / tools rather than contacting the IXP Manager developers directly.\n\n\nPHP Storm and Xdebug\n\uf0c1\n\n\nWe are big fans of \nPhpStorm\n at IXP Manager DevHQ. One key feature is PhpStorm's integration with PHP Xdebug. We of course also need this to work with Docker.\n\n\nSome background information on Xdebug is provided below but you are expected to be familiar with \nthe Xdebug documentation on remote debugging\n.\n\n\nThe way interactive remote debugging works with Xdebug is as follows:\n\n\n\n\nEnable remote debugging on the PHP server (\nphp.ini\n settings on the \nwww\n container).\n\n\nYour browser, with a suitable plugin, includes a Xdebug parameter to signal you want remote debugging started for this request (either a GET, POST or Cookie setting).\n\n\nPHP Xdebug connects to the configured remote debugger \n(PhpStorm in our case)\n allowing you to set break points, step through instructions, view variable contents at a point in time, etc.\n\n\n\n\nTo get this working with Docker, we need to work through each of these steps.\n\n\n1. Enable Remote Debugging in the Docker Container\n\n\nIf you examine the \nwww\n container Dockerfile in the IXP Manager source under \ntools/docker/containers/www/Dockerfile\n, you will see that we:\n\n\n\n\nbuild the PHP Xdebug extension (\npecl install xdebug\n).\n\n\nconfigure in the container file \n/usr/local/etc/php/conf.d/local-ixpmanager-xdebug.ini\n as follows:\n\n\n\n\n[xdebug]\nzend_extension=/usr/local/lib/php/extensions/no-debug-non-zts-20151012/xdebug.so\nxdebug.remote_enable=1\nxdebug.remote_port=9001\nxdebug.remote_autostart=0\nxdebug.idekey=PHPSTORM\nxdebug.profiler_enable=0\nxdebug.profiler_enable_trigger=1\nxdebug.profiler_output_dir=/srv/ixpmanager/storage/tmp\nxdebug.auto_trace=0\nxdebug.trace_enable_trigger=1\nxdebug.trace_output_dir=/srv/ixpmanager/storage/tmp\n\n\n\n\n\nNote that the \nzend_extension\n may change as it is dynamically set by the build script. We also chose port 9001 rather than the default of 9000 \ndue to local conflicts with common tool chains\n.\n\n\nThe \none key element that is missing in the INI is the remote debugger IP address\n. This needs to be set to your development computer's LAN address (there are other options but this works best in practice). Once you know this address (say it's \n192.0.2.23\n), set the following in the \n${IXPROOT}/.env\n:\n\n\n# For PHP xdebug, put in the IP address of your host\nDOCKER_XDEBUG_CONFIG_REMOTE_HOST=192.0.2.23\n\n\n\n\n\nWhen you start the Docker environment from \n$IXPROOT\n using \ndocker-compose\n with something like:\n\n\ncd $IXPROOT\ndocker-compose -p ixpm up mysql www\n\n\n\n\n\nthen \ndocker-compose\n will use this setting from the \n.env\n file and it will be passed through the Xdebug.\n\n\n2. Install a Xdebug Plugin on Your Browser\n\n\nSome recommended plugins from \nthe Xdebug documentation on remote debugging\n are these: \nFirefox\n, \nChrome\n, \nSafari\n. It can also be enabled manually using a GET parameter - see the Xdebug documentation.\n\n\nThe only required parameter is the session key. For PhpStorm, the default is \nPHPSTORM\n unless you have configured it differently (see step 3 below).\n\n\nThe PHP Xdebug browser plugins allow you to enable debugging on a per request basis. See the Firefox link above to the plugin homepage for screenshots (as of 2018-01 at least).\n\n\n3. Configure PhpStorm\n\n\nPhpStorm have \ntheir own documentation for Xdebug\n. The short version to match the above two steps is:\n\n\n\n\nin PhpStorm, open \nPreferences\n\n\nchoose \nLanguages \n Frameworks\n -\n \nPHP\n -\n \nDebug\n.\n\n\nin the \nXdebug\n section:\n\n\nset the port to \n9001\n\n\ncheck \nCan accept external connections\n\n\napply these changes\n\n\n\n\nYou now need to create a \nRun/Debug Configuration\n. This is so you can map file paths on the remote system (\nwww\n container) to your local development files:\n\n\n\n\nunder the\nRun\n menu, select \nEdit Configurations...\n\n\nin the resulting \nRun/Debug Configurations\n window, select the 'add' button on the top left\n\n\nchoose to add a new \nPHP Remote Debug\n configuration\n\n\nconfigure the directory mapping as per this screenshot:\n\n\n\n\n\n\n\n\nyou should see this new configuration selected on the top right (if not, please refer to PhpStorm documentation)\n\n\nunder the \nRun\n menu, click \nStart listening for PHP Debug connections\n\n\n\n\nFor testing, set a break point in \npublic/index.php\n and access your development IXP Manager using your new browser plugin. You should be able to step through each statement and - presuming your mappings are correctly set up - step into any file in the project.\n\n\nProfiling and Function Traces\n\n\nYou may have noticed in the Xdebug configuration above, we have allowed for the triggering of function traces and profiling also. The browser plugins should support these - certainly the Firefox one does \n(leave the trigger key blank in both cases)\n.\n\n\nWhen you request an IXP Manager page via Firefox with profiling enabled, you will find the \ncachegrind\n file in \n$IXPROOT/storage/tmp\n on your own system You can then view this in PhpStorm via the menu \nTools -\n Analyze Xdebug Profiler Snapshot...\n.\n\n\nFunction traces can be found in the same directory - these are just text files.", 
            "title": "Docker"
        }, 
        {
            "location": "/dev/docker/#docker", 
            "text": "For development purposes, we have both Docker and  Vagrant  build files.  This page on Docker for IXP Manager development should be read in conjunction with the  official IXP Manager Docker repository . While that repository is not for development purposes, the terminology and container descriptions apply here also.", 
            "title": "Docker"
        }, 
        {
            "location": "/dev/docker/#tldr-guide-to-get-docker-running", 
            "text": "If you want to get IXP Manager with Docker up and running quickly, follow these steps:   Install Docker (see:  https://www.docker.com/community-edition )   Clone IXP Manager to a directory:  git clone https://github.com/inex/IXP-Manager.git ixpmanager cd  ixpmanager \n\n3. Copy the stock Docker/IXP Manager configuration file and default database:  cp .env.docker .env\ncp tools/docker/containers/mysql/docker.sql.dist tools/docker/containers/mysql/docker.sql    Spin up the Docker containers  docker-compose -p ixpm up    Access IXP Manager on: http://localhost:8880/    Log in with one of the following username / passwords:    Admin user:  docker / docker01   Customer Admin:  as112admin / as112admin  Customer User:  as112user / as112user", 
            "title": "TL;DR Guide to Get Docker Running"
        }, 
        {
            "location": "/dev/docker/#general-overview", 
            "text": "As the IXP Manager ecosystem grows, it becomes harder and harder to maintain ubiquitous development environments. Docker is ideally suited to solving these issues.  The multi-container Docker environment for developing IXP Manager builds an IXP Manager system which includes:   a custom MySQL database container (from  mysql/5.7 ).  the complete IXP Manager application build on the  php/7.0-apache  base. This has been preconfigured with some customers, routers, switches, etc. to match the following containers.  two emulated switches via SNMP endpoints (using the excellent  SNMP Agent Simulator  via  tandrup/snmpsim );  a mail trap with a web-based frontend to capture and analyse all emails sent by IXP Manager (thanks to  schickling/mailcatcher ).  a mrtg container to query the switches and build up mrtg log files / graphs (via  cityhawk/mrtg ).  a Bird-based route server pre-configured for 3 x IPv4 and 2 x IPv6 sessions. This also includes our  Bird's Eye  looking glass which has been integrated into  rs1  container and configured into the IXP Manager container.  five Bird-based route server clients complete with routes and a route server session.", 
            "title": "General Overview"
        }, 
        {
            "location": "/dev/docker/#useful-docker-commands", 
            "text": "The following are a list of Docker commands that are useful in general but also specifically for the IXP Manager Docker environment.  Note that in our examples, we set the Docker project name to  ixpm  and so that prefix is used in some of the below. We also assume that only one IXP Manager Docker environments is running and so we complate Docker container names with  _1 .  # show all running containers \ndocker ps # show all containers - running and stopped \ndocker ps -a # stop a container: \ndocker stop  container  # start a container: \ndocker start  container  # we create a  ixpmanager  network. Sometimes you need to delete this when  # stopping / starting the environment \ndocker network rm ixpm_ixpmanager # you can copy files into a docker container via: \ndocker cp test.sql ixmp_mysql_1:/tmp # where  ixmp_mysql_1  is the container name.  # reverse it to copy a file out: \ndocker cp ixmp_mysql_1:/tmp/dump.sql . # I use two useful aliases for stopping and removing all containers:  alias  docker-stop-all = docker stop $(docker ps -a -q)  alias  docker-rm-all = docker rm $(docker ps -a -q)  # You can also remove all unused (unattached) volumes: \ndocker volume prune # WARNING: you might want to check what will be deleted with: \ndocker volume ls -f  dangling = true", 
            "title": "Useful Docker Commands"
        }, 
        {
            "location": "/dev/docker/#development-use", 
            "text": "As above, please note that in our examples, we set the Docker project name to  ixpm  and so that prefix is used in some of the below. We also assume that only one IXP Manager Docker environments is running and so we complete Docker container names with  _1 .  For most routine development use, you only need two containers usually:  docker-compose -p ixpm up mysql www  If you are sending emails as part of your development process, include the mail catcher:  docker-compose -p ixpm up mysql www mailcatcher", 
            "title": "Development Use"
        }, 
        {
            "location": "/dev/docker/#mysql-database", 
            "text": "When the mysql container builds, it pre-populates the database with the contents of the SQL file found at  tools/docker/containers/mysql/docker.sql . This is not present by default and is ignored by Git (to ensure you do not accidentally commit a production database!).  A default SQL database is bundled and should be placed in this location via:  cp tools/docker/containers/mysql/docker.sql.dist tools/docker/containers/mysql/docker.sql  You can put your own database here also. If you do, you will need to rebuilt the mysql contain:   docker-compose build mysql\n  ``` \n\n You can access the MySQL database via: ``` sh\ndocker  exec  -it ixpm_mysql_1 mysql -i ixpmanager  And you can get shell access to the container with:  docker  exec  -it ixpm_mysql_1 bash", 
            "title": "MySQL Database"
        }, 
        {
            "location": "/dev/docker/#web-server", 
            "text": "Note that the  www  container mounts the IXP Manager development directory under  /srv/ixpmanager . This means all local code changes are immediately reflected on the Docker web server.  The Dockerfile used to build the  www  container can be found at  tools/docker/containers/www/Dockerfile .  You can access the container with:  docker  exec  -it ixpm_www_1 bash", 
            "title": "Web Server"
        }, 
        {
            "location": "/dev/docker/#mailcatcher", 
            "text": "We include a mailcatcher container which catches all emails IXP Manager sends and displays them on a web frontend. Ensure this container is started by either:  # start all containers: \ndocker-compose -p ixpm up # start mailcatcher with (at least) mysql and www: \ndocker-compose -p ixpm up mysql www mailcatcher  The  .env.docker  config contains the following SMTP / mail settings which ensure emails get send to the mailcatcher:  MAIL_HOST=172.30.201.11\nMAIL_PORT=1025  You can then view emails sent on: http://localhost:1080/", 
            "title": "Mailcatcher"
        }, 
        {
            "location": "/dev/docker/#emulating-switches", 
            "text": "ixpm_switch1_1  and  ixpm_switch2_1  emulate switches by replaying SNMP dumps from real INEX switches (with some sanitisation). The OIDs for traffic have been replaced with a dynamic function to give varying values.  From the  www  container, you can interact with these via:  $ docker exec -it ixpm_www_1 bash\n# ping switch1\n...\n64 bytes from switch1 (172.30.201.60): icmp_seq=1 ttl=64 time=0.135 ms\n...\n# ping switch2\n...\n64 bytes from switch2 (172.30.201.61): icmp_seq=1 ttl=64 time=0.150 ms\n...\n\n\n# snmpwalk -On -v 2c -c switch1 switch1 .1.3.6.1.2.1.1.5.0\n.1.3.6.1.2.1.1.5.0 = STRING:  switch1 \n# snmpwalk -On -v 2c -c switch2 switch2 .1.3.6.1.2.1.1.5.0\n.1.3.6.1.2.1.1.5.0 = STRING:  switch2   You'll note from the above that the hostnames  switch1  and  switch2  work from the  www  container. Note also that the SNMP community is the hostname ( switch1  or  switch2  as appropriate).  The packaged database only contains  switch1 . This allows you can add the second switch via http://localhost:8880/switch/add-by-snmp by setting the hostname and community to  switch2 .  If you want to add new customers for testing, add  switch2  and then use interfaces  Ethernet 2, 8, 13  and  6 and 7  as a lag as these have been preset to provide dynamic stats.", 
            "title": "Emulating Switches"
        }, 
        {
            "location": "/dev/docker/#route-server-and-clients", 
            "text": "The containers include a working route server ( ixpm_rs1_1 ) with 3 IPv4 clients ( ixpm_cust-as112_1 ,  ixpm_cust-as42_1 ,  ixpm_cust-as1213_1 ) and and 2 IPv6 clients ( ixpm_cust-as1213-v6_1 ,  ixpm_cust-as25441-v6_1 ). IXP Manager also includes a working looking glass for this with Bird's Eye installed on the route server.  You can access the Bird BGP clients on the five sample customers using the following examples:  # access Bird command line interface: \ndocker  exec  -it ixpm_cust-as112_1 birdc # run a specific Bird command \ndocker  exec  -it ixpm_cust-as112_1 birdc show protocols  The route server runs an IPv4 and an IPv6 daemon. These can be accessed via the looking glass at http://127.0.0.1:8880/lg or on the command line via:  # ipv4 daemon: \ndocker  exec  -it ixpm_rs1_1 birdc -s /var/run/bird/bird-rs1-ipv4.ctl # ipv6 daemon: \ndocker  exec  -it ixpm_rs1_1 birdc6 -s /var/run/bird/bird-rs1-ipv6.ctl  In this container, Bird's Eye can be found at  /srv/birdseye  with the web server config under  /etc/lighttpd/lighttpd.conf .  We include the IXP Manager scripts for updating the route server configuration and reconfiguring Bird:  # get shell access to the container \ndocker  exec  -it ixpm_rs1_1 bash # all scripts under the following directory  cd  /usr/local/sbin/ # reconfigure both daemons: \n./api-reconfigure-all-v4.sh # reconfigure a specific daemon with verbosity: \n./api-reconfigure-v4.sh -d -h rs1-ipv4", 
            "title": "Route Server and Clients"
        }, 
        {
            "location": "/dev/docker/#mrtg-grapher", 
            "text": "For developing / testing Grapher with Mrtg, we include a container that runs Mrtg via cron from a pre-configured  mrtg.conf  file.  NB: please ensure to update the  GRAPHER_BACKENDS  option in  .env  so it includes  mrtg  as follows:  GRAPHER_BACKENDS= mrtg|dummy   The configuration file matches the  docker.sql  configuration and can be seen in the IXP Manager source directory at  tools/docker/mrtg/mrtg.cfg .  You can access the Mrtg container via:  docker  exec  -it ixpm_mrtg_1 sh  We also install a script in the root directory of the container that will pull a new configuration from IXP Manager. Run it via:  docker  exec  -it ixpm_mrtg_1 sh cd  /\n./update-mrtg-conf.sh # or without entering the container: \ndocker  exec  -it ixpm_mrtg_1 /update-mrtg-conf.sh  It will replace  /etc/mrtg.conf  for the next cron run. It also sets the configuration not to run as a daemon as cron is more useful for development.", 
            "title": "Mrtg / Grapher"
        }, 
        {
            "location": "/dev/docker/#dev-tool-integrations", 
            "text": "NB: these tools and integrations are not IXP Manager specific but rather the typical Docker / PHP development tool chain. Please use support forums for the relevant sections / tools rather than contacting the IXP Manager developers directly.", 
            "title": "Dev Tool Integrations"
        }, 
        {
            "location": "/dev/docker/#php-storm-and-xdebug", 
            "text": "We are big fans of  PhpStorm  at IXP Manager DevHQ. One key feature is PhpStorm's integration with PHP Xdebug. We of course also need this to work with Docker.  Some background information on Xdebug is provided below but you are expected to be familiar with  the Xdebug documentation on remote debugging .  The way interactive remote debugging works with Xdebug is as follows:   Enable remote debugging on the PHP server ( php.ini  settings on the  www  container).  Your browser, with a suitable plugin, includes a Xdebug parameter to signal you want remote debugging started for this request (either a GET, POST or Cookie setting).  PHP Xdebug connects to the configured remote debugger  (PhpStorm in our case)  allowing you to set break points, step through instructions, view variable contents at a point in time, etc.   To get this working with Docker, we need to work through each of these steps.  1. Enable Remote Debugging in the Docker Container  If you examine the  www  container Dockerfile in the IXP Manager source under  tools/docker/containers/www/Dockerfile , you will see that we:   build the PHP Xdebug extension ( pecl install xdebug ).  configure in the container file  /usr/local/etc/php/conf.d/local-ixpmanager-xdebug.ini  as follows:   [xdebug]\nzend_extension=/usr/local/lib/php/extensions/no-debug-non-zts-20151012/xdebug.so\nxdebug.remote_enable=1\nxdebug.remote_port=9001\nxdebug.remote_autostart=0\nxdebug.idekey=PHPSTORM\nxdebug.profiler_enable=0\nxdebug.profiler_enable_trigger=1\nxdebug.profiler_output_dir=/srv/ixpmanager/storage/tmp\nxdebug.auto_trace=0\nxdebug.trace_enable_trigger=1\nxdebug.trace_output_dir=/srv/ixpmanager/storage/tmp  Note that the  zend_extension  may change as it is dynamically set by the build script. We also chose port 9001 rather than the default of 9000  due to local conflicts with common tool chains .  The  one key element that is missing in the INI is the remote debugger IP address . This needs to be set to your development computer's LAN address (there are other options but this works best in practice). Once you know this address (say it's  192.0.2.23 ), set the following in the  ${IXPROOT}/.env :  # For PHP xdebug, put in the IP address of your host\nDOCKER_XDEBUG_CONFIG_REMOTE_HOST=192.0.2.23  When you start the Docker environment from  $IXPROOT  using  docker-compose  with something like:  cd $IXPROOT\ndocker-compose -p ixpm up mysql www  then  docker-compose  will use this setting from the  .env  file and it will be passed through the Xdebug.  2. Install a Xdebug Plugin on Your Browser  Some recommended plugins from  the Xdebug documentation on remote debugging  are these:  Firefox ,  Chrome ,  Safari . It can also be enabled manually using a GET parameter - see the Xdebug documentation.  The only required parameter is the session key. For PhpStorm, the default is  PHPSTORM  unless you have configured it differently (see step 3 below).  The PHP Xdebug browser plugins allow you to enable debugging on a per request basis. See the Firefox link above to the plugin homepage for screenshots (as of 2018-01 at least).  3. Configure PhpStorm  PhpStorm have  their own documentation for Xdebug . The short version to match the above two steps is:   in PhpStorm, open  Preferences  choose  Languages   Frameworks  -   PHP  -   Debug .  in the  Xdebug  section:  set the port to  9001  check  Can accept external connections  apply these changes   You now need to create a  Run/Debug Configuration . This is so you can map file paths on the remote system ( www  container) to your local development files:   under the Run  menu, select  Edit Configurations...  in the resulting  Run/Debug Configurations  window, select the 'add' button on the top left  choose to add a new  PHP Remote Debug  configuration  configure the directory mapping as per this screenshot:     you should see this new configuration selected on the top right (if not, please refer to PhpStorm documentation)  under the  Run  menu, click  Start listening for PHP Debug connections   For testing, set a break point in  public/index.php  and access your development IXP Manager using your new browser plugin. You should be able to step through each statement and - presuming your mappings are correctly set up - step into any file in the project.  Profiling and Function Traces  You may have noticed in the Xdebug configuration above, we have allowed for the triggering of function traces and profiling also. The browser plugins should support these - certainly the Firefox one does  (leave the trigger key blank in both cases) .  When you request an IXP Manager page via Firefox with profiling enabled, you will find the  cachegrind  file in  $IXPROOT/storage/tmp  on your own system You can then view this in PhpStorm via the menu  Tools -  Analyze Xdebug Profiler Snapshot... .  Function traces can be found in the same directory - these are just text files.", 
            "title": "PHP Storm and Xdebug"
        }, 
        {
            "location": "/dev/docs/", 
            "text": "Documentation\n\uf0c1\n\n\nFrom v4 onwards, we use \nGitHub Pages\n with \nMkDocs\n to build the documentation.\n\n\nBoth the site and the content are hosted on \nGitHub\n.\n\n\nContributing / Suggesting Errata\n\uf0c1\n\n\nWe welcome contributions or errata that improve the quality of our documenation. Please use one of the following two channels:\n\n\n\n\nVia the standard GitHub workflow of forking \nour documentation repository\n, making your edits in your fork and them opening a pull request.\n\n\nIf you are not familiar with GitHub, then please \nopen an issue on the documentation repository\n with your suggestions.\n\n\n\n\nBuilding Locally\n\uf0c1\n\n\nIf you haven't already, install MkDocs:\n\n\npip install mkdocs\npip install pymdown-extensions\n\n\n\n\n\nThe documentation can then be built locally as follows:\n\n\ngit clone https://github.com/inex/ixp-manager-docs-md.git\n\ncd \nixp-manager-docs-md\nmkdocs build\n\n\n\n\n\nYou can \nserve\n them locally with the following and then access them via http://127.0.0.1:8000 -\n\n\nmkdocs serve\n\n\n\n\n\nTo automatically deploy to GitHub and make live:\n\n\nmkdocs gh-deploy\n\n\n\n\n\nYou must be an authorised user for this but we \nwelcome pull requests against the documentation repository!", 
            "title": "Documentation"
        }, 
        {
            "location": "/dev/docs/#documentation", 
            "text": "From v4 onwards, we use  GitHub Pages  with  MkDocs  to build the documentation.  Both the site and the content are hosted on  GitHub .", 
            "title": "Documentation"
        }, 
        {
            "location": "/dev/docs/#contributing-suggesting-errata", 
            "text": "We welcome contributions or errata that improve the quality of our documenation. Please use one of the following two channels:   Via the standard GitHub workflow of forking  our documentation repository , making your edits in your fork and them opening a pull request.  If you are not familiar with GitHub, then please  open an issue on the documentation repository  with your suggestions.", 
            "title": "Contributing / Suggesting Errata"
        }, 
        {
            "location": "/dev/docs/#building-locally", 
            "text": "If you haven't already, install MkDocs:  pip install mkdocs\npip install pymdown-extensions  The documentation can then be built locally as follows:  git clone https://github.com/inex/ixp-manager-docs-md.git cd  ixp-manager-docs-md\nmkdocs build  You can  serve  them locally with the following and then access them via http://127.0.0.1:8000 -  mkdocs serve  To automatically deploy to GitHub and make live:  mkdocs gh-deploy  You must be an authorised user for this but we  welcome pull requests against the documentation repository!", 
            "title": "Building Locally"
        }, 
        {
            "location": "/dev/frontend-crud/", 
            "text": "Frontend CRUD\n\uf0c1\n\n\nIXP Manager\n, like many applications, has a lot of tables that need basic CRUD access: \nCR\neate, \nU\npdate and \nD\nelete (plus list and view). In older versions of \nIXP Manager\n (and as yet unupdated code), we used \nthis Zend Framework trait\n to allow us to repidly deploy CRUD interfaces.\n\n\nFor \nIXP Manager\n \n= v4.7, we have duplicated (and improved) this to create a scaffolding framework in Laravel. This page documents that class.\n\n\nConfiguration\n\uf0c1\n\n\nIn any controller using extending the \nDoctrine2Frontend\n class, a \n_feInit()\n method is required which configures the controller and, for example, allows you to set what is displayed for different levels of user privileges.\n\n\nThe primary purpose of this function is to define the anonymous object \n_feParams\n (using an object ensures that the view gets a reference to the object and not a copy of a static array at a point in time):\n\n\n?php\n\n\nprotected\n \nfunction\n \n_feInit\n()\n\n\n{\n\n    \n$this\n-\nview\n-\nfeParams\n \n=\n \n$this\n-\n_feParams\n \n=\n \n(\nobject\n)[\n\n\n        \n// the ORM entity object that CRUD operations will affect:\n\n        \nentity\n            \n=\n \nInfrastructureEntity\n::\nclass\n,\n  \n\n        \npagetitle\n         \n=\n \nInfrastructures\n,\n     \n\n        \n// default is false. If true, add / edit / delete will be disabled\n\n        \nreadonly\n          \n=\n \nfalse\n,\n\n\n        \ntitleSingular\n     \n=\n \nInfrastructure\n,\n   \n        \nnameSingular\n      \n=\n \nan infrastructure\n,\n   \n\n        \nviewFolderName\n    \n=\n \ninfrastructure\n,\n\n\n        \nreadonly\n          \n=\n \nself\n::\n$read_only\n,\n\n\n        \nlistColumns\n \n=\n \n[\n                    \n            \n// what columns to display in the list view\n\n            \nid\n         \n=\n \n[\n \ntitle\n \n=\n \nDB ID\n,\n \ndisplay\n \n=\n \ntrue\n \n],\n\n            \nname\n       \n=\n \nName\n,\n\n            \nshortname\n  \n=\n \nShortname\n\n        \n],\n\n\n        \nlistOrderBy\n    \n=\n \nname\n,\n    \n// how to order columns\n\n        \nlistOrderByDir\n \n=\n \nASC\n,\n     \n// direction of order columns\n\n    \n];\n\n\n    \n// you can then override some of the above for different user privileges (for example)\n\n    \nswitch\n(\n \nAuth\n::\nuser\n()\n \n?\n \nAuth\n::\nuser\n()\n-\ngetPrivs\n()\n \n:\n \nUserEntity\n::\nAUTH_PUBLIC\n \n)\n \n{\n\n\n        \ncase\n \nUserEntity\n::\nAUTH_SUPERUSER\n:\n\n            \n$this\n-\n_feParams\n-\npagetitle\n \n=\n \nInfrastructures (Superuser View)\n;\n\n\n            \n$this\n-\n_feParams\n-\nlistColumns\n \n=\n \narray_merge\n(\n\n                \n$this\n-\n_feParams\n-\nlistColumns\n,\n \n[\n\n                    \n// ...\n\n                \n];\n\n            \n);\n\n            \nbreak\n;\n\n\n        \ndefault\n:\n\n            \nif\n(\n \nphp_sapi_name\n()\n \n!==\n \ncli\n \n)\n \n{\n\n                \nabort\n(\n \nerror/insufficient-permissions\n \n);\n\n            \n}\n\n    \n}\n\n\n    \n// display the same information in the single object view as the list of objects\n\n    \n$this\n-\n_feParams\n-\nviewColumns\n \n=\n \n$this\n-\n_feParams\n-\nlistColumns\n;\n\n\n}\n\n\n\n\n\n\nAccess Privileges\n\uf0c1\n\n\nBy default, all \nDoctrine2Frontend\n controllers can only be accessed by an authenticated super user (\nEntities\\User::AUTH_SUPERUSER\n). You can change this by setting the following property on your implementation:\n\n\n?php\n\n\n/**\n\n\n * The minimum privileges required to access this controller.\n\n\n *\n\n\n * If you set this to less than the superuser, you need to manage privileges and access\n\n\n * within your own implementation yourself.\n\n\n *\n\n\n * @var int\n\n\n */\n\n\npublic\n \nstatic\n \n$minimum_privilege\n \n=\n \nUserEntity\n::\nAUTH_SUPERUSER\n;\n\n\n\n\n\n\nIf you set this to less than the superuser, you need to manage privileges and access within your own implementation yourself.\n\n\nThis is normally handled in a number of ways:\n\n\n\n\ndedicated \nRequest\n object utilising the \nauthorize()\n method;\n\n\nadditional middleware;\n\n\nper action basis;\n\n\nin \nfeInit()\n\n\n\n\nThe \nfeInit()\n method would normally look something like the following:\n\n\n?php\n\n\n// phpunit / artisan trips up here without the cli test:\n\n\nif\n(\n \nphp_sapi_name\n()\n \n!==\n \ncli\n \n)\n \n{\n\n\n    \n// custom access controls:\n\n    \nswitch\n(\n \nAuth\n::\ncheck\n()\n \n?\n \nAuth\n::\nuser\n()\n-\ngetPrivs\n()\n \n:\n \nUserEntity\n::\nAUTH_PUBLIC\n \n)\n \n{\n\n        \ncase\n \nUserEntity\n::\nAUTH_SUPERUSER\n:\n\n            \nbreak\n;\n\n\n        \ncase\n \nUserEntity\n::\nAUTH_CUSTUSER\n:\n\n            \nswitch\n(\n \nRoute\n::\ncurrent\n()\n-\ngetName\n()\n \n)\n \n{\n\n                \ncase\n \nLayer2AddressController@forVlanInterface\n:\n\n                    \nbreak\n;\n\n\n                \ndefault\n:\n\n                    \n$this\n-\nunauthorized\n();\n\n            \n}\n\n            \nbreak\n;\n\n\n        \ndefault\n:\n\n            \n$this\n-\nunauthorized\n();\n\n    \n}\n\n\n}\n\n\n\n\n\n\nThe \n$this-\nunauthorized( $url = '', $code = 302 )\n calls \nabort()\n with the given redirect code and URL. The default parameters will \ndo the right thing\n.\n\n\nRouting\n\uf0c1\n\n\nRoutes are explicitly defined in Laravel. The \nDoctrine2Frontend\n class sets up the standard routes automatically once you add the following to your \nroutes/web.php\n (or as appropriate) file on a per implementation basis. E.g. for the \nInfrastructure\n implementation, we add to \nroutes/web-doctrine2frontend.php\n:\n\n\n?php\n\n\nIXP\\Http\\Controllers\\InfrastructureController\n::\nroutes\n();\n\n\n\n\n\n\nNote that by placing the above in \nroutes/web-doctrine2frontend.php\n, you ensure the appropriate middleware is attached.\n\n\nThis \nroutes()\n function determines the route prefix using kebab case of the controller name. That is to say: if the controller is \nCustKitController\n, the determined prefix is \ncust-kit\n. You can override this by setting a \n$route_prefix\n class constant in your implementation.\n\n\nThe standard routes added (using \ninfrastructure\n as an example) are:\n\n\n\n\nGET \ninfrastructure/add\n\n\nGET \ninfrastructure/edit/{id}\n\n\nGET \ninfrastructure/list\n\n\nGET \ninfrastructure/view/{id}\n\n\nPOST \ninfrastructure/delete/{id}\n\n\nPOST \ninfrastructure/store\n\n\n\n\nIf you want to create your own additional routes, create a function as follows in your implementation:\n\n\n?php\n\n\npublic\n \nstatic\n \nfunction\n \nadditionalRoutes\n(\n \n$route_prefix\n \n)\n \n{}\n\n\n\n\n\n\nAnd add routes (using the normal \nRoute::get()\n / \n::post()\n / etc Laravel methods).\n\n\nIf you want to completely change the routes, just override the \npublic static function routes() {}\n function.\n\n\nView Templates\n\uf0c1\n\n\nAll the common view templates for thss functionality can be found in \nresources/views/frontend\n directory. You can override any of these with your own by creating a template of the same name and placing it under \nresources/views/xxx\n (or \nresources/skins/skinname/xxx\n) where \nxxx\n is the \nfeParams['viewFolderName']\n.\n\n\nRead Only\n\uf0c1\n\n\nIf your controller should be read only (list and view actions, no add, edit or delete) then set the following static member:\n\n\n?php\n\n\n/**\n\n\n * Is this a read only controller?\n\n\n *\n\n\n * @var boolean\n\n\n */\n\n\npublic\n \nstatic\n \n$read_only\n \n=\n \ntrue\n;\n\n\n\n\n\n\nActions\n\uf0c1\n\n\nEach of the typical CRUD actions will be described here.\n\n\nNB: the best documentation is sometimes the code. Check out the above routes file (\nroutes/web-doctrine2frontend.php\n) and examine some of the implemented controllers directly.\n\n\nList\n\uf0c1\n\n\nThe list action is for listing the contents of a database table in a HTML / DataTables view.\n\n\nThe only requirement of the list action is that the following abstract function is implemented:\n\n\n?php\n\n\n/**\n\n\n * Provide array of table rows for the list action (and view action)\n\n\n *\n\n\n * @param int $id The `id` of the row to load for `view` action. `null` if `list` action.\n\n\n * @return array\n\n\n */\n\n\nabstract\n \nprotected\n \nfunction\n \nlistGetData\n(\n \n$id\n \n=\n \nnull\n \n);\n\n\n\n\n\n\nA sample implementation for the infrastructure controller just calls a Doctrine2 repository function:\n\n\n?php\n\n\nprotected\n \nfunction\n \nlistGetData\n(\n \n$id\n \n=\n \nnull\n \n)\n \n{\n\n    \nreturn\n \nD2EM\n::\ngetRepository\n(\n \nInfrastructureEntity\n::\nclass\n \n)\n-\ngetAllForFeList\n(\n \n$this\n-\nfeParams\n,\n \n$id\n \n);\n\n\n}\n\n\n\n\n\n\nThe table rows returned in the above array must be associatative arrays with keys matching the \nfeParams['listColumns']\n definition.\n\n\nThe list view template optionally includes other templates you can define (where \nxxx\n below is the \nfeParams['viewFolderName']\n):\n\n\n\n\nthe list view includes a JavaScript template \nresources/views/frontend/js/list\n which activates the DataTables, sets up sorting, etc. You can override this (and include the original if appropriate) if you want to add additional JS functionality.\n\n\nif the \nresources/views/xxx/list-preamble\n template exists, it is included just before the table.\n\n\nif the \nresources/views/xxx/list-postamble\n template exists, it is included just after the table.\n\n\nif the \nresources/views/xxx/list-head-override\n template exists, it will replace the \nthead\n element of the list table (\nexample\n).\n\n\nif the \nresources/views/xxx/list-head-override\n template exists, it will replace the \ntr\n elements of the list table (\nexample\n).\n\n\nif the \nresources/views/xxx/list-empty-message\n template exists, it will replace the the standard information box\nwhen a table is empty (\nexample\n).\n\n\n\n\nThe following hooks are available:\n\n\n\n\nprotected function preList():void {}\n - called before the list is displayed allowing you to add elements to the template, etc.\n\n\n\n\nView\n\uf0c1\n\n\nThe view action is for showing a single database row identified by the id passed in the URL.\n\n\nThe only requirement of the view action is that the abstract function \nlistGetData( $id = null )\n as used by the list action has been correctly implemented to take an optional ID and return an array with a single element matching that ID.\n\n\nThe table rows returned in the above array must be associatative arrays with keys matching the \nfeParams['viewColumns']\n definition.\n\n\nThe list view template optionally includes other templates you can define (where \nxxx\n below is the \nfeParams['viewFolderName']\n):\n\n\n\n\nan optional JavaScript template \nresources/views/frontend/js/view\n.\n\n\nif the \nresources/views/xxx/view-preamble\n template exists, it is included just before the view panel.\n\n\nif the \nresources/views/xxx/view-postamble\n template exists, it is included just after the view panel.\n\n\nif the \nresources/views/xxx/view-row-override\n template exists, it will replace the \ntr\n element of the view (\nexample\n).\n\n\n\n\nCreate / Update Form\n\uf0c1\n\n\nThe presentation of the create / update (also known as add / edit) page is discussed here. Form processing and storage will be dealt with in the next section.\n\n\nThe first required element of this functionality is the implementation of the following abstract function:\n\n\n?php\n\n\nabstract\n \nprotected\n \nfunction\n \naddEditPrepareForm\n(\n \n$id\n \n=\n \nnull\n \n)\n:\n \narray\n;\n\n\n\n\n\n\nThe use of this function is best explained with reference to an implementation from the infrastructure controller:\n\n\n?php\n\n\n/**\n\n\n * Display the form to add/edit an object\n\n\n * @param   int $id ID of the row to edit\n\n\n * @return array\n\n\n */\n\n\nprotected\n \nfunction\n \naddEditPrepareForm\n(\n \n$id\n \n=\n \nnull\n \n)\n:\n \narray\n \n{\n\n    \nif\n(\n \n$id\n \n!==\n \nnull\n \n)\n \n{\n\n\n        \nif\n(\n \n!\n(\n \n$this\n-\nobject\n \n=\n \nD2EM\n::\ngetRepository\n(\n \nInfrastructureEntity\n::\nclass\n \n)\n-\nfind\n(\n \n$id\n)\n \n)\n \n)\n \n{\n\n            \nabort\n(\n404\n);\n\n        \n}\n\n\n        \n$old\n \n=\n \nrequest\n()\n-\nold\n();\n\n\n        \n// we use array_key_exists() here as the array can contain the\n\n        \n// key with a null value.\n\n\n        \nFormer\n::\npopulate\n([\n\n            \nname\n             \n=\n \narray_key_exists\n(\n \nname\n,\n      \n$old\n \n)\n \n?\n \n$old\n[\nname\n]\n      \n:\n \n$this\n-\nobject\n-\ngetName\n(),\n\n            \nshortname\n        \n=\n \narray_key_exists\n(\n \nshortname\n,\n \n$old\n \n)\n \n?\n \n$old\n[\nshortname\n]\n \n:\n \n$this\n-\nobject\n-\ngetShortname\n(),\n\n            \nisPrimary\n        \n=\n \narray_key_exists\n(\n \nisPrimary\n,\n \n$old\n \n)\n \n?\n \n$old\n[\nisPrimary\n]\n \n:\n \n(\n \n$this\n-\nobject\n-\ngetIsPrimary\n()\n \n??\n \nfalse\n \n),\n\n        \n]);\n\n    \n}\n\n\n    \nreturn\n \n[\n\n        \nobject\n          \n=\n \n$this\n-\nobject\n,\n\n    \n];\n\n\n}\n\n\n\n\n\n\nNote from the above:\n\n\n\n\nthis function operates for add and edit. In the case of edit, it tries to load the appropriate object from the database.\n\n\nif it's an edit operation, the \nFormer\n object is built up containing the existing objects details.\n\n\nyou can pass back any data you wish in the returned array and it will be available via \n$t-\nparams\n in the template. Note that \n$t-\nparams['data']\n is added later and contains the feParams object.\n\n\n\n\nThe next required element is building the actual \nFormer\n object for display. For this, you must create a custom \nresources/views/xxx/edit-form\n template. See, as an example, the infrastructure one under \nresources/views/infrastructure/edit-form.js\n.\n\n\nThe add/edit view template optionally includes other templates you can define (where \nxxx\n below is the \nfeParams['viewFolderName']\n):\n\n\n\n\nan optional JavaScript template \nresources/views/xxx/js/edit\n.\n\n\nif the \nresources/views/xxx/edit-preamble\n template exists, it is included just before the view panel.\n\n\nif the \nresources/views/xxx/edit-postamble\n template exists, it is included just after the view panel.\n\n\n\n\nYou can query the boolean \n$t-\nparams['isAdd']\n in your templates to distinguish between add and edit operations.\n\n\nCreate / Update Store\n\uf0c1\n\n\nStoring the edited / new object requires implementing a single abstract method which manages validation and storage. This is best explained with a practical implementation:\n\n\n?php\n\n\n/**\n\n\n * Function to do the actual validation and storing of the submitted object.\n\n\n * @param Request $request\n\n\n * @return bool|RedirectResponse\n\n\n */\n\n\npublic\n \nfunction\n \ndoStore\n(\n \nRequest\n \n$request\n \n)\n\n\n{\n\n    \n$validator\n \n=\n \nValidator\n::\nmake\n(\n \n$request\n-\nall\n(),\n \n[\n\n        \nname\n                  \n=\n \nrequired|string|max:255\n,\n\n        \nshortname\n             \n=\n \nrequired|string|max:255\n,\n\n    \n]);\n\n\n    \nif\n(\n \n$validator\n-\nfails\n()\n \n)\n \n{\n\n        \nreturn\n \nRedirect\n::\nback\n()\n-\nwithErrors\n(\n$validator\n)\n-\nwithInput\n();\n\n    \n}\n\n\n    \nif\n(\n \n$request\n-\ninput\n(\n \nid\n,\n \nfalse\n \n)\n \n)\n \n{\n\n        \nif\n(\n \n!\n(\n \n$this\n-\nobject\n \n=\n \nD2EM\n::\ngetRepository\n(\n \nInfrastructureEntity\n::\nclass\n \n)\n-\nfind\n(\n \n$request\n-\ninput\n(\n \nid\n \n)\n \n)\n \n)\n \n)\n \n{\n\n            \nabort\n(\n404\n);\n\n        \n}\n\n    \n}\n \nelse\n \n{\n\n        \n$this\n-\nobject\n \n=\n \nnew\n \nInfrastructureEntity\n;\n\n        \nD2EM\n::\npersist\n(\n \n$this\n-\nobject\n \n);\n\n    \n}\n\n\n    \n$this\n-\nobject\n-\nsetName\n(\n              \n$request\n-\ninput\n(\n \nname\n         \n)\n \n);\n\n    \n$this\n-\nobject\n-\nsetShortname\n(\n         \n$request\n-\ninput\n(\n \nshortname\n    \n)\n \n);\n\n    \n$this\n-\nobject\n-\nsetIxfIxId\n(\n           \n$request\n-\ninput\n(\n \nixf_ix_id\n    \n)\n \n?\n \n$request\n-\ninput\n(\n \nixf_ix_id\n    \n)\n \n:\n \nnull\n \n);\n\n    \n$this\n-\nobject\n-\nsetPeeringdbIxId\n(\n     \n$request\n-\ninput\n(\n \npdb_ixp\n      \n)\n \n?\n \n$request\n-\ninput\n(\n \npdb_ixp\n      \n)\n \n:\n \nnull\n \n);\n\n    \n$this\n-\nobject\n-\nsetIsPrimary\n(\n         \n$request\n-\ninput\n(\n \nprimary\n      \n)\n \n??\n \nfalse\n \n);\n\n    \n$this\n-\nobject\n-\nsetIXP\n(\n               \nD2EM\n::\ngetRepository\n(\n \nIXPEntity\n::\nclass\n \n)\n-\ngetDefault\n()\n \n);\n\n\n    \nD2EM\n::\nflush\n(\n$this\n-\nobject\n);\n\n\n    \nif\n(\n \n$this\n-\nobject\n-\ngetIsPrimary\n()\n \n)\n \n{\n\n        \n// reset the rest:\n\n        \n/** @var InfrastructureEntity $i */\n\n        \nforeach\n(\n \nD2EM\n::\ngetRepository\n(\n \nInfrastructureEntity\n::\nclass\n \n)\n-\nfindAll\n()\n \nas\n \n$i\n \n)\n \n{\n\n            \nif\n(\n \n$i\n-\ngetId\n()\n \n==\n \n$this\n-\nobject\n-\ngetId\n()\n \n||\n \n!\n$i\n-\ngetIsPrimary\n()\n \n)\n \n{\n\n                \ncontinue\n;\n\n            \n}\n\n            \n$i\n-\nsetIsPrimary\n(\n \nfalse\n \n);\n\n        \n}\n\n        \nD2EM\n::\nflush\n();\n\n    \n}\n\n\n    \nreturn\n \ntrue\n;\n\n\n}\n\n\n\n\n\n\nNote from this:\n\n\n\n\nvalidation is the standard \nLaravel validation\n which works well with \nFormer\n.\n\n\nit's important to remember to assign the object as: \n$this-\nobject = $inf;\n as it is used to create log messages, etc.\n\n\n\n\nThe following hooks are available:\n\n\n\n\nprotected function postStoreRedirect() {}\n - the \nDoctrine2Frontend\n class returns null. Override it to return\n    a valid route name to have the post store redirect go somewhere besides \n/list\n.\n\n\n\n\nDelete\n\uf0c1\n\n\nDeletes are handled via posts and so have Laravel's built in CSRF protection. The logic is quiet simple:\n\n\n?php\n\n\npublic\n \nfunction\n \ndelete\n(\n \nRequest\n \n$request\n \n)\n \n{\n\n\n    \nif\n(\n \n!\n(\n \n$this\n-\nobject\n \n=\n \nD2EM\n::\ngetRepository\n(\n \n$this\n-\nfeParams\n-\nentity\n \n)\n-\nfind\n(\n \n$request\n-\ninput\n(\n \nid\n \n)\n \n)\n \n)\n \n)\n \n{\n\n        \nreturn\n \nabort\n(\n \n404\n \n);\n\n    \n}\n\n\n    \nif\n(\n \n$this\n-\npreDelete\n()\n \n)\n \n{\n\n        \nD2EM\n::\nremove\n(\n \n$this\n-\nobject\n \n);\n\n        \nD2EM\n::\nflush\n();\n\n        \n$this\n-\npostFlush\n(\n \ndelete\n \n);\n\n        \nAlertContainer\n::\npush\n(\n \n$this\n-\nfeParams\n-\ntitleSingular\n \n.\n \n deleted.\n,\n \nAlert\n::\nSUCCESS\n \n);\n\n    \n}\n\n\n    \nreturn\n \nredirect\n()\n-\naction\n(\n \n$this\n-\nfeParams\n-\ndefaultController\n.\n@\n.\n$this\n-\nfeParams\n-\ndefaultAction\n \n);\n\n\n}\n\n\n\n\n\n\nAs you can see, it calls a \nprotected function preDelete(): bool {}\n hook which, if it returns \nfalse\n, the delete operation is abandoned.\n\n\nThe following hooks are available:\n\n\n* `protected function postDeleteRedirect() {}` - the *Doctrine2Frontend* class returns null. Override it to return\n    a valid route name to have the post store redirect go somewhere besides `/list`.\n\n\n\nOther Hooks\n\uf0c1\n\n\nPost Flush\n\uf0c1\n\n\nThere is a \npostFlush()\n hook:\n\n\n?php\n\n\n/**\n\n\n * Optional method to be overridden if a D2F controllers needs to perform post-database flush actions\n\n\n *\n\n\n * @param string $action Either \nadd\n, \nedit\n, \ndelete\n\n\n * @return bool\n\n\n */\n\n\nprotected\n \nfunction\n \npostFlush\n(\n \nstring\n \n$action\n \n)\n:\n \nbool\n\n\n{\n\n    \nreturn\n \ntrue\n;\n\n\n}\n\n\n\n\n\n\nwhich is called during some actions with the action name as a parameter: \nadd\n, \nedit\n, \ndelete\n. This function is called just after the database flush operation.", 
            "title": "Frontend CRUD"
        }, 
        {
            "location": "/dev/frontend-crud/#frontend-crud", 
            "text": "IXP Manager , like many applications, has a lot of tables that need basic CRUD access:  CR eate,  U pdate and  D elete (plus list and view). In older versions of  IXP Manager  (and as yet unupdated code), we used  this Zend Framework trait  to allow us to repidly deploy CRUD interfaces.  For  IXP Manager   = v4.7, we have duplicated (and improved) this to create a scaffolding framework in Laravel. This page documents that class.", 
            "title": "Frontend CRUD"
        }, 
        {
            "location": "/dev/frontend-crud/#configuration", 
            "text": "In any controller using extending the  Doctrine2Frontend  class, a  _feInit()  method is required which configures the controller and, for example, allows you to set what is displayed for different levels of user privileges.  The primary purpose of this function is to define the anonymous object  _feParams  (using an object ensures that the view gets a reference to the object and not a copy of a static array at a point in time):  ?php  protected   function   _feInit ()  { \n     $this - view - feParams   =   $this - _feParams   =   ( object )[ \n\n         // the ORM entity object that CRUD operations will affect: \n         entity              =   InfrastructureEntity :: class ,   \n\n         pagetitle           =   Infrastructures ,      \n\n         // default is false. If true, add / edit / delete will be disabled \n         readonly            =   false , \n\n         titleSingular       =   Infrastructure ,    \n         nameSingular        =   an infrastructure ,    \n\n         viewFolderName      =   infrastructure , \n\n         readonly            =   self :: $read_only , \n\n         listColumns   =   [                     \n             // what columns to display in the list view \n             id           =   [   title   =   DB ID ,   display   =   true   ], \n             name         =   Name , \n             shortname    =   Shortname \n         ], \n\n         listOrderBy      =   name ,      // how to order columns \n         listOrderByDir   =   ASC ,       // direction of order columns \n     ]; \n\n     // you can then override some of the above for different user privileges (for example) \n     switch (   Auth :: user ()   ?   Auth :: user () - getPrivs ()   :   UserEntity :: AUTH_PUBLIC   )   { \n\n         case   UserEntity :: AUTH_SUPERUSER : \n             $this - _feParams - pagetitle   =   Infrastructures (Superuser View) ; \n\n             $this - _feParams - listColumns   =   array_merge ( \n                 $this - _feParams - listColumns ,   [ \n                     // ... \n                 ]; \n             ); \n             break ; \n\n         default : \n             if (   php_sapi_name ()   !==   cli   )   { \n                 abort (   error/insufficient-permissions   ); \n             } \n     } \n\n     // display the same information in the single object view as the list of objects \n     $this - _feParams - viewColumns   =   $this - _feParams - listColumns ;  }", 
            "title": "Configuration"
        }, 
        {
            "location": "/dev/frontend-crud/#access-privileges", 
            "text": "By default, all  Doctrine2Frontend  controllers can only be accessed by an authenticated super user ( Entities\\User::AUTH_SUPERUSER ). You can change this by setting the following property on your implementation:  ?php  /**   * The minimum privileges required to access this controller.   *   * If you set this to less than the superuser, you need to manage privileges and access   * within your own implementation yourself.   *   * @var int   */  public   static   $minimum_privilege   =   UserEntity :: AUTH_SUPERUSER ;   If you set this to less than the superuser, you need to manage privileges and access within your own implementation yourself.  This is normally handled in a number of ways:   dedicated  Request  object utilising the  authorize()  method;  additional middleware;  per action basis;  in  feInit()   The  feInit()  method would normally look something like the following:  ?php  // phpunit / artisan trips up here without the cli test:  if (   php_sapi_name ()   !==   cli   )   { \n\n     // custom access controls: \n     switch (   Auth :: check ()   ?   Auth :: user () - getPrivs ()   :   UserEntity :: AUTH_PUBLIC   )   { \n         case   UserEntity :: AUTH_SUPERUSER : \n             break ; \n\n         case   UserEntity :: AUTH_CUSTUSER : \n             switch (   Route :: current () - getName ()   )   { \n                 case   Layer2AddressController@forVlanInterface : \n                     break ; \n\n                 default : \n                     $this - unauthorized (); \n             } \n             break ; \n\n         default : \n             $this - unauthorized (); \n     }  }   The  $this- unauthorized( $url = '', $code = 302 )  calls  abort()  with the given redirect code and URL. The default parameters will  do the right thing .", 
            "title": "Access Privileges"
        }, 
        {
            "location": "/dev/frontend-crud/#routing", 
            "text": "Routes are explicitly defined in Laravel. The  Doctrine2Frontend  class sets up the standard routes automatically once you add the following to your  routes/web.php  (or as appropriate) file on a per implementation basis. E.g. for the  Infrastructure  implementation, we add to  routes/web-doctrine2frontend.php :  ?php  IXP\\Http\\Controllers\\InfrastructureController :: routes ();   Note that by placing the above in  routes/web-doctrine2frontend.php , you ensure the appropriate middleware is attached.  This  routes()  function determines the route prefix using kebab case of the controller name. That is to say: if the controller is  CustKitController , the determined prefix is  cust-kit . You can override this by setting a  $route_prefix  class constant in your implementation.  The standard routes added (using  infrastructure  as an example) are:   GET  infrastructure/add  GET  infrastructure/edit/{id}  GET  infrastructure/list  GET  infrastructure/view/{id}  POST  infrastructure/delete/{id}  POST  infrastructure/store   If you want to create your own additional routes, create a function as follows in your implementation:  ?php  public   static   function   additionalRoutes (   $route_prefix   )   {}   And add routes (using the normal  Route::get()  /  ::post()  / etc Laravel methods).  If you want to completely change the routes, just override the  public static function routes() {}  function.", 
            "title": "Routing"
        }, 
        {
            "location": "/dev/frontend-crud/#view-templates", 
            "text": "All the common view templates for thss functionality can be found in  resources/views/frontend  directory. You can override any of these with your own by creating a template of the same name and placing it under  resources/views/xxx  (or  resources/skins/skinname/xxx ) where  xxx  is the  feParams['viewFolderName'] .", 
            "title": "View Templates"
        }, 
        {
            "location": "/dev/frontend-crud/#read-only", 
            "text": "If your controller should be read only (list and view actions, no add, edit or delete) then set the following static member:  ?php  /**   * Is this a read only controller?   *   * @var boolean   */  public   static   $read_only   =   true ;", 
            "title": "Read Only"
        }, 
        {
            "location": "/dev/frontend-crud/#actions", 
            "text": "Each of the typical CRUD actions will be described here.  NB: the best documentation is sometimes the code. Check out the above routes file ( routes/web-doctrine2frontend.php ) and examine some of the implemented controllers directly.", 
            "title": "Actions"
        }, 
        {
            "location": "/dev/frontend-crud/#list", 
            "text": "The list action is for listing the contents of a database table in a HTML / DataTables view.  The only requirement of the list action is that the following abstract function is implemented:  ?php  /**   * Provide array of table rows for the list action (and view action)   *   * @param int $id The `id` of the row to load for `view` action. `null` if `list` action.   * @return array   */  abstract   protected   function   listGetData (   $id   =   null   );   A sample implementation for the infrastructure controller just calls a Doctrine2 repository function:  ?php  protected   function   listGetData (   $id   =   null   )   { \n     return   D2EM :: getRepository (   InfrastructureEntity :: class   ) - getAllForFeList (   $this - feParams ,   $id   );  }   The table rows returned in the above array must be associatative arrays with keys matching the  feParams['listColumns']  definition.  The list view template optionally includes other templates you can define (where  xxx  below is the  feParams['viewFolderName'] ):   the list view includes a JavaScript template  resources/views/frontend/js/list  which activates the DataTables, sets up sorting, etc. You can override this (and include the original if appropriate) if you want to add additional JS functionality.  if the  resources/views/xxx/list-preamble  template exists, it is included just before the table.  if the  resources/views/xxx/list-postamble  template exists, it is included just after the table.  if the  resources/views/xxx/list-head-override  template exists, it will replace the  thead  element of the list table ( example ).  if the  resources/views/xxx/list-head-override  template exists, it will replace the  tr  elements of the list table ( example ).  if the  resources/views/xxx/list-empty-message  template exists, it will replace the the standard information box\nwhen a table is empty ( example ).   The following hooks are available:   protected function preList():void {}  - called before the list is displayed allowing you to add elements to the template, etc.", 
            "title": "List"
        }, 
        {
            "location": "/dev/frontend-crud/#view", 
            "text": "The view action is for showing a single database row identified by the id passed in the URL.  The only requirement of the view action is that the abstract function  listGetData( $id = null )  as used by the list action has been correctly implemented to take an optional ID and return an array with a single element matching that ID.  The table rows returned in the above array must be associatative arrays with keys matching the  feParams['viewColumns']  definition.  The list view template optionally includes other templates you can define (where  xxx  below is the  feParams['viewFolderName'] ):   an optional JavaScript template  resources/views/frontend/js/view .  if the  resources/views/xxx/view-preamble  template exists, it is included just before the view panel.  if the  resources/views/xxx/view-postamble  template exists, it is included just after the view panel.  if the  resources/views/xxx/view-row-override  template exists, it will replace the  tr  element of the view ( example ).", 
            "title": "View"
        }, 
        {
            "location": "/dev/frontend-crud/#create-update-form", 
            "text": "The presentation of the create / update (also known as add / edit) page is discussed here. Form processing and storage will be dealt with in the next section.  The first required element of this functionality is the implementation of the following abstract function:  ?php  abstract   protected   function   addEditPrepareForm (   $id   =   null   ) :   array ;   The use of this function is best explained with reference to an implementation from the infrastructure controller:  ?php  /**   * Display the form to add/edit an object   * @param   int $id ID of the row to edit   * @return array   */  protected   function   addEditPrepareForm (   $id   =   null   ) :   array   { \n     if (   $id   !==   null   )   { \n\n         if (   ! (   $this - object   =   D2EM :: getRepository (   InfrastructureEntity :: class   ) - find (   $id )   )   )   { \n             abort ( 404 ); \n         } \n\n         $old   =   request () - old (); \n\n         // we use array_key_exists() here as the array can contain the \n         // key with a null value. \n\n         Former :: populate ([ \n             name               =   array_key_exists (   name ,        $old   )   ?   $old [ name ]        :   $this - object - getName (), \n             shortname          =   array_key_exists (   shortname ,   $old   )   ?   $old [ shortname ]   :   $this - object - getShortname (), \n             isPrimary          =   array_key_exists (   isPrimary ,   $old   )   ?   $old [ isPrimary ]   :   (   $this - object - getIsPrimary ()   ??   false   ), \n         ]); \n     } \n\n     return   [ \n         object            =   $this - object , \n     ];  }   Note from the above:   this function operates for add and edit. In the case of edit, it tries to load the appropriate object from the database.  if it's an edit operation, the  Former  object is built up containing the existing objects details.  you can pass back any data you wish in the returned array and it will be available via  $t- params  in the template. Note that  $t- params['data']  is added later and contains the feParams object.   The next required element is building the actual  Former  object for display. For this, you must create a custom  resources/views/xxx/edit-form  template. See, as an example, the infrastructure one under  resources/views/infrastructure/edit-form.js .  The add/edit view template optionally includes other templates you can define (where  xxx  below is the  feParams['viewFolderName'] ):   an optional JavaScript template  resources/views/xxx/js/edit .  if the  resources/views/xxx/edit-preamble  template exists, it is included just before the view panel.  if the  resources/views/xxx/edit-postamble  template exists, it is included just after the view panel.   You can query the boolean  $t- params['isAdd']  in your templates to distinguish between add and edit operations.", 
            "title": "Create / Update Form"
        }, 
        {
            "location": "/dev/frontend-crud/#create-update-store", 
            "text": "Storing the edited / new object requires implementing a single abstract method which manages validation and storage. This is best explained with a practical implementation:  ?php  /**   * Function to do the actual validation and storing of the submitted object.   * @param Request $request   * @return bool|RedirectResponse   */  public   function   doStore (   Request   $request   )  { \n     $validator   =   Validator :: make (   $request - all (),   [ \n         name                    =   required|string|max:255 , \n         shortname               =   required|string|max:255 , \n     ]); \n\n     if (   $validator - fails ()   )   { \n         return   Redirect :: back () - withErrors ( $validator ) - withInput (); \n     } \n\n     if (   $request - input (   id ,   false   )   )   { \n         if (   ! (   $this - object   =   D2EM :: getRepository (   InfrastructureEntity :: class   ) - find (   $request - input (   id   )   )   )   )   { \n             abort ( 404 ); \n         } \n     }   else   { \n         $this - object   =   new   InfrastructureEntity ; \n         D2EM :: persist (   $this - object   ); \n     } \n\n     $this - object - setName (                $request - input (   name           )   ); \n     $this - object - setShortname (           $request - input (   shortname      )   ); \n     $this - object - setIxfIxId (             $request - input (   ixf_ix_id      )   ?   $request - input (   ixf_ix_id      )   :   null   ); \n     $this - object - setPeeringdbIxId (       $request - input (   pdb_ixp        )   ?   $request - input (   pdb_ixp        )   :   null   ); \n     $this - object - setIsPrimary (           $request - input (   primary        )   ??   false   ); \n     $this - object - setIXP (                 D2EM :: getRepository (   IXPEntity :: class   ) - getDefault ()   ); \n\n     D2EM :: flush ( $this - object ); \n\n     if (   $this - object - getIsPrimary ()   )   { \n         // reset the rest: \n         /** @var InfrastructureEntity $i */ \n         foreach (   D2EM :: getRepository (   InfrastructureEntity :: class   ) - findAll ()   as   $i   )   { \n             if (   $i - getId ()   ==   $this - object - getId ()   ||   ! $i - getIsPrimary ()   )   { \n                 continue ; \n             } \n             $i - setIsPrimary (   false   ); \n         } \n         D2EM :: flush (); \n     } \n\n     return   true ;  }   Note from this:   validation is the standard  Laravel validation  which works well with  Former .  it's important to remember to assign the object as:  $this- object = $inf;  as it is used to create log messages, etc.   The following hooks are available:   protected function postStoreRedirect() {}  - the  Doctrine2Frontend  class returns null. Override it to return\n    a valid route name to have the post store redirect go somewhere besides  /list .", 
            "title": "Create / Update Store"
        }, 
        {
            "location": "/dev/frontend-crud/#delete", 
            "text": "Deletes are handled via posts and so have Laravel's built in CSRF protection. The logic is quiet simple:  ?php  public   function   delete (   Request   $request   )   { \n\n     if (   ! (   $this - object   =   D2EM :: getRepository (   $this - feParams - entity   ) - find (   $request - input (   id   )   )   )   )   { \n         return   abort (   404   ); \n     } \n\n     if (   $this - preDelete ()   )   { \n         D2EM :: remove (   $this - object   ); \n         D2EM :: flush (); \n         $this - postFlush (   delete   ); \n         AlertContainer :: push (   $this - feParams - titleSingular   .    deleted. ,   Alert :: SUCCESS   ); \n     } \n\n     return   redirect () - action (   $this - feParams - defaultController . @ . $this - feParams - defaultAction   );  }   As you can see, it calls a  protected function preDelete(): bool {}  hook which, if it returns  false , the delete operation is abandoned.  The following hooks are available:  * `protected function postDeleteRedirect() {}` - the *Doctrine2Frontend* class returns null. Override it to return\n    a valid route name to have the post store redirect go somewhere besides `/list`.", 
            "title": "Delete"
        }, 
        {
            "location": "/dev/frontend-crud/#other-hooks", 
            "text": "", 
            "title": "Other Hooks"
        }, 
        {
            "location": "/dev/frontend-crud/#post-flush", 
            "text": "There is a  postFlush()  hook:  ?php  /**   * Optional method to be overridden if a D2F controllers needs to perform post-database flush actions   *   * @param string $action Either  add ,  edit ,  delete   * @return bool   */  protected   function   postFlush (   string   $action   ) :   bool  { \n     return   true ;  }   which is called during some actions with the action name as a parameter:  add ,  edit ,  delete . This function is called just after the database flush operation.", 
            "title": "Post Flush"
        }, 
        {
            "location": "/dev/grapher/", 
            "text": "Grapher\n\uf0c1\n\n\nOutline of Adding a New Graph Type\n\uf0c1\n\n\nThis is a quick write up as I commit a new graph type. To be fleshed out.\n\n\nOur new graphing backend, \nGrapher\n, supports different graph types from different backends. To add a new graph type - let's call it \nExample\n - you need to do the following:\n\n\n\n\nCreate a graph class for this new type called \napp/Services/Grapher/Graph/Example.php\n. This must extend the abstract class \napp/Services/Grapher/Graph.php\n.\n\n\nAdd an \nexample()\n function to \napp/Services/Grapher.php\n which instantiates the above graph object.\n\n\nUpdate the appropriate backend file(s) (\napp/Services/Grapher/Backend/xxx\n) to handle this new graph file. I.e. create the actual implementation for getting the data to process this graph.\n\n\nAdd your graph to the \nsupports()\n function in the appropriate backends (and the \napp/Services/Grapher/Backend/Dummy\n backend).\n\n\n\n\nTo serve this graph over HTTP:\n\n\n\n\n\n\nCreate a GET route in \napp/Providers/GrapherServiceProvider.php\n\n\n\n\nCreate a function to handle the GET request in \napp/Http/Controllers/Services/Grapher.php\n\n\nAdd functionality to the middleware to process a graph request: \napp/Http/Middleware/Services/Grapher.php\n\n\n\n\nHere's a great example from a \nGithub commit\n.\n\n\nAdding a New MRTG Graph\n\uf0c1\n\n\nHere is an example of adding \nbroadcast graphs\n to MRTG.", 
            "title": "Grapher"
        }, 
        {
            "location": "/dev/grapher/#grapher", 
            "text": "", 
            "title": "Grapher"
        }, 
        {
            "location": "/dev/grapher/#outline-of-adding-a-new-graph-type", 
            "text": "This is a quick write up as I commit a new graph type. To be fleshed out.  Our new graphing backend,  Grapher , supports different graph types from different backends. To add a new graph type - let's call it  Example  - you need to do the following:   Create a graph class for this new type called  app/Services/Grapher/Graph/Example.php . This must extend the abstract class  app/Services/Grapher/Graph.php .  Add an  example()  function to  app/Services/Grapher.php  which instantiates the above graph object.  Update the appropriate backend file(s) ( app/Services/Grapher/Backend/xxx ) to handle this new graph file. I.e. create the actual implementation for getting the data to process this graph.  Add your graph to the  supports()  function in the appropriate backends (and the  app/Services/Grapher/Backend/Dummy  backend).   To serve this graph over HTTP:    Create a GET route in  app/Providers/GrapherServiceProvider.php   Create a function to handle the GET request in  app/Http/Controllers/Services/Grapher.php  Add functionality to the middleware to process a graph request:  app/Http/Middleware/Services/Grapher.php   Here's a great example from a  Github commit .", 
            "title": "Outline of Adding a New Graph Type"
        }, 
        {
            "location": "/dev/grapher/#adding-a-new-mrtg-graph", 
            "text": "Here is an example of adding  broadcast graphs  to MRTG.", 
            "title": "Adding a New MRTG Graph"
        }, 
        {
            "location": "/dev/helpders/", 
            "text": "Helpers\n\uf0c1\n\n\nVarious helpers we use within IXP Manager.\n\n\nAlerts\n\uf0c1\n\n\nTo show Bootstrap-styled alerts on view (Foil) templates, add them in your controllers as follows:\n\n\n?php\n\n    \nuse\n \nIXP\\Utils\\View\\Alert\\Container\n \nas\n \nAlertContainer\n;\n\n    \nuse\n \nIXP\\Utils\\View\\Alert\\Alert\n;\n\n\n    \n...\n\n\n    \nAlertContainer\n::\npush\n(\n \nb\nExample\n:\n/\nb\n \nThis\n \nis\n \na\n \nsuccess\n \nalert\n!\n,\n \nAlert\n::\nSUCCESS\n \n);\n\n\n\n\n\n\nwhere the types available are: \nSUCCESS, INFO (default), DANGER, WARNING\n.\n\n\nTo then display (all) the alerts, in your foil template add:\n\n\n?\n=\n \n$t\n-\nalerts\n()\n \n?\n\n\n\n\n\n\nThese alerts are HTML-safe as they display the message using HTML Purifier's ''clean()''.", 
            "title": "Helpers"
        }, 
        {
            "location": "/dev/helpders/#helpers", 
            "text": "Various helpers we use within IXP Manager.", 
            "title": "Helpers"
        }, 
        {
            "location": "/dev/helpders/#alerts", 
            "text": "To show Bootstrap-styled alerts on view (Foil) templates, add them in your controllers as follows:  ?php \n     use   IXP\\Utils\\View\\Alert\\Container   as   AlertContainer ; \n     use   IXP\\Utils\\View\\Alert\\Alert ; \n\n     ... \n\n     AlertContainer :: push (   b Example : / b   This   is   a   success   alert ! ,   Alert :: SUCCESS   );   where the types available are:  SUCCESS, INFO (default), DANGER, WARNING .  To then display (all) the alerts, in your foil template add:  ? =   $t - alerts ()   ?   These alerts are HTML-safe as they display the message using HTML Purifier's ''clean()''.", 
            "title": "Alerts"
        }, 
        {
            "location": "/dev/looking-glass/", 
            "text": "Looking Glass\n\uf0c1\n\n\nIXP Manager\n has \nlooking glass support\n allowing IXPs to expose details on route server / collector / AS112 BGP sessions to their members.\n\n\nAs it stands, we have only impemented one looking glass backend - \nBird's Eye\n; a \nsimple secure micro service for querying Bird (JSON API)\n (and also written by us, INEX).\n\n\nWe have implemented this in \nIXP Manager\n as a service so that other backends can be added easily.\n\n\nDisclaimer: the links and line numbers here are against IXP Manager \nv4.5.0\n and they may have changed since.\n\n\nAdding Support for Additional LGs\n\uf0c1\n\n\n\n\n\n\nAn additional API backend needs to be given a constant in \nEntities\\Router\n named \nAPI_TYPE_XXX\n where \nXXX\n is an appropriate name.\n\n\n\n\n\n\nIt then needs to have a \ncase:\n check in \napp/Services/LookingGlass.php\n. This needs to instantiate your service provider.\n\n\n\n\n\n\nYour service provider must implement the \nApp\\Contracts\\LookingGlass\n interface.\n\n\n\n\n\n\nFor a concrete example, see the \nBird's Eye implementation\n.", 
            "title": "Looking Glass"
        }, 
        {
            "location": "/dev/looking-glass/#looking-glass", 
            "text": "IXP Manager  has  looking glass support  allowing IXPs to expose details on route server / collector / AS112 BGP sessions to their members.  As it stands, we have only impemented one looking glass backend -  Bird's Eye ; a  simple secure micro service for querying Bird (JSON API)  (and also written by us, INEX).  We have implemented this in  IXP Manager  as a service so that other backends can be added easily.  Disclaimer: the links and line numbers here are against IXP Manager  v4.5.0  and they may have changed since.", 
            "title": "Looking Glass"
        }, 
        {
            "location": "/dev/looking-glass/#adding-support-for-additional-lgs", 
            "text": "An additional API backend needs to be given a constant in  Entities\\Router  named  API_TYPE_XXX  where  XXX  is an appropriate name.    It then needs to have a  case:  check in  app/Services/LookingGlass.php . This needs to instantiate your service provider.    Your service provider must implement the  App\\Contracts\\LookingGlass  interface.    For a concrete example, see the  Bird's Eye implementation .", 
            "title": "Adding Support for Additional LGs"
        }, 
        {
            "location": "/dev/vagrant/", 
            "text": "Vagrant\n\uf0c1\n\n\nFor development purposes, we have both \nDocker\n and Vagrant build files.\n\n\nQuick Vagrant\n\uf0c1\n\n\n\n\nTemporary issue:\n Ubuntu Xenial has a known issue and a couple extra steps are required right now (in the \nnf-graphs-decix\n branch): https://github.com/inex/IXP-Manager/commit/dd8d256712ec2564eee29aab7cc2eabdf33466d6\n\n\n\n\nIf you want to get IXP Manager with Vagrant up and running quickly, follow these steps:\n\n\n\n\nInstall Vagrant (see: http://docs.vagrantup.com/v2/installation/index.html)\n\n\nInstall VirtualBox (see: https://www.virtualbox.org/)\n\n\n\n\nClone IXP Manager to a directory:\n\n\ngit clone https://github.com/inex/IXP-Manager.git ixpmanager\n\ncd \nixpmanager\n\n\n\n\n\n\n\n\n\nSpin up a Vagrant virtual machine:\n\n\nvagrant up\n\n\n\n\n\n\n\n\n\nAccess IXP Manager on: http://localhost:8088/\n\n\n\n\n\n\nLog in with one of the following username / passwords:\n\n\n\n\n\n\nAdmin user: \nvagrant / vagrant1\n\n\n\n\nCustomer Admin: \nas112 / as112as112\n\n\nCustomer User: \nasii2user / as112as112\n\n\n\n\nPlease see Vagrant's own documentation for a full description of how to use it fully. To access the virtual machine that the above has spun up, just run the following from the \nixpmanager\n directory:\n\n\nvagrant ssh\n\n\n\n\n\nYou'll find the \nixpmanager\n directory mounted under \n/vagrant\n, you can \nsudo su -\n and you can access MySQL via:\n\n\nmysql -u root -ppassword ixp\n\n\n\n\n\nIf you prefer to use phpMyAdmin, you'll find it at http://localhost:8088/phpmyadmin and you can log in with \nroot / password\n.\n\n\nDatabase Details\n\uf0c1\n\n\nSpinning up Vagrant in the above manner loads a sample database from \nixpmanager/database/vagrant-base.sql\n. If you have a preferred development database, place a bzip'd copy of it at \nixpmanager/ixpmanager-preferred.sql.bz2\n before step 5 above.", 
            "title": "Vagrant"
        }, 
        {
            "location": "/dev/vagrant/#vagrant", 
            "text": "For development purposes, we have both  Docker  and Vagrant build files.", 
            "title": "Vagrant"
        }, 
        {
            "location": "/dev/vagrant/#quick-vagrant", 
            "text": "Temporary issue:  Ubuntu Xenial has a known issue and a couple extra steps are required right now (in the  nf-graphs-decix  branch): https://github.com/inex/IXP-Manager/commit/dd8d256712ec2564eee29aab7cc2eabdf33466d6   If you want to get IXP Manager with Vagrant up and running quickly, follow these steps:   Install Vagrant (see: http://docs.vagrantup.com/v2/installation/index.html)  Install VirtualBox (see: https://www.virtualbox.org/)   Clone IXP Manager to a directory:  git clone https://github.com/inex/IXP-Manager.git ixpmanager cd  ixpmanager    Spin up a Vagrant virtual machine:  vagrant up    Access IXP Manager on: http://localhost:8088/    Log in with one of the following username / passwords:    Admin user:  vagrant / vagrant1   Customer Admin:  as112 / as112as112  Customer User:  asii2user / as112as112   Please see Vagrant's own documentation for a full description of how to use it fully. To access the virtual machine that the above has spun up, just run the following from the  ixpmanager  directory:  vagrant ssh  You'll find the  ixpmanager  directory mounted under  /vagrant , you can  sudo su -  and you can access MySQL via:  mysql -u root -ppassword ixp  If you prefer to use phpMyAdmin, you'll find it at http://localhost:8088/phpmyadmin and you can log in with  root / password .", 
            "title": "Quick Vagrant"
        }, 
        {
            "location": "/dev/vagrant/#database-details", 
            "text": "Spinning up Vagrant in the above manner loads a sample database from  ixpmanager/database/vagrant-base.sql . If you have a preferred development database, place a bzip'd copy of it at  ixpmanager/ixpmanager-preferred.sql.bz2  before step 5 above.", 
            "title": "Database Details"
        }
    ]
}