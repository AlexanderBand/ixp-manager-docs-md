{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to IXP Manager\n\n\nThis documentation relates to IXP Manager \n= v4. For v3, please see \nthe older documentation here\n.\n\n\nIXP Manager\n is a full stack management system for Internet eXchange Points (IXPs) which includes\nan administration and customer portal; provides end to end provisioning; and both teaches and\nimplements best practice.\n\n\nAdditional information: \nhttp://www.ixpmanager.org/\n\n\nCommercial Support\n\n\nINEX\n itself has limited resources but are eager for \nIXP Manager\n to become the de facto management system for similar IXPs and are willing to help with installations so as to build better documentation. We will consider feature requests, especially where they benefit INEX also and would certainly love feature patches!\n\n\nIf you want commercial support, please contact the authors directly for a quote:\n\n\nsales (at) islandbridgenetworks.ie\n\n\n\nAny code developed commercially or otherwise will be released under the same license as \nIXP Manager\n\nfor the benefit of all.\n\n\nAdditional information: \nhttp://www.ixpmanager.org/commercial.php\n\n\nSponsors\n\n\nIXP Manager is extremely grateful to its \nexisting sponsors\n and continues to seek sponsors for on going development. If you are interested, please \nsee out call for sponsorship\n.\n\n\nTalks and Presentations\n\n\nBarry O'Donovan\n (\n@barryo79\n) and Nick Hilliard routinely give talks and workshops on IXP Manager.\n\n\nWe've published the more recent ones on the website and, where video exists, we've also linked to that. Please \nsee them here\n.\n\n\nWho Uses IXP Manager?\n\n\nWe maintain a list of IXPs which use IXP Manager \nhere\n. This information is also available \nin JSON format\n. If you are an IXP using IXP Manager (or know of one) that is not listed, \nthe linked page\n also has instructions for getting listed.", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-ixp-manager", 
            "text": "This documentation relates to IXP Manager  = v4. For v3, please see  the older documentation here .  IXP Manager  is a full stack management system for Internet eXchange Points (IXPs) which includes\nan administration and customer portal; provides end to end provisioning; and both teaches and\nimplements best practice.  Additional information:  http://www.ixpmanager.org/", 
            "title": "Welcome to IXP Manager"
        }, 
        {
            "location": "/#commercial-support", 
            "text": "INEX  itself has limited resources but are eager for  IXP Manager  to become the de facto management system for similar IXPs and are willing to help with installations so as to build better documentation. We will consider feature requests, especially where they benefit INEX also and would certainly love feature patches!  If you want commercial support, please contact the authors directly for a quote:  sales (at) islandbridgenetworks.ie  Any code developed commercially or otherwise will be released under the same license as  IXP Manager \nfor the benefit of all.  Additional information:  http://www.ixpmanager.org/commercial.php", 
            "title": "Commercial Support"
        }, 
        {
            "location": "/#sponsors", 
            "text": "IXP Manager is extremely grateful to its  existing sponsors  and continues to seek sponsors for on going development. If you are interested, please  see out call for sponsorship .", 
            "title": "Sponsors"
        }, 
        {
            "location": "/#talks-and-presentations", 
            "text": "Barry O'Donovan  ( @barryo79 ) and Nick Hilliard routinely give talks and workshops on IXP Manager.  We've published the more recent ones on the website and, where video exists, we've also linked to that. Please  see them here .", 
            "title": "Talks and Presentations"
        }, 
        {
            "location": "/#who-uses-ixp-manager", 
            "text": "We maintain a list of IXPs which use IXP Manager  here . This information is also available  in JSON format . If you are an IXP using IXP Manager (or know of one) that is not listed,  the linked page  also has instructions for getting listed.", 
            "title": "Who Uses IXP Manager?"
        }, 
        {
            "location": "/install/", 
            "text": "Installation\n\n\nWe've tried out best to make installing IXP Manager as easy as possible via the install script(s) we provide. These scripts are opinionated about what version of Linux is used and how IXP Manager is installed. It's targeted at people who don't have a huge amount of system administration skills or want to take a quick look to evaluate the product.\n\n\nIf you want to install on your own preferred platform or with your own tweaks, we provide detailed instructions below also but we only offer whatever support you'll find on the \npublic mailing list\n.\n\n\nThe installation of IXP Manager doesn't end when you have the web interface up and running (which is mostly what we cover in this section and the installation script) - that's really just the beginning. Completing the installation is about all the features that work around and via IXP Manager such as route server configurations, graphing, peer to peer graphs via sflow, etc. Each of these require different amounts of effort and are covered in their individual feature pages.", 
            "title": "Introduction"
        }, 
        {
            "location": "/install/#installation", 
            "text": "We've tried out best to make installing IXP Manager as easy as possible via the install script(s) we provide. These scripts are opinionated about what version of Linux is used and how IXP Manager is installed. It's targeted at people who don't have a huge amount of system administration skills or want to take a quick look to evaluate the product.  If you want to install on your own preferred platform or with your own tweaks, we provide detailed instructions below also but we only offer whatever support you'll find on the  public mailing list .  The installation of IXP Manager doesn't end when you have the web interface up and running (which is mostly what we cover in this section and the installation script) - that's really just the beginning. Completing the installation is about all the features that work around and via IXP Manager such as route server configurations, graphing, peer to peer graphs via sflow, etc. Each of these require different amounts of effort and are covered in their individual feature pages.", 
            "title": "Installation"
        }, 
        {
            "location": "/install/automated-script/", 
            "text": "Automated Installation Script\n\n\nThe available installation script(s) can be found at: \nhttps://github.com/inex/IXP-Manager/tree/master/tools/installers\n.\n\n\nEven if you choose not to use these, the scripts under the above link show the accurate and complete installation process and should be used as a reference guide.", 
            "title": "Automated Script"
        }, 
        {
            "location": "/install/automated-script/#automated-installation-script", 
            "text": "The available installation script(s) can be found at:  https://github.com/inex/IXP-Manager/tree/master/tools/installers .  Even if you choose not to use these, the scripts under the above link show the accurate and complete installation process and should be used as a reference guide.", 
            "title": "Automated Installation Script"
        }, 
        {
            "location": "/install/maint-mode/", 
            "text": "Maintenance Mode\n\n\nWhile most updates of \nIXP Manager\n are quick, some may be more involved with schema updates or complicated migration steps. In these cases it's useful and advisable to put \nIXP Manager\n in maintenance mode.\n\n\nMaintenance mode is now handled by Laravel's built in tool for this. You can review \ntheir own documentation for this\n which us copied here.\n\n\nWhen your application is in maintenance mode, a custom view will be displayed for all requests into your application. This makes it easy to \"disable\" your application while it is updating or when you are performing maintenance. A maintenance mode check is included in the default middleware stack for your application. If the application is in maintenance mode, a \nMaintenanceModeException\n will be thrown with a status code of 503.\n\n\nTo enable maintenance mode, simply execute the down Artisan command:\n\n\nphp artisan down\n\n\n\n\nYou may also provide message and retry options to the down command. The message value may be used to display or log a custom message, while the retry value will be set as the Retry-After HTTP header's value::\n\n\nphp artisan down --message='Upgrading Database' --retry=60\n\n\n\n\nTo disable maintenance mode, use the up command::\n\n\nphp artisan up", 
            "title": "Maintenance Mode"
        }, 
        {
            "location": "/install/maint-mode/#maintenance-mode", 
            "text": "While most updates of  IXP Manager  are quick, some may be more involved with schema updates or complicated migration steps. In these cases it's useful and advisable to put  IXP Manager  in maintenance mode.  Maintenance mode is now handled by Laravel's built in tool for this. You can review  their own documentation for this  which us copied here.  When your application is in maintenance mode, a custom view will be displayed for all requests into your application. This makes it easy to \"disable\" your application while it is updating or when you are performing maintenance. A maintenance mode check is included in the default middleware stack for your application. If the application is in maintenance mode, a  MaintenanceModeException  will be thrown with a status code of 503.  To enable maintenance mode, simply execute the down Artisan command:  php artisan down  You may also provide message and retry options to the down command. The message value may be used to display or log a custom message, while the retry value will be set as the Retry-After HTTP header's value::  php artisan down --message='Upgrading Database' --retry=60  To disable maintenance mode, use the up command::  php artisan up", 
            "title": "Maintenance Mode"
        }, 
        {
            "location": "/install/manually/", 
            "text": "Requirements\n\n\nIXP Manager tries to stay current in terms of technology. Typically, this means some element of framework refresh(es) every couple of years and other more incremental package upgrades with minor version upgrades. As well as the obvious reasons for this, there is also the requirement to prevent developer apathy - insisting on legacy frameworks and packages that have been EOL'd provides a major stumbling block for bringing on new developers and contributors.\n\n\nThe current requirements for the web application are:\n\n\n\n\na Linux / BSD host.\n\n\nMariaDB / MySQL version 5.5.4 or later.\n\n\nApache / Nginx / etc.\n\n\nPHP \n= 7.0. \nNote that IXP Manager will not run on older versions of PHP.\n\n\nMemcached - optional but highly recommended.\n\n\n\n\nTo complete the installation using the included config/scripts, you will also need to have installed:\n\n\n\n\ngit - distributed revision control system (e.g.: \napt-get install git\n)\n\n\nmemcache extension module for PHP (e.g.: \napt-get install php-memcached\n)\n\n\nSNMP extension module for PHP (e.g.: \napt-get install php7.0-snmp\n)\n\n\nphp7.0-mbstring - may be built into the PHP core\n\n\nphp7.0-xml\n\n\nphp7.0-intl\n\n\nphp7.0-mysql\n\n\nphp7.0-mcrypt\n\n\nphp-rrd\n\n\n\n\nFor completeness, the IXP Manager installation script for Ubuntu 16.04 LTS installs:\n\n\nsh\napt-get install apache2 php7.0 php7.0-intl php7.0-mysql php-rrd php7.0-cgi php7.0-cli  \\\n    php7.0-snmp php7.0-curl php7.0-mcrypt php-memcached libapache2-mod-php7.0          \\\n    mysql-server mysql-client php-mysql memcached snmp nodejs nodejs-legacy npm        \\\n    php7.0-mbstring php7.0-xml php-gettext bgpq3 php-memcache unzip php-zip git\n\n\nInstall Composer and Bower\n\n\nIXP Manager uses \nComposer\n to manage its PHP dependencies. First, download a copy of the composer.phar. Once you have the PHAR archive, you can either keep it in your local project directory or move to \n/usr/local/bin\n to use it globally on your system.\n\n\nThe installation script for Ubuntu 16.04 LTS installs these via:\n\n\nIXPROOT=/srv/ixpmanager\n# ...\ncd $IXPROOT\nEXPECTED_SIGNATURE=$(wget https://composer.github.io/installer.sig -O - -q)\nphp -r \ncopy('https://getcomposer.org/installer', 'composer-setup.php');\n\nACTUAL_SIGNATURE=$(php -r \necho hash_file('SHA384', 'composer-setup.php');\n)\n\nif [ \n$EXPECTED_SIGNATURE\n = \n$ACTUAL_SIGNATURE\n ]; then\n    sudo -u www-data bash -c \nHOME=$IXPROOT \n cd $IXPROOT \n php composer-setup.php --quiet\n\n    rm $IXPROOT/composer-setup.php\n    # optional:\n    mv composer.phar /usr/local/bin/composer\nelse\n    echo -e \n\\n\\nERROR: Invalid installer signature for composer installation\n\n    rm $IXPROOT/composer-setup.php\n    exit 1\nfi\n\n\n\n\nand:\n\n\nnpm install -g bower\n\n\n\n\nGet the IXP Manager Source\n\n\nThe code for IXP Manager is maintained on GitHub and the canonical repository is \ninex/IXP-Manager\n.\n\n\nLog into the server where you wish to install IXP Manager. Move to the directory where you wish to store the source (our examples use \n/srv/ixpmanager\n which we refer to as \n$IXPROOT\n). Note that it \nshould not\n be checked out into any web exposed directory (e.g. do not checkout to \n/var/www\n).\n\n\ncd /srv\ngit clone https://github.com/inex/IXP-Manager.git ixpmanager\ncd $IXPROOT   # /srv/ixpmanager\ngit checkout master\n\n\n\n\nInitial Setup and Dependancies\n\n\nDependencies\n\n\nInstall the required PHP libraries and frontend CSS/JS packages:\n\n\ncd $IXPROOT\ncomposer install\nbower install\ncp .env.example .env\nphp artisan key:generate\n\n\n\n\nDatabase Setup\n\n\nUse whatever means you like to create a database and user for IXP Manager. For example:\n\n\nCREATE DATABASE `ixp` CHARACTER SET = 'utf8mb4' COLLATE = 'utf8mb4_unicode_ci';\nGRANT ALL ON `ixp`.* TO `ixp`@`localhost` IDENTIFIED BY '\npick a password!\n';\nFLUSH PRIVILEGES;\n\n\n\n\nThen edit \n$IXPROOT/.env\n and set the database options:\n\n\nDB_HOST=localhost\nDB_DATABASE=ixp\nDB_USERNAME=ixp\nDB_PASSWORD=password\n\n\n\n\nNow create the database schema:\n\n\nphp artisan doctrine:schema:create\n\n\n\n\nConfiguration\n\n\nEdit \n$IXPROOT/.env\n and review and set/change all parameters. Hopefully this is mostly documented or clear but please start a discussion on the mailing list if you have difficultly and we'll update this and the example file's documentation as appropriate.\n\n\nInitial Database Objects\n\n\nUsing the settings you edited in \n.env\n we'll create some database objects. [Yes, a setup wizard needs to be built!].\n\n\nFirst let's create the password for the admin user. The following will create a secure random password and hash it with bcrypt:\n\n\nUSERNAME=admin\nUSEREMAIL=your@email.address\nIXPM_ADMIN_PW=\n$( openssl rand -base64 12 )\n\nADMIN_PW_SALT=\n$( openssl rand -base64 16 )\n\nHASH_PW=$( php -r \necho escapeshellarg( crypt( '${IXPM_ADMIN_PW}', sprintf( '\\$2a\\$%02d\\$%s', 10, substr( '${ADMIN_PW_SALT}', 0, 22 ) ) ) );\n )\necho Your password is: $IXPM_ADMIN_PW\n\n\n\n\nThe following is taken from the IXP Manager installation script:\n\n\nmysql -u root \n-p${MYSQL_ROOT_PW}\n $DBNAME \nEND_SQL\nINSERT INTO ixp ( name, shortname, address1, country )\n    VALUES ( '${IXPNAME}', '${IXPSNAME}', '${IXPCITY}', '${IXPCOUNTRY}' );\nSET @ixpid = LAST_INSERT_ID();\n\nINSERT INTO infrastructure ( ixp_id, name, shortname, isPrimary )\n    VALUES ( @ixpid, 'Infrastructure #1', '#1', 1 );\nSET @infraid = LAST_INSERT_ID();\n\nINSERT INTO company_registration_detail ( registeredName ) VALUES ( '${IXPNAME}' );\nSET @crdid = LAST_INSERT_ID();\n\nINSERT INTO company_billing_detail ( billingContactName, invoiceMethod, billingFrequency )\n    VALUES ( '${NAME}', 'EMAIL', 'NOBILLING' );\nSET @cbdid = LAST_INSERT_ID();\n\nINSERT INTO cust ( name, shortname, type, abbreviatedName, autsys, maxprefixes, peeringemail, nocphone, noc24hphone,\n        nocemail, nochours, nocwww, peeringpolicy, corpwww, datejoin, status, activepeeringmatrix, isReseller,\n        company_registered_detail_id, company_billing_details_id )\n    VALUES ( '${IXPNAME}', '${IXPSNAME}', 3, '${IXPSNAME}', '${IXPASN}', 100, '${IXPPEEREMAIL}', '${IXPNOCPHONE}',\n        '${IXPNOCPHONE}', '${IXPNOCEMAIL}', '24x7', '', 'mandatory', '${IXPWWW}', NOW(), 1, 1, 0, @crdid, @cbdid );\nSET @custid = LAST_INSERT_ID();\n\nINSERT INTO customer_to_ixp ( customer_id, ixp_id ) VALUES ( @custid, @ixpid );\n\nINSERT INTO user ( custid, username, password, email, privs, disabled, created )\n    VALUES ( @custid, '${USERNAME}', ${HASH_PW}, '${USEREMAIL}', 3, 0, NOW() );\nSET @userid = LAST_INSERT_ID();\n\nINSERT INTO contact ( custid, name, email, created, user_id ) VALUES ( @custid, '${NAME}', '${USEREMAIL}', NOW(), @userid );\nEND_SQL\n\n\n\n\nAnd finally seed the database:\n\n\ncd $IXPROOT\nphp artisan db:seed --class=IRRDBs\nphp artisan db:seed --class=Vendors\nphp artisan db:seed --class=ContactGroups\n\n\n\n\nFile Permissions\n\n\nThe web server needs write access to some directories:\n\n\ncd $IXPROOT\nchown -R www-data: var/ storage/ bootstrap/cache/ database/Proxies/\nchmod -R u+rwX var/ storage/ bootstrap/cache/ database/Proxies/\n\n\n\n\nSetting Up Apache\n\n\nHere is a sample virtual hosts file for IXP Manager (replace \n{$IXPROOT}\n as appropriate!):\n\n\nVirtualHost *:80\n\n    ServerAdmin webmaster@localhost\n    DocumentRoot ${IXPROOT}/public\n    \nDirectory ${IXPROOT}/public\n\n        Options FollowSymLinks\n        AllowOverride None\n        Require all granted\n        RewriteEngine On\n        RewriteCond %{REQUEST_FILENAME} -s [OR]\n        RewriteCond %{REQUEST_FILENAME} -l [OR]\n        RewriteCond %{REQUEST_FILENAME} -d\n        RewriteRule ^.*$ - [NC,L]\n        RewriteRule ^.*$ /index.php [NC,L]\n    \n/Directory\n\n    ErrorLog \\${APACHE_LOG_DIR}/error.log\n    CustomLog \\${APACHE_LOG_DIR}/access.log combined\n\n/VirtualHost\n\n\n\n\n\nYou also need to enable rewrite:\n\n\na2enmod rewrite\nservice apache2 restart\n\n\n\n\nCongratulations!\n\n\nYour new IXP Manager installation should be accessible via your server's IP address using the username (\n$USERNAME\n) and password (\n$IXPM_ADMIN_PW\n) you set above.\n\n\nIf you plan to use this in production, you should:\n\n\n\n\nsecure your server with an iptables firewall\n\n\ninstall an SSL certificate and redirect HTTP access to HTTPS\n\n\ncomplete the installation of the many features of IXP Manager such as route server generation, member stats, peer to peer graphs, etc.\n\n\nPLEASE TELL US! We'd like to add you to the users list at http://www.ixpmanager.org/users.php - just drop us an email to \noperations \nat\n inex \ndot\n ie\n.", 
            "title": "Manual Installation"
        }, 
        {
            "location": "/install/manually/#requirements", 
            "text": "IXP Manager tries to stay current in terms of technology. Typically, this means some element of framework refresh(es) every couple of years and other more incremental package upgrades with minor version upgrades. As well as the obvious reasons for this, there is also the requirement to prevent developer apathy - insisting on legacy frameworks and packages that have been EOL'd provides a major stumbling block for bringing on new developers and contributors.  The current requirements for the web application are:   a Linux / BSD host.  MariaDB / MySQL version 5.5.4 or later.  Apache / Nginx / etc.  PHP  = 7.0.  Note that IXP Manager will not run on older versions of PHP.  Memcached - optional but highly recommended.   To complete the installation using the included config/scripts, you will also need to have installed:   git - distributed revision control system (e.g.:  apt-get install git )  memcache extension module for PHP (e.g.:  apt-get install php-memcached )  SNMP extension module for PHP (e.g.:  apt-get install php7.0-snmp )  php7.0-mbstring - may be built into the PHP core  php7.0-xml  php7.0-intl  php7.0-mysql  php7.0-mcrypt  php-rrd   For completeness, the IXP Manager installation script for Ubuntu 16.04 LTS installs:  sh\napt-get install apache2 php7.0 php7.0-intl php7.0-mysql php-rrd php7.0-cgi php7.0-cli  \\\n    php7.0-snmp php7.0-curl php7.0-mcrypt php-memcached libapache2-mod-php7.0          \\\n    mysql-server mysql-client php-mysql memcached snmp nodejs nodejs-legacy npm        \\\n    php7.0-mbstring php7.0-xml php-gettext bgpq3 php-memcache unzip php-zip git", 
            "title": "Requirements"
        }, 
        {
            "location": "/install/manually/#install-composer-and-bower", 
            "text": "IXP Manager uses  Composer  to manage its PHP dependencies. First, download a copy of the composer.phar. Once you have the PHAR archive, you can either keep it in your local project directory or move to  /usr/local/bin  to use it globally on your system.  The installation script for Ubuntu 16.04 LTS installs these via:  IXPROOT=/srv/ixpmanager\n# ...\ncd $IXPROOT\nEXPECTED_SIGNATURE=$(wget https://composer.github.io/installer.sig -O - -q)\nphp -r  copy('https://getcomposer.org/installer', 'composer-setup.php'); \nACTUAL_SIGNATURE=$(php -r  echo hash_file('SHA384', 'composer-setup.php'); )\n\nif [  $EXPECTED_SIGNATURE  =  $ACTUAL_SIGNATURE  ]; then\n    sudo -u www-data bash -c  HOME=$IXPROOT   cd $IXPROOT   php composer-setup.php --quiet \n    rm $IXPROOT/composer-setup.php\n    # optional:\n    mv composer.phar /usr/local/bin/composer\nelse\n    echo -e  \\n\\nERROR: Invalid installer signature for composer installation \n    rm $IXPROOT/composer-setup.php\n    exit 1\nfi  and:  npm install -g bower", 
            "title": "Install Composer and Bower"
        }, 
        {
            "location": "/install/manually/#get-the-ixp-manager-source", 
            "text": "The code for IXP Manager is maintained on GitHub and the canonical repository is  inex/IXP-Manager .  Log into the server where you wish to install IXP Manager. Move to the directory where you wish to store the source (our examples use  /srv/ixpmanager  which we refer to as  $IXPROOT ). Note that it  should not  be checked out into any web exposed directory (e.g. do not checkout to  /var/www ).  cd /srv\ngit clone https://github.com/inex/IXP-Manager.git ixpmanager\ncd $IXPROOT   # /srv/ixpmanager\ngit checkout master", 
            "title": "Get the IXP Manager Source"
        }, 
        {
            "location": "/install/manually/#initial-setup-and-dependancies", 
            "text": "", 
            "title": "Initial Setup and Dependancies"
        }, 
        {
            "location": "/install/manually/#dependencies", 
            "text": "Install the required PHP libraries and frontend CSS/JS packages:  cd $IXPROOT\ncomposer install\nbower install\ncp .env.example .env\nphp artisan key:generate", 
            "title": "Dependencies"
        }, 
        {
            "location": "/install/manually/#database-setup", 
            "text": "Use whatever means you like to create a database and user for IXP Manager. For example:  CREATE DATABASE `ixp` CHARACTER SET = 'utf8mb4' COLLATE = 'utf8mb4_unicode_ci';\nGRANT ALL ON `ixp`.* TO `ixp`@`localhost` IDENTIFIED BY ' pick a password! ';\nFLUSH PRIVILEGES;  Then edit  $IXPROOT/.env  and set the database options:  DB_HOST=localhost\nDB_DATABASE=ixp\nDB_USERNAME=ixp\nDB_PASSWORD=password  Now create the database schema:  php artisan doctrine:schema:create", 
            "title": "Database Setup"
        }, 
        {
            "location": "/install/manually/#configuration", 
            "text": "Edit  $IXPROOT/.env  and review and set/change all parameters. Hopefully this is mostly documented or clear but please start a discussion on the mailing list if you have difficultly and we'll update this and the example file's documentation as appropriate.", 
            "title": "Configuration"
        }, 
        {
            "location": "/install/manually/#initial-database-objects", 
            "text": "Using the settings you edited in  .env  we'll create some database objects. [Yes, a setup wizard needs to be built!].  First let's create the password for the admin user. The following will create a secure random password and hash it with bcrypt:  USERNAME=admin\nUSEREMAIL=your@email.address\nIXPM_ADMIN_PW= $( openssl rand -base64 12 ) \nADMIN_PW_SALT= $( openssl rand -base64 16 ) \nHASH_PW=$( php -r  echo escapeshellarg( crypt( '${IXPM_ADMIN_PW}', sprintf( '\\$2a\\$%02d\\$%s', 10, substr( '${ADMIN_PW_SALT}', 0, 22 ) ) ) );  )\necho Your password is: $IXPM_ADMIN_PW  The following is taken from the IXP Manager installation script:  mysql -u root  -p${MYSQL_ROOT_PW}  $DBNAME  END_SQL\nINSERT INTO ixp ( name, shortname, address1, country )\n    VALUES ( '${IXPNAME}', '${IXPSNAME}', '${IXPCITY}', '${IXPCOUNTRY}' );\nSET @ixpid = LAST_INSERT_ID();\n\nINSERT INTO infrastructure ( ixp_id, name, shortname, isPrimary )\n    VALUES ( @ixpid, 'Infrastructure #1', '#1', 1 );\nSET @infraid = LAST_INSERT_ID();\n\nINSERT INTO company_registration_detail ( registeredName ) VALUES ( '${IXPNAME}' );\nSET @crdid = LAST_INSERT_ID();\n\nINSERT INTO company_billing_detail ( billingContactName, invoiceMethod, billingFrequency )\n    VALUES ( '${NAME}', 'EMAIL', 'NOBILLING' );\nSET @cbdid = LAST_INSERT_ID();\n\nINSERT INTO cust ( name, shortname, type, abbreviatedName, autsys, maxprefixes, peeringemail, nocphone, noc24hphone,\n        nocemail, nochours, nocwww, peeringpolicy, corpwww, datejoin, status, activepeeringmatrix, isReseller,\n        company_registered_detail_id, company_billing_details_id )\n    VALUES ( '${IXPNAME}', '${IXPSNAME}', 3, '${IXPSNAME}', '${IXPASN}', 100, '${IXPPEEREMAIL}', '${IXPNOCPHONE}',\n        '${IXPNOCPHONE}', '${IXPNOCEMAIL}', '24x7', '', 'mandatory', '${IXPWWW}', NOW(), 1, 1, 0, @crdid, @cbdid );\nSET @custid = LAST_INSERT_ID();\n\nINSERT INTO customer_to_ixp ( customer_id, ixp_id ) VALUES ( @custid, @ixpid );\n\nINSERT INTO user ( custid, username, password, email, privs, disabled, created )\n    VALUES ( @custid, '${USERNAME}', ${HASH_PW}, '${USEREMAIL}', 3, 0, NOW() );\nSET @userid = LAST_INSERT_ID();\n\nINSERT INTO contact ( custid, name, email, created, user_id ) VALUES ( @custid, '${NAME}', '${USEREMAIL}', NOW(), @userid );\nEND_SQL  And finally seed the database:  cd $IXPROOT\nphp artisan db:seed --class=IRRDBs\nphp artisan db:seed --class=Vendors\nphp artisan db:seed --class=ContactGroups", 
            "title": "Initial Database Objects"
        }, 
        {
            "location": "/install/manually/#file-permissions", 
            "text": "The web server needs write access to some directories:  cd $IXPROOT\nchown -R www-data: var/ storage/ bootstrap/cache/ database/Proxies/\nchmod -R u+rwX var/ storage/ bootstrap/cache/ database/Proxies/", 
            "title": "File Permissions"
        }, 
        {
            "location": "/install/manually/#setting-up-apache", 
            "text": "Here is a sample virtual hosts file for IXP Manager (replace  {$IXPROOT}  as appropriate!):  VirtualHost *:80 \n    ServerAdmin webmaster@localhost\n    DocumentRoot ${IXPROOT}/public\n     Directory ${IXPROOT}/public \n        Options FollowSymLinks\n        AllowOverride None\n        Require all granted\n        RewriteEngine On\n        RewriteCond %{REQUEST_FILENAME} -s [OR]\n        RewriteCond %{REQUEST_FILENAME} -l [OR]\n        RewriteCond %{REQUEST_FILENAME} -d\n        RewriteRule ^.*$ - [NC,L]\n        RewriteRule ^.*$ /index.php [NC,L]\n     /Directory \n    ErrorLog \\${APACHE_LOG_DIR}/error.log\n    CustomLog \\${APACHE_LOG_DIR}/access.log combined /VirtualHost   You also need to enable rewrite:  a2enmod rewrite\nservice apache2 restart", 
            "title": "Setting Up Apache"
        }, 
        {
            "location": "/install/manually/#congratulations", 
            "text": "Your new IXP Manager installation should be accessible via your server's IP address using the username ( $USERNAME ) and password ( $IXPM_ADMIN_PW ) you set above.  If you plan to use this in production, you should:   secure your server with an iptables firewall  install an SSL certificate and redirect HTTP access to HTTPS  complete the installation of the many features of IXP Manager such as route server generation, member stats, peer to peer graphs, etc.  PLEASE TELL US! We'd like to add you to the users list at http://www.ixpmanager.org/users.php - just drop us an email to  operations  at  inex  dot  ie .", 
            "title": "Congratulations!"
        }, 
        {
            "location": "/install/upgrading/", 
            "text": "Upgrading IXP Manager\n\n\n\n\nThese upgrade instructions relate to upgrading when you are already using IXP Manager v4.x.\n\n\n\n\nThe upgrade process for IXP Manager is currently a manual task. Especially database schema updates.\n\n\nThe release notes for each version may contain specific upgrade instructions including schema changes.\n\n\nIn the below, we assume the following installation directory - alter this to suit your own situation:\n\n\nIXPROOT=/srv/ixpmanager\n\n\n\n\nThe general process is:\n\n\n\n\n(1) Enable maintenance mode:\n\n\n\n\ncd $IXPROOT\n./artisan down\n\n\n\n\n\n\n(2) Using Git, checkout the next version up from yours. For IXP Manager v4, this essentially means pulling from \nmaster\n.\n\n\n\n\n# move to the directory where you have installed IXP Manager\ncd $IXPROOT\n# you should be in the master branch (if not: git checkout master)\n# pull the latest code\ngit pull\n\n\n\n\n\n\n(3) Install latest required libraries from composer (see notes below):\n\n\n\n\ncomposer install\n\n\n\n\n\n\n(4) Install latest frontend dependencies (see notes below):\n\n\n\n\n# if asked to chose a jquery version, chose the latest / highest version offered\nbower install\n\n\n\n\n\n\n\n\n(5) Restart Memcached. Do not forget / skip this step!\n\n\n\n\n\n\n(6) Update the database schema:\n\n\n\n\n\n\n# review / sanity check first:\n./artisan doctrine:schema:update --sql\n# If in doubt, take a mysqldump of your database first.\n# migrate:\n./artisan doctrine:schema:update --force\n\n\n\n\n\n\n\n\n(7) Restart Memcached (yes, again). Do not forget / skip this step!\n\n\n\n\n\n\n(8) Disable maintenance mode:\n\n\n\n\n\n\n./artisan up\n\n\n\n\nUpdating Bower Dependancies\n\n\nIt is not advisable to run bower are root but how you run it will depend on your own installation.\n\n\nIf you installed IXP Manager via the \ninstallation scripts\n, then it will have changed ownership on directories that the web server does not need to write to to root.\n\n\nThe following options would work on Ubuntu (as root):\n\n\n# set this to your IXP Manager installation directory\nIXPHOME=/srv/ixpmanager\n\n# update bower\nsudo -u www-data bash -c \nHOME=${IXPHOME}/storage \n cd ${IXPHOME} \n bower --config.interactive=false -f update\n\n\n\n\n\nThe above command is structured as it is because typically the \nwww-data\n user has a nologin shell specified.\n\n\nYour mileage may vary on this and we're happy to accept pull requests with other options.\n\n\nUpdating Composer Dependancies\n\n\nThis is similar to the bower section above so please read that if you have not already.\n\n\nThe following options would work on Ubuntu (as root):\n\n\n# set this to your IXP Manager installation directory\nIXPHOME=/srv/ixpmanager\n\n# update bower\nsudo -u www-data bash -c \nHOME=${IXPHOME}/storage \n cd ${IXPHOME} \n composer install\n\n\n\n\n\nCorrecting Database Issues / Verifying Your Schema\n\n\nBecause of the manual process of database updates, it is possible your database schema may fall out of sync.\n\n\nIf you are having issues, first and foremost, restart Memcached. Doctrine2 caches entities and schema information in Memcached so, after an upgrade, you must restart Memcached.\n\n\nYou can verify and update your schema using the \nartisan\n script. The first action should be validation - here is a working example with no database issues:\n\n\n./artisan doctrine:schema:validate\n\nValidating for default entity manager...\n[Mapping]  OK - The mapping files are correct.\n[Database] OK - The database schema is in sync with the mapping files.\n\n\n\n\nIf there are issues, you can use the following to show what SQL commands are required to bring your schema into line:\n\n\n./artisan doctrine:schema:update --sql\n\n\n\n\nAnd you can let Doctrine make the changes for you via:\n\n\n./artisan doctrine:schema:update --force\n\n\n\n\nDoctrine2 maintains the entities, proxies and repository classes. Ideally you should never need to do the following on a production installation - as we maintain these files with Git - but if you're developing / testing IXP Manager, you may need to.\n\n\nThe process for updating these files with schema changes / updates is:\n\n\ncd $IXPROOT\n/etc/init.d/memcached restart    # (or as appropriate for your system)\n./artisan doctrine:generate:entities database\n./artisan doctrine:generate:proxies", 
            "title": "Upgrading"
        }, 
        {
            "location": "/install/upgrading/#upgrading-ixp-manager", 
            "text": "These upgrade instructions relate to upgrading when you are already using IXP Manager v4.x.   The upgrade process for IXP Manager is currently a manual task. Especially database schema updates.  The release notes for each version may contain specific upgrade instructions including schema changes.  In the below, we assume the following installation directory - alter this to suit your own situation:  IXPROOT=/srv/ixpmanager  The general process is:   (1) Enable maintenance mode:   cd $IXPROOT\n./artisan down   (2) Using Git, checkout the next version up from yours. For IXP Manager v4, this essentially means pulling from  master .   # move to the directory where you have installed IXP Manager\ncd $IXPROOT\n# you should be in the master branch (if not: git checkout master)\n# pull the latest code\ngit pull   (3) Install latest required libraries from composer (see notes below):   composer install   (4) Install latest frontend dependencies (see notes below):   # if asked to chose a jquery version, chose the latest / highest version offered\nbower install    (5) Restart Memcached. Do not forget / skip this step!    (6) Update the database schema:    # review / sanity check first:\n./artisan doctrine:schema:update --sql\n# If in doubt, take a mysqldump of your database first.\n# migrate:\n./artisan doctrine:schema:update --force    (7) Restart Memcached (yes, again). Do not forget / skip this step!    (8) Disable maintenance mode:    ./artisan up", 
            "title": "Upgrading IXP Manager"
        }, 
        {
            "location": "/install/upgrading/#updating-bower-dependancies", 
            "text": "It is not advisable to run bower are root but how you run it will depend on your own installation.  If you installed IXP Manager via the  installation scripts , then it will have changed ownership on directories that the web server does not need to write to to root.  The following options would work on Ubuntu (as root):  # set this to your IXP Manager installation directory\nIXPHOME=/srv/ixpmanager\n\n# update bower\nsudo -u www-data bash -c  HOME=${IXPHOME}/storage   cd ${IXPHOME}   bower --config.interactive=false -f update   The above command is structured as it is because typically the  www-data  user has a nologin shell specified.  Your mileage may vary on this and we're happy to accept pull requests with other options.", 
            "title": "Updating Bower Dependancies"
        }, 
        {
            "location": "/install/upgrading/#updating-composer-dependancies", 
            "text": "This is similar to the bower section above so please read that if you have not already.  The following options would work on Ubuntu (as root):  # set this to your IXP Manager installation directory\nIXPHOME=/srv/ixpmanager\n\n# update bower\nsudo -u www-data bash -c  HOME=${IXPHOME}/storage   cd ${IXPHOME}   composer install", 
            "title": "Updating Composer Dependancies"
        }, 
        {
            "location": "/install/upgrading/#correcting-database-issues-verifying-your-schema", 
            "text": "Because of the manual process of database updates, it is possible your database schema may fall out of sync.  If you are having issues, first and foremost, restart Memcached. Doctrine2 caches entities and schema information in Memcached so, after an upgrade, you must restart Memcached.  You can verify and update your schema using the  artisan  script. The first action should be validation - here is a working example with no database issues:  ./artisan doctrine:schema:validate\n\nValidating for default entity manager...\n[Mapping]  OK - The mapping files are correct.\n[Database] OK - The database schema is in sync with the mapping files.  If there are issues, you can use the following to show what SQL commands are required to bring your schema into line:  ./artisan doctrine:schema:update --sql  And you can let Doctrine make the changes for you via:  ./artisan doctrine:schema:update --force  Doctrine2 maintains the entities, proxies and repository classes. Ideally you should never need to do the following on a production installation - as we maintain these files with Git - but if you're developing / testing IXP Manager, you may need to.  The process for updating these files with schema changes / updates is:  cd $IXPROOT\n/etc/init.d/memcached restart    # (or as appropriate for your system)\n./artisan doctrine:generate:entities database\n./artisan doctrine:generate:proxies", 
            "title": "Correcting Database Issues / Verifying Your Schema"
        }, 
        {
            "location": "/install/upgrade-v3/", 
            "text": "Upgrade From v3\n\n\nTo upgrade from IXP Manager v3, you must install v4 in parallel and then switch over by adjusting your Apache configuration to the new v4 directory (or just move v3 out of the way and replace it with v4).\n\n\nTHESE ARE DRAFT NOTES FROM A TEST UPGRADE. THESE WILL BE FLESHED OUT SOON.\n\n\nDuplicating the Database\n\n\nAs we're installing in parallel, we want to duplicate the database as follows. When granting permissions on the new database, use your existing IXP Manager database credentials for ease of configuration.\n\n\nmysql -u root -pXXX -e 'CREATE DATABASE ixp4 CHARACTER SET = \nutf8mb4\n COLLATE = \nutf8mb4_unicode_ci\n;'\nmysqldump -u root -pXXX ixp | mysql -u root -pXXX ixp4\nmysql -u root -pXXX -e 'GRANT ALL ON ixp4.* TO `ixp`@`localhost` IDENTIFIED BY \nYYY\n;'\n# and test:\nmysql -u ixp -pYYY -h localhost ixp4\n\n\n\n\nGet the IXP Manager Source\n\n\nThe code for IXP Manager is maintained on GitHub and the canonical repository is \ninex/IXP-Manager\n.\n\n\nLog into the server where you wish to install IXP Manager. Move to the directory where you wish to store the source. Note that it should not be checked out into any web exposed directory (e.g. do not checkout to \n/var/www\n). In my case, I'm going to use \n/srv/ixp\n which will be referred to as \n$IXPROOT\n below. So I:\n\n\ncd /usr/local\ngit clone https://github.com/inex/IXP-Manager.git ixp4\n\n\n\n\nYou now need to create the text file \n$IXPROOT/.env\n containing database details from above:\n\n\nDB_HOST=localhost\nDB_DATABASE=ixp4\nDB_USERNAME=ixp\nDB_PASSWORD=XXX\n\n\n\n\nAnd then run:\n\n\ncomposer update\nbower update\n\n\n\n\nInitial Configuration Tasks\n\n\nNew Local Settings / Configuration (Laravel)\n\n\nAs v4 is a version in migration from older libraries like Zend Framework to Laravel, we need to do a bit of setup for both frameworks. First Laravel: we'll essentially set defaults in \n$IXPROOT/.env\n which will be used by files in \n$IXPROOT/config\n. Feel free to look at those files and add \n.env\n parameters to suit your own environment.\n\n\nFirst, the application key needs to be set and unique. Execute the following command and you should see a similar output (but a different key):\n\n\nphp artisan key:generate\nApplication key [XjWtsiPl_CHANGE_ME_CHANGE_ME] set successfully.\n\n\n\n\nAdd the APP_KEY to the \n.env\n file by copying the key above:\n\n\nAPP_KEY=XjWtsiPl_CHANGE_ME_CHANGE_ME\n\n\n\n\nNB: Where possible, place local changes into \n.env\n rather than changing the config files as these files are under version control. See \nLaravel's documentation on this\n and email the mailing list for help.\n\n\nHere are some hints on what you might want to set:\n\n\n\n\nconfig/app.php\n\n\nSet: \nAPP_URL\n in \n$IXPROOT/.env\n.\n\n\nconfig/cache.php\n\n\nEither leave \nCACHE_DRIVER\n as \nfile\n or set otherwise in \n$IXPROOT/.env\n.\n\n\nconfig/identity.php\n\n\nCopy \nconfig/identity.php.dist\n to \nconfig/identity.php\n and edit for your IXP \n(essentially copy from your v3 application/configs/application.ini)\n.\n\n\nconfig/mail.php\n\n\nSet appropriate options for mail relay. Specifically \nMAIL_DRIVER\n, \nMAIL_HOST\n and \nMAIL_PORT\n.\n\n\n\n\nMigrate Old Zend Framework Settings\n\n\nCopy your IXP v3 \napplication/configs/application.ini\n file to your new v4 \napplication/configs\n and edit as follows:\n\n\n\n\n\n\nChange the database name:\n\n\n-resources.doctrine2.connection.options.dbname   = 'ixp'\n+resources.doctrine2.connection.options.dbname   = 'ixp4'\n\n\n\n\n\n\nChange paths as follows:\n\n\n```\n-includePaths.osssnmp    = APPLICATION_PATH \"/../library/OSS_SNMP.git\"\n-includePaths.osslibrary = APPLICATION_PATH \"/../library/OSS-Framework.git\"\n+includePaths.osslibrary = APPLICATION_PATH \"/../vendor/opensolutions/oss-framework/src/\"\n\n\n-pluginPaths.OSS_Resource = APPLICATION_PATH \"/../library/OSS-Framework.git/OSS/Resource\"\n+pluginPaths.OSS_Resource = APPLICATION_PATH \"/../vendor/opensolutions/oss-framework/src/OSS/Resource\"\n\n\n-resources.smarty.plugins[] = APPLICATION_PATH \"/../library/OSS-Framework.git/OSS/Smarty/functions\"\n-resources.smarty.plugins[] = APPLICATION_PATH \"/../library/Smarty/plugins\"\n-resources.smarty.plugins[] = APPLICATION_PATH \"/../library/Smarty/sysplugins\"\n+resources.smarty.plugins[] = APPLICATION_PATH \"/../vendor/opensolutions/oss-framework/src/OSS/Smarty/functions\"\n+resources.smarty.plugins[] = APPLICATION_PATH \"/../vendor/smarty/smarty/libs/plugins\"\n+resources.smarty.plugins[] = APPLICATION_PATH \"/../vendor/smarty/smarty/libs/sysplugins\"\n```\n\n\n\n\n\n\nChange Doctrine2 options as follows:\n\n\n```\n-resources.doctrine2cache.path               = \"/usr/share/php/Doctrine/ORM\"\n-resources.doctrine2cache.autoload_method    = \"pear\"\n+resources.doctrine2cache.autoload_method    = \"composer\"\n+resources.doctrine2cache.namespace          = 'ixp4'\n\n\n-resources.doctrine2.models_path        = APPLICATION_PATH\n-resources.doctrine2.proxies_path       = APPLICATION_PATH \"/Proxies\"\n-resources.doctrine2.repositories_path  = APPLICATION_PATH\n-resources.doctrine2.xml_schema_path    = APPLICATION_PATH \"/../doctrine/schema\"\n+resources.doctrine2.models_path        = APPLICATION_PATH \"/../database\"\n+resources.doctrine2.proxies_path       = APPLICATION_PATH \"/../database/Proxies\"\n+resources.doctrine2.repositories_path  = APPLICATION_PATH \"/../database\"\n+resources.doctrine2.xml_schema_path    = APPLICATION_PATH \"/../database/xml\"\n```\n\n\n\n\n\n\nUpdate the Database Schema\n\n\nView the required changes with:\n\n\n./artisan doctrine:schema:update --sql\n\n\n\n\nAnd apply with:\n\n\n./artisan doctrine:schema:update --force\n\n\n\n\nApache\n\n\nAlias /ixp4 /srv/ixp4/public\n\nDirectory /srv/ixp4/public\n\n    Options FollowSymLinks\n    AllowOverride None\n    Require all granted\n\n    SetEnv APPLICATION_ENV production\n\n    RewriteEngine On\n    RewriteCond %{REQUEST_FILENAME} -s [OR]\n    RewriteCond %{REQUEST_FILENAME} -l [OR]\n    RewriteCond %{REQUEST_FILENAME} -d\n    RewriteRule ^.*$ - [NC,L]\n    RewriteRule ^.*$ /ixp4/index.php [NC,L]\n\n/Directory\n\n\n\n\n\nFile System Permissions\n\n\nchown -R www-data: var/ storage/ bootstrap/cache\n\n\n\n\nMRTG Graphing Migration\n\n\nWe've implemented a new graphing backend called :ref:\nfeatures-graphing\n. One of the changes is that the graphing directory structure and filenaming conventions have changed. Primarily, we've replaced non-static handles (such as database fields like \ncustomer.shortname\n or \nphysicalinterface.minitorindex\n or \nswitcher.name\n with immutable primary keys).\n\n\nAs such, you need to both rename the statistics structure and regenerate the configuration. \nIt is strongly recommended you copy your existing files and do this in parallel or, at least keep a backup.\n Also, stop the MRTG daemon before starting.\n\n\nExample\n\n\nFirst, you'll need to update your local configuration in \n.env\n by setting something like:\n\n\nGRAPHER_BACKENDS=\nmrtg\n\nGRAPHER_BACKEND_MRTG_LOGDIR=\n/path/to/mrtg/data\n\nGRAPHER_BACKEND_MRTG_WORKDIR=\n/path/to/mrtg/data\n\nGRAPHER_CACHE_ENABLED=true\n\n\n\n\nSee the \nGrapher\n documentation for full details.\n\n\nYou'll then need to migrate all your MRTG files to the new naming scheme:\n\n\n# set a variable for what will become the 'old' files for convenience\nOLDMRTG=/home/old\n\n# v3 MRTG directory is /home/mrtg. let's move it out of the way\nmv /home/mrtg $OLDMRTG\n\n# position ourselves in the IXP Manager root directory\ncd /path/to/ixp4\n\n# stop mrtg\nservice mrtg stop  # or as appropriate for your platform\n\n# migrate IXP graphs\nphp artisan grapher:backend:mrtg:upgrade mv -L $OLDMRTG -X | sh\n\n# migrate infrastructure graphs\nphp artisan grapher:backend:mrtg:upgrade mv -L $OLDMRTG -I | sh\n\n# migrate switch graphs\nphp artisan grapher:backend:mrtg:upgrade mv -L $OLDMRTG -S | sh\n\n# migrate trunk graphs and configuration\nphp artisan grapher:backend:mrtg:upgrade mv -L $OLDMRTG -T | sh\nphp artisan grapher:backend:mrtg:upgrade migrate-trunk-config --no-backup\n\n# create member directories\nphp artisan grapher:backend:mrtg:upgrade mkdir -L $OLDMRTG -M | sh\n\n# migrate member physical interface graphs\nphp artisan grapher:backend:mrtg:upgrade mv -L $OLDMRTG -P | sh\n\n# migrate member LAG graphs\nphp artisan grapher:backend:mrtg:upgrade mv -L $OLDMRTG -Q | sh\n\n# migrate member aggregate graphs\nphp artisan grapher:backend:mrtg:upgrade mv -L $OLDMRTG -C | sh\n\n# regenerate mrtg configuration\nphp artisan grapher:generate-configuration -B mrtg \n path/to/mrtg.conf\n\n# start mrtg\nservice mrtg start  # or as appropriate for your platform", 
            "title": "Upgrade From v3"
        }, 
        {
            "location": "/install/upgrade-v3/#upgrade-from-v3", 
            "text": "To upgrade from IXP Manager v3, you must install v4 in parallel and then switch over by adjusting your Apache configuration to the new v4 directory (or just move v3 out of the way and replace it with v4).  THESE ARE DRAFT NOTES FROM A TEST UPGRADE. THESE WILL BE FLESHED OUT SOON.", 
            "title": "Upgrade From v3"
        }, 
        {
            "location": "/install/upgrade-v3/#duplicating-the-database", 
            "text": "As we're installing in parallel, we want to duplicate the database as follows. When granting permissions on the new database, use your existing IXP Manager database credentials for ease of configuration.  mysql -u root -pXXX -e 'CREATE DATABASE ixp4 CHARACTER SET =  utf8mb4  COLLATE =  utf8mb4_unicode_ci ;'\nmysqldump -u root -pXXX ixp | mysql -u root -pXXX ixp4\nmysql -u root -pXXX -e 'GRANT ALL ON ixp4.* TO `ixp`@`localhost` IDENTIFIED BY  YYY ;'\n# and test:\nmysql -u ixp -pYYY -h localhost ixp4", 
            "title": "Duplicating the Database"
        }, 
        {
            "location": "/install/upgrade-v3/#get-the-ixp-manager-source", 
            "text": "The code for IXP Manager is maintained on GitHub and the canonical repository is  inex/IXP-Manager .  Log into the server where you wish to install IXP Manager. Move to the directory where you wish to store the source. Note that it should not be checked out into any web exposed directory (e.g. do not checkout to  /var/www ). In my case, I'm going to use  /srv/ixp  which will be referred to as  $IXPROOT  below. So I:  cd /usr/local\ngit clone https://github.com/inex/IXP-Manager.git ixp4  You now need to create the text file  $IXPROOT/.env  containing database details from above:  DB_HOST=localhost\nDB_DATABASE=ixp4\nDB_USERNAME=ixp\nDB_PASSWORD=XXX  And then run:  composer update\nbower update", 
            "title": "Get the IXP Manager Source"
        }, 
        {
            "location": "/install/upgrade-v3/#initial-configuration-tasks", 
            "text": "", 
            "title": "Initial Configuration Tasks"
        }, 
        {
            "location": "/install/upgrade-v3/#new-local-settings-configuration-laravel", 
            "text": "As v4 is a version in migration from older libraries like Zend Framework to Laravel, we need to do a bit of setup for both frameworks. First Laravel: we'll essentially set defaults in  $IXPROOT/.env  which will be used by files in  $IXPROOT/config . Feel free to look at those files and add  .env  parameters to suit your own environment.  First, the application key needs to be set and unique. Execute the following command and you should see a similar output (but a different key):  php artisan key:generate\nApplication key [XjWtsiPl_CHANGE_ME_CHANGE_ME] set successfully.  Add the APP_KEY to the  .env  file by copying the key above:  APP_KEY=XjWtsiPl_CHANGE_ME_CHANGE_ME  NB: Where possible, place local changes into  .env  rather than changing the config files as these files are under version control. See  Laravel's documentation on this  and email the mailing list for help.  Here are some hints on what you might want to set:   config/app.php  Set:  APP_URL  in  $IXPROOT/.env .  config/cache.php  Either leave  CACHE_DRIVER  as  file  or set otherwise in  $IXPROOT/.env .  config/identity.php  Copy  config/identity.php.dist  to  config/identity.php  and edit for your IXP  (essentially copy from your v3 application/configs/application.ini) .  config/mail.php  Set appropriate options for mail relay. Specifically  MAIL_DRIVER ,  MAIL_HOST  and  MAIL_PORT .", 
            "title": "New Local Settings / Configuration (Laravel)"
        }, 
        {
            "location": "/install/upgrade-v3/#migrate-old-zend-framework-settings", 
            "text": "Copy your IXP v3  application/configs/application.ini  file to your new v4  application/configs  and edit as follows:    Change the database name:  -resources.doctrine2.connection.options.dbname   = 'ixp'\n+resources.doctrine2.connection.options.dbname   = 'ixp4'    Change paths as follows:  ```\n-includePaths.osssnmp    = APPLICATION_PATH \"/../library/OSS_SNMP.git\"\n-includePaths.osslibrary = APPLICATION_PATH \"/../library/OSS-Framework.git\"\n+includePaths.osslibrary = APPLICATION_PATH \"/../vendor/opensolutions/oss-framework/src/\"  -pluginPaths.OSS_Resource = APPLICATION_PATH \"/../library/OSS-Framework.git/OSS/Resource\"\n+pluginPaths.OSS_Resource = APPLICATION_PATH \"/../vendor/opensolutions/oss-framework/src/OSS/Resource\"  -resources.smarty.plugins[] = APPLICATION_PATH \"/../library/OSS-Framework.git/OSS/Smarty/functions\"\n-resources.smarty.plugins[] = APPLICATION_PATH \"/../library/Smarty/plugins\"\n-resources.smarty.plugins[] = APPLICATION_PATH \"/../library/Smarty/sysplugins\"\n+resources.smarty.plugins[] = APPLICATION_PATH \"/../vendor/opensolutions/oss-framework/src/OSS/Smarty/functions\"\n+resources.smarty.plugins[] = APPLICATION_PATH \"/../vendor/smarty/smarty/libs/plugins\"\n+resources.smarty.plugins[] = APPLICATION_PATH \"/../vendor/smarty/smarty/libs/sysplugins\"\n```    Change Doctrine2 options as follows:  ```\n-resources.doctrine2cache.path               = \"/usr/share/php/Doctrine/ORM\"\n-resources.doctrine2cache.autoload_method    = \"pear\"\n+resources.doctrine2cache.autoload_method    = \"composer\"\n+resources.doctrine2cache.namespace          = 'ixp4'  -resources.doctrine2.models_path        = APPLICATION_PATH\n-resources.doctrine2.proxies_path       = APPLICATION_PATH \"/Proxies\"\n-resources.doctrine2.repositories_path  = APPLICATION_PATH\n-resources.doctrine2.xml_schema_path    = APPLICATION_PATH \"/../doctrine/schema\"\n+resources.doctrine2.models_path        = APPLICATION_PATH \"/../database\"\n+resources.doctrine2.proxies_path       = APPLICATION_PATH \"/../database/Proxies\"\n+resources.doctrine2.repositories_path  = APPLICATION_PATH \"/../database\"\n+resources.doctrine2.xml_schema_path    = APPLICATION_PATH \"/../database/xml\"\n```", 
            "title": "Migrate Old Zend Framework Settings"
        }, 
        {
            "location": "/install/upgrade-v3/#update-the-database-schema", 
            "text": "View the required changes with:  ./artisan doctrine:schema:update --sql  And apply with:  ./artisan doctrine:schema:update --force", 
            "title": "Update the Database Schema"
        }, 
        {
            "location": "/install/upgrade-v3/#apache", 
            "text": "Alias /ixp4 /srv/ixp4/public Directory /srv/ixp4/public \n    Options FollowSymLinks\n    AllowOverride None\n    Require all granted\n\n    SetEnv APPLICATION_ENV production\n\n    RewriteEngine On\n    RewriteCond %{REQUEST_FILENAME} -s [OR]\n    RewriteCond %{REQUEST_FILENAME} -l [OR]\n    RewriteCond %{REQUEST_FILENAME} -d\n    RewriteRule ^.*$ - [NC,L]\n    RewriteRule ^.*$ /ixp4/index.php [NC,L] /Directory", 
            "title": "Apache"
        }, 
        {
            "location": "/install/upgrade-v3/#file-system-permissions", 
            "text": "chown -R www-data: var/ storage/ bootstrap/cache", 
            "title": "File System Permissions"
        }, 
        {
            "location": "/install/upgrade-v3/#mrtg-graphing-migration", 
            "text": "We've implemented a new graphing backend called :ref: features-graphing . One of the changes is that the graphing directory structure and filenaming conventions have changed. Primarily, we've replaced non-static handles (such as database fields like  customer.shortname  or  physicalinterface.minitorindex  or  switcher.name  with immutable primary keys).  As such, you need to both rename the statistics structure and regenerate the configuration.  It is strongly recommended you copy your existing files and do this in parallel or, at least keep a backup.  Also, stop the MRTG daemon before starting.", 
            "title": "MRTG Graphing Migration"
        }, 
        {
            "location": "/install/upgrade-v3/#example", 
            "text": "First, you'll need to update your local configuration in  .env  by setting something like:  GRAPHER_BACKENDS= mrtg \nGRAPHER_BACKEND_MRTG_LOGDIR= /path/to/mrtg/data \nGRAPHER_BACKEND_MRTG_WORKDIR= /path/to/mrtg/data \nGRAPHER_CACHE_ENABLED=true  See the  Grapher  documentation for full details.  You'll then need to migrate all your MRTG files to the new naming scheme:  # set a variable for what will become the 'old' files for convenience\nOLDMRTG=/home/old\n\n# v3 MRTG directory is /home/mrtg. let's move it out of the way\nmv /home/mrtg $OLDMRTG\n\n# position ourselves in the IXP Manager root directory\ncd /path/to/ixp4\n\n# stop mrtg\nservice mrtg stop  # or as appropriate for your platform\n\n# migrate IXP graphs\nphp artisan grapher:backend:mrtg:upgrade mv -L $OLDMRTG -X | sh\n\n# migrate infrastructure graphs\nphp artisan grapher:backend:mrtg:upgrade mv -L $OLDMRTG -I | sh\n\n# migrate switch graphs\nphp artisan grapher:backend:mrtg:upgrade mv -L $OLDMRTG -S | sh\n\n# migrate trunk graphs and configuration\nphp artisan grapher:backend:mrtg:upgrade mv -L $OLDMRTG -T | sh\nphp artisan grapher:backend:mrtg:upgrade migrate-trunk-config --no-backup\n\n# create member directories\nphp artisan grapher:backend:mrtg:upgrade mkdir -L $OLDMRTG -M | sh\n\n# migrate member physical interface graphs\nphp artisan grapher:backend:mrtg:upgrade mv -L $OLDMRTG -P | sh\n\n# migrate member LAG graphs\nphp artisan grapher:backend:mrtg:upgrade mv -L $OLDMRTG -Q | sh\n\n# migrate member aggregate graphs\nphp artisan grapher:backend:mrtg:upgrade mv -L $OLDMRTG -C | sh\n\n# regenerate mrtg configuration\nphp artisan grapher:generate-configuration -B mrtg   path/to/mrtg.conf\n\n# start mrtg\nservice mrtg start  # or as appropriate for your platform", 
            "title": "Example"
        }, 
        {
            "location": "/features/routers/", 
            "text": "Routers\n\n\nNote that a number of pages redirect here where we have collated documentation on route collectors, route servers, AS112 servcies and IRRDB filtering.\n\n\nIXP Manager can generate router configuration for typical IXP services such as route collectors, route servers and AS112 services. How this is done has been changed significantly from v3 to v4.\n\n\n\n\nNote that until officially deprecated, the older v3 methods still work and the \nofficial v3 documentation\n should be referenced for that.\n\n\n\n\nConfiguration Overview\n\n\nThe basic elements of \na router\n are configured in \nconfigs/routers.php\n. This is an optional file that is not included in version control so the best way to start it is to copy from the template:\n\n\ncp config/routers.php.dist config/routers.php\n\n\n\n\nA typical entry of a sample router (in standard PHP associative array syntax) is:\n\n\n?php\n    'rc1-lan1-ipv4' =\n [\n        'vlan_id'    =\n 1,\n        'protocol'   =\n 4,\n        'type'       =\n 'RC',   // RC|RS|AS112?\n        'name'       =\n 'INEX LAN1 - Route Collector - IPv4',\n        'shortname'  =\n 'RC1 - LAN1 - IPv4',\n        'router_id'  =\n '192.0.2.8',\n        'peering_ip' =\n '192.0.2.8',\n        'asn'        =\n 65500,\n        'software'   =\n 'bird',\n        'mgmt_ip'    =\n '203.0.113.8',\n        'api'        =\n 'http://rc1-lan1-ipv4.mgmt.example.com/api',\n        'api_type'   =\n 'birdseye',\n        'lg_access'  =\n Entities\\User::AUTH_PUBLIC,\n        'quarantine' =\n false,\n        'bgp_lc'     =\n false,\n        'template'   =\n 'api/v4/router/collector/bird/standard',\n    ],\n\n\n\n\nwhere:\n\n\n\n\nrc1-lan1-ipv4\n is the \nhandle\n for this router to be used in API calls later (it's the key of the PHP associative array).\n\n\nvlan_id\n is not the VLAN 802.1q tag number but the \nvlan.id\n database column. You can get this, for example, by hovering over the edit action in the VLAN listing in IXP Manager and finding the number in the URL.\n\n\nprotocol\n is either \n4\n (IPv4) or \n6\n (IPv6). Any other value will lead to a runtime exception.\n\n\nwe have currently defined three types which are used for grouping routers in the UI and for other selection purposes:\n\n\nRC\n - route collector;\n\n\nRS\n - route server;\n\n\nAS112\n - an AS112 BGP peer (see \nINEX's AS112 documentation\n as an example).\n\n\nname\n - name / description of the router's purpose.\n\n\nshortname\n - used in dropdowns or other space constrained areas where \nname\n may be too long.\n\n\nrouter_id\n - the router's BGP ID (e.g. \n192.0.2.8\n).\n\n\npeering_ip\n - the IPv4/6 address that this router initiates BGP peering sessions from.\n\n\nasn\n - the router's AS number.\n\n\nsoftware\n - there is no specific use for this as yet.\n\n\nmgmt_ip\n - the IP to address this server / router at for management functions such as Nagios monitoring.\n\n\napi\n and \napi_type\n - the API end point for this server/router. The only use case for this so far is for the built-in \nlooking glass\n functionality via \nBirdseye\n.\n\n\nlg_access\n - who should be allow access the looking glass. One of:\n\n\nAUTH_PUBLIC\n - publicly available to all;\n\n\nAUTH_CUSTUSER\n - must be logged into IXP Manager as any user;\n\n\nAUTH_SUPERUSER\n - must be logged into IXP Manager as an administrator (no customer access).\n\n\nquarantine\n - a flag to indicate if this router is part of the IXP's quarantine / test infrastructure. For example, INEX runs two parallel route collectors: one quarantine and one production. When customers have issues or are being provisioned, they are placed in the quarantine LAN and we can examine BGP announcements safely on the non-production quarantine devices. When a router is marked as quarantine, it is only visible in looking glass dropdowns to customers who also have a port in quarantine (physical interface status).\n\n\nbgp_lc\n - a flag to indicate if the router supports \nRFC8092\n / \nlarge BGP communities\n.\n\n\ntemplate\n - the template to use to generate the configuration. See stock examples \nhere\n (and note that \nskinning\n is supported).\n\n\n\n\nTypically your \nrouters.php\n file would hold multiple such entries. It is our intention to move this into the UI and database.\n\n\nGeneration Overview\n\n\nThe simplest configuration to generate is the route collector configuration. A route collector is an IXP router which serves only to \naccept all routes and export no routes\n. It is used for problem diagnosis, to aid customer monitoring and for looking glasses (see \nINEX's here\n.\n\n\nThe \nstandard configuration\n simply pulls in a fairly standard header (sets up router ID, listening address and - for the collector at least - some unused filters) and creates a session for all customer routers on the given VLAN (see \nvlan_id\n above).\n\n\nIn the above example, the route handle is the array's associative key (\nrc1-lan1-ipv4\n) and - for the given router handle - the configuration can be generated via:\n\n\n# The key is generated in IXP Manager via the top right menu: *My Account -\n API Keys*\nKEY=\nyour-admin-ixp-manager-api-key\n\n# The base URL of your IXP Manager install plus: 'api/v4/router/gen_config'\nURL=\nhttps://ixp.example.com/api/v4/router/gen_config\n\n# The handle is the PHP associative key from `config/routers.php` as described above\nHANDLE=\nrc1-lan1-ipv4\n\n# Then the complete URL is formed as:\ncurl --fail -s -H \nX-IXP-Manager-API-Key: ${KEY}\n ${URL}/${HANDLE} \n${HANDLE}.conf\n\n\n\n\nConfigurations for the route server and AS112 templates can be configured just as easily. The stock templates for both are secure and well tested and can be used by setting the \ntemplate\n element of the router configuration above to the following:\n\n\n\n\nAS112: \n'api/v4/router/as112/bird/standard'\n\n\nRoute Server: \n'api/v4/router/server/bird/standard'\n\n\n\n\nWe also provide sample scripts for automating the re-configuration of these services by cron. See the \n-v4\n scripts \nin this directory\n. These are quite robust and have been in production for ~3 years at INEX (as of Jan 2017).\n\n\nRoute Servers\n\n\nNormally on a peering exchange, all connected parties will establish bilateral peering relationships with each other customer connected to the exchange. As the number of connected parties increases, it becomes increasingly more difficult to manage peering relationships with customers of the exchange.\n\n\nHowever, by using a route servers for peering relationships, the number of BGP sessions per router stays at two: one for each route server (assuming a resilient set up). Clearly this is a more sustainable way of maintaining IXP peering relationships with a large number of participants.\n\n\nYou will have learnt above how to automatically generate route server configurations. This section goes into a bit more specific detail on INEX's route server configuration (shipped with IXP Manager) and why it's safe to use.\n\n\nThe features of the route server configurations that we generate include:\n\n\n\n\nfull prefix filtering based on IRRDB entries (can be disabled on a per member basis if required);\n\n\nfull origin ASN filtering based on IRRDB entries (can be disabled on a per member basis if required);\n\n\nin all cases, prefix filtering for IPv4 and v6 based on the IANA special purpose registries (also known as bogon lists);\n\n\nensuring next hop is the neighbor address to ensure no next hop hijacking;\n\n\nmax prefix limits;\n\n\nmultiple VLAN interfaces for a single member supported;\n\n\nlarge BGP communities supported;\n\n\na decade of production use and experience.\n\n\n\n\nThere are \nsome old notes on route server testing here\n which may also be useful.\n\n\nIRRDB Prefixes and ASN Filtering\n\n\nIXP Manager can maintain a list of member route:/route6: prefixes and origin ASNs as registered in IRRDBs in its database and then use these to, for example, generate strict inbound filters on route servers.\n\n\nPrerequisite:\n you need to have set up some IRRDB sources (e.g. RIPE's whois service) under the \nIXP Admin Actions / IRRDB Configuration\n on the left hand side menu. There is a database seeder to install some to start you off via the following (but thius is typically done during installation):\n\n\n./artisan db:seed --class=IRRDBs\n\n\n\n\nBGPQ3 is a very easy and fast way of querying IRRDBs. You first need to install this on your system. Then configure the path to it in \nconfig/ixp_tools.php\n. If you have not used this file before, you'll need to create your own local copy as follows:\n\n\ncp config/config/ixp_tools.php.dist config/config/ixp_tools.php\n\n\n\n\nThen set the full call path for \nbgpq3\n in this file:\n\n\n?php\n\n  'irrdb' =\n [\n        'bgpq' =\n [\n            'path' =\n '/path/to/bgpq3',\n        ],\n    ],\n\n\n\n\nTo populate (and update) your local IRRDB, run the following commands (changing the path as appropriate):\n\n\n/srv/ixpmanager/artisan irrdb:update-prefix-db\n/srv/ixpmanager/artisan irrdb:update-asn-db\n\n\n\n\nThese should be added to cron to run ~once per day (using the --quiet flag).\n\n\nThere are four levels of verbosity:\n\n\n\n\n-quiet\n: no output unless there's an error / issue.\n\n\nno option: simple stats on each customer's update results.\n\n\n-vv\n: include per customer and overall timings (database, processing and network).\n\n\n-vvv\n (debug): show prefixes/ASNs added remove also.\n\n\n\n\nYou can also specify a specific customer to update (rather than all) with an additional free form parameter. The database is searched for a matching customer in the order: customer ASN; customer ID (database primary key); and customer shortname. E.g.:\n\n\n/srv/ixpmanager/artisan irrdb:update-prefix-db 64511\n\n\n\n\nThe IRRDB update commands will:\n\n\n\n\niterate over all route server client customers for IPv4 and IPv6 (unless a specific customer is specified);\n\n\nuse the appropriate AS macro or ASN;\n\n\nquery the RADB against the appropriate source set for that customer;\n\n\ncompare prefixes(/ASNs) in the database already (if any) against RADB and insert / delete as appropriate;\n\n\nvalidate the prefix for proper CIDR notation before database inserts;\n\n\nupdate the last_seen time for all prefixes(/ASNs) for that customer;\n\n\n\n\nWe use transactions to update the database so, even in the middle of a refresh, a full set of prefixes for all customers will still be available.\n\n\nNote that our current implementation only queries RADB as BGPQ3 does not support the RIPE whois protocol.\n Our version will however set the RADB source database according to the member's stated IRRDB database as set on the customer add / edit page - so, for customer's registered with the RIPE IRRDB, the RIPE database of RADB is queried.", 
            "title": "AS112"
        }, 
        {
            "location": "/features/routers/#routers", 
            "text": "Note that a number of pages redirect here where we have collated documentation on route collectors, route servers, AS112 servcies and IRRDB filtering.  IXP Manager can generate router configuration for typical IXP services such as route collectors, route servers and AS112 services. How this is done has been changed significantly from v3 to v4.   Note that until officially deprecated, the older v3 methods still work and the  official v3 documentation  should be referenced for that.", 
            "title": "Routers"
        }, 
        {
            "location": "/features/routers/#configuration-overview", 
            "text": "The basic elements of  a router  are configured in  configs/routers.php . This is an optional file that is not included in version control so the best way to start it is to copy from the template:  cp config/routers.php.dist config/routers.php  A typical entry of a sample router (in standard PHP associative array syntax) is:  ?php\n    'rc1-lan1-ipv4' =  [\n        'vlan_id'    =  1,\n        'protocol'   =  4,\n        'type'       =  'RC',   // RC|RS|AS112?\n        'name'       =  'INEX LAN1 - Route Collector - IPv4',\n        'shortname'  =  'RC1 - LAN1 - IPv4',\n        'router_id'  =  '192.0.2.8',\n        'peering_ip' =  '192.0.2.8',\n        'asn'        =  65500,\n        'software'   =  'bird',\n        'mgmt_ip'    =  '203.0.113.8',\n        'api'        =  'http://rc1-lan1-ipv4.mgmt.example.com/api',\n        'api_type'   =  'birdseye',\n        'lg_access'  =  Entities\\User::AUTH_PUBLIC,\n        'quarantine' =  false,\n        'bgp_lc'     =  false,\n        'template'   =  'api/v4/router/collector/bird/standard',\n    ],  where:   rc1-lan1-ipv4  is the  handle  for this router to be used in API calls later (it's the key of the PHP associative array).  vlan_id  is not the VLAN 802.1q tag number but the  vlan.id  database column. You can get this, for example, by hovering over the edit action in the VLAN listing in IXP Manager and finding the number in the URL.  protocol  is either  4  (IPv4) or  6  (IPv6). Any other value will lead to a runtime exception.  we have currently defined three types which are used for grouping routers in the UI and for other selection purposes:  RC  - route collector;  RS  - route server;  AS112  - an AS112 BGP peer (see  INEX's AS112 documentation  as an example).  name  - name / description of the router's purpose.  shortname  - used in dropdowns or other space constrained areas where  name  may be too long.  router_id  - the router's BGP ID (e.g.  192.0.2.8 ).  peering_ip  - the IPv4/6 address that this router initiates BGP peering sessions from.  asn  - the router's AS number.  software  - there is no specific use for this as yet.  mgmt_ip  - the IP to address this server / router at for management functions such as Nagios monitoring.  api  and  api_type  - the API end point for this server/router. The only use case for this so far is for the built-in  looking glass  functionality via  Birdseye .  lg_access  - who should be allow access the looking glass. One of:  AUTH_PUBLIC  - publicly available to all;  AUTH_CUSTUSER  - must be logged into IXP Manager as any user;  AUTH_SUPERUSER  - must be logged into IXP Manager as an administrator (no customer access).  quarantine  - a flag to indicate if this router is part of the IXP's quarantine / test infrastructure. For example, INEX runs two parallel route collectors: one quarantine and one production. When customers have issues or are being provisioned, they are placed in the quarantine LAN and we can examine BGP announcements safely on the non-production quarantine devices. When a router is marked as quarantine, it is only visible in looking glass dropdowns to customers who also have a port in quarantine (physical interface status).  bgp_lc  - a flag to indicate if the router supports  RFC8092  /  large BGP communities .  template  - the template to use to generate the configuration. See stock examples  here  (and note that  skinning  is supported).   Typically your  routers.php  file would hold multiple such entries. It is our intention to move this into the UI and database.", 
            "title": "Configuration Overview"
        }, 
        {
            "location": "/features/routers/#generation-overview", 
            "text": "The simplest configuration to generate is the route collector configuration. A route collector is an IXP router which serves only to  accept all routes and export no routes . It is used for problem diagnosis, to aid customer monitoring and for looking glasses (see  INEX's here .  The  standard configuration  simply pulls in a fairly standard header (sets up router ID, listening address and - for the collector at least - some unused filters) and creates a session for all customer routers on the given VLAN (see  vlan_id  above).  In the above example, the route handle is the array's associative key ( rc1-lan1-ipv4 ) and - for the given router handle - the configuration can be generated via:  # The key is generated in IXP Manager via the top right menu: *My Account -  API Keys*\nKEY= your-admin-ixp-manager-api-key \n# The base URL of your IXP Manager install plus: 'api/v4/router/gen_config'\nURL= https://ixp.example.com/api/v4/router/gen_config \n# The handle is the PHP associative key from `config/routers.php` as described above\nHANDLE= rc1-lan1-ipv4 \n# Then the complete URL is formed as:\ncurl --fail -s -H  X-IXP-Manager-API-Key: ${KEY}  ${URL}/${HANDLE}  ${HANDLE}.conf  Configurations for the route server and AS112 templates can be configured just as easily. The stock templates for both are secure and well tested and can be used by setting the  template  element of the router configuration above to the following:   AS112:  'api/v4/router/as112/bird/standard'  Route Server:  'api/v4/router/server/bird/standard'   We also provide sample scripts for automating the re-configuration of these services by cron. See the  -v4  scripts  in this directory . These are quite robust and have been in production for ~3 years at INEX (as of Jan 2017).", 
            "title": "Generation Overview"
        }, 
        {
            "location": "/features/routers/#route-servers", 
            "text": "Normally on a peering exchange, all connected parties will establish bilateral peering relationships with each other customer connected to the exchange. As the number of connected parties increases, it becomes increasingly more difficult to manage peering relationships with customers of the exchange.  However, by using a route servers for peering relationships, the number of BGP sessions per router stays at two: one for each route server (assuming a resilient set up). Clearly this is a more sustainable way of maintaining IXP peering relationships with a large number of participants.  You will have learnt above how to automatically generate route server configurations. This section goes into a bit more specific detail on INEX's route server configuration (shipped with IXP Manager) and why it's safe to use.  The features of the route server configurations that we generate include:   full prefix filtering based on IRRDB entries (can be disabled on a per member basis if required);  full origin ASN filtering based on IRRDB entries (can be disabled on a per member basis if required);  in all cases, prefix filtering for IPv4 and v6 based on the IANA special purpose registries (also known as bogon lists);  ensuring next hop is the neighbor address to ensure no next hop hijacking;  max prefix limits;  multiple VLAN interfaces for a single member supported;  large BGP communities supported;  a decade of production use and experience.   There are  some old notes on route server testing here  which may also be useful.", 
            "title": "Route Servers"
        }, 
        {
            "location": "/features/routers/#irrdb-prefixes-and-asn-filtering", 
            "text": "IXP Manager can maintain a list of member route:/route6: prefixes and origin ASNs as registered in IRRDBs in its database and then use these to, for example, generate strict inbound filters on route servers.  Prerequisite:  you need to have set up some IRRDB sources (e.g. RIPE's whois service) under the  IXP Admin Actions / IRRDB Configuration  on the left hand side menu. There is a database seeder to install some to start you off via the following (but thius is typically done during installation):  ./artisan db:seed --class=IRRDBs  BGPQ3 is a very easy and fast way of querying IRRDBs. You first need to install this on your system. Then configure the path to it in  config/ixp_tools.php . If you have not used this file before, you'll need to create your own local copy as follows:  cp config/config/ixp_tools.php.dist config/config/ixp_tools.php  Then set the full call path for  bgpq3  in this file:  ?php\n\n  'irrdb' =  [\n        'bgpq' =  [\n            'path' =  '/path/to/bgpq3',\n        ],\n    ],  To populate (and update) your local IRRDB, run the following commands (changing the path as appropriate):  /srv/ixpmanager/artisan irrdb:update-prefix-db\n/srv/ixpmanager/artisan irrdb:update-asn-db  These should be added to cron to run ~once per day (using the --quiet flag).  There are four levels of verbosity:   -quiet : no output unless there's an error / issue.  no option: simple stats on each customer's update results.  -vv : include per customer and overall timings (database, processing and network).  -vvv  (debug): show prefixes/ASNs added remove also.   You can also specify a specific customer to update (rather than all) with an additional free form parameter. The database is searched for a matching customer in the order: customer ASN; customer ID (database primary key); and customer shortname. E.g.:  /srv/ixpmanager/artisan irrdb:update-prefix-db 64511  The IRRDB update commands will:   iterate over all route server client customers for IPv4 and IPv6 (unless a specific customer is specified);  use the appropriate AS macro or ASN;  query the RADB against the appropriate source set for that customer;  compare prefixes(/ASNs) in the database already (if any) against RADB and insert / delete as appropriate;  validate the prefix for proper CIDR notation before database inserts;  update the last_seen time for all prefixes(/ASNs) for that customer;   We use transactions to update the database so, even in the middle of a refresh, a full set of prefixes for all customers will still be available.  Note that our current implementation only queries RADB as BGPQ3 does not support the RIPE whois protocol.  Our version will however set the RADB source database according to the member's stated IRRDB database as set on the customer add / edit page - so, for customer's registered with the RIPE IRRDB, the RIPE database of RADB is queried.", 
            "title": "IRRDB Prefixes and ASN Filtering"
        }, 
        {
            "location": "/features/contact-groups/", 
            "text": "Contact Groups\n\n\nContacts can now be assigned to multiple arbitrary groups.\n\n\nActivating the Configuration\n\n\nYour database will already be set-up via the database seeds during installation.\n\n\nTo activate this feature, you just need to create the configuration file. From the root directory of IXP Manager just::\n\n\ncp config/contact_group.php.dist config/contact_group.php\n\n\n\n\nCreating / Editing / Deleting Groups\n\n\nA group is defined by:\n\n\n\n\na name (e.g. beer);\n\n\na type (e.g. Likes); and\n\n\na description (e.g. Contacts in this group like to drink beer).\n\n\n\n\nYou define the group types in \nconfig/contact_group.php\n.\n\n\nIn these examples, \nROLE\n will be entered in the database column and \nRole\n will be displayed in the interface.\n\n\nGroups can then be added / edited / deleted via \nhttps://www.example/com/ixp-manager/contact-group\n. This can be reached by clicking \nContacts\n and then \nContact Groups\n in the left menu.\n\n\nAssigning Contacts to Groups\n\n\nAssigning contacts to groups is done in the contact add / edit page.\n\n\nExporting Contact Groups\n\n\nContact groups can be exported using the \nixptool.php\n command, for example::\n\n\nbin/ixptool.php -a cli.cli-export-group -p type=ROLE,format=csv,cid=1\n\n\n\n\nwhere the possible comma separated parameters are:\n\n\n\n\ntype=XXX\n: Contact group type (e.g. ROLE); or\n\n\n\n\nname=XXX\n: Contact group name (e.g. beer).\n\n\n\n\n\n\nformat=XXX\n: Output format - one of json (default) or csv\n\n\n\n\nsn\n: Customer shortname to limit results to; or\n\n\ncid\n: Customer id to limit results to.\n\n\n\n\nSpecial Group: \nRoles\n\n\nThe default sample configuration file (\nconfig/contact_group.php\n) and the database seeds create a \nROLE\n group type populated with groups \nAdmin\n, \nBilling\n, \nTechnical\n and \nMarketing\n. There is a dedicated form element when editing contacts for any groups defined in the Role type.\n\n\nIf the role type is removed from the configuration, the form element for the contact's roles will not be shown.", 
            "title": "Contact Groups"
        }, 
        {
            "location": "/features/contact-groups/#contact-groups", 
            "text": "Contacts can now be assigned to multiple arbitrary groups.", 
            "title": "Contact Groups"
        }, 
        {
            "location": "/features/contact-groups/#activating-the-configuration", 
            "text": "Your database will already be set-up via the database seeds during installation.  To activate this feature, you just need to create the configuration file. From the root directory of IXP Manager just::  cp config/contact_group.php.dist config/contact_group.php", 
            "title": "Activating the Configuration"
        }, 
        {
            "location": "/features/contact-groups/#creating-editing-deleting-groups", 
            "text": "A group is defined by:   a name (e.g. beer);  a type (e.g. Likes); and  a description (e.g. Contacts in this group like to drink beer).   You define the group types in  config/contact_group.php .  In these examples,  ROLE  will be entered in the database column and  Role  will be displayed in the interface.  Groups can then be added / edited / deleted via  https://www.example/com/ixp-manager/contact-group . This can be reached by clicking  Contacts  and then  Contact Groups  in the left menu.", 
            "title": "Creating / Editing / Deleting Groups"
        }, 
        {
            "location": "/features/contact-groups/#assigning-contacts-to-groups", 
            "text": "Assigning contacts to groups is done in the contact add / edit page.", 
            "title": "Assigning Contacts to Groups"
        }, 
        {
            "location": "/features/contact-groups/#exporting-contact-groups", 
            "text": "Contact groups can be exported using the  ixptool.php  command, for example::  bin/ixptool.php -a cli.cli-export-group -p type=ROLE,format=csv,cid=1  where the possible comma separated parameters are:   type=XXX : Contact group type (e.g. ROLE); or   name=XXX : Contact group name (e.g. beer).    format=XXX : Output format - one of json (default) or csv   sn : Customer shortname to limit results to; or  cid : Customer id to limit results to.", 
            "title": "Exporting Contact Groups"
        }, 
        {
            "location": "/features/contact-groups/#special-group-roles", 
            "text": "The default sample configuration file ( config/contact_group.php ) and the database seeds create a  ROLE  group type populated with groups  Admin ,  Billing ,  Technical  and  Marketing . There is a dedicated form element when editing contacts for any groups defined in the Role type.  If the role type is removed from the configuration, the form element for the contact's roles will not be shown.", 
            "title": "Special Group: Roles"
        }, 
        {
            "location": "/features/patch-panels/", 
            "text": "Patch Panels / Cross Connects\n\n\nOne of the more difficult things for an IXP to manage is the sheer volume of patch panels / cross connects they need to manage. We have approached the issue a number of times in IXP Manger but abandoned the attempt every time. Typically our original solutions were over-engineered where all we really needed was something which could replace a spreadsheet per panel.\n\n\nWe believe we have now developed a feature complete and useful means of managing patch panels and associated cross connects.\n\n\nFeatures\n\n\n\n\nAdd / edit patch panels  (which includes cable and connector types).\n\n\nList associated patch panel ports which includes:\n\n\ntheir state (such as available / prewired, awaiting cross connect, connected, awaiting cease, reserved, broken).\n\n\nassociated customer and/or switchport.\n\n\nco-location provider's circuit reference.\n\n\ninternal ticket references.\n\n\nTransition ports from available / prewired to awaiting x-connect to connected to awaiting cease to ceased and then available again.\n\n\nCustomer view of their cross connects.\n\n\nPublic (visible to customers) and private notes per cross connect.\n\n\nAttach public and private files to cross connects (such as test results, completion documents, order forms, etc).\n\n\nMaintain complete history of a patch panel port.\n\n\nGenerate and email LoAs (as PDF) with a URL verification function for co-location providers.\n\n\nGenerate emails for connection and cease requests as well as an email providing full customer view of a cross connect.\n\n\nTypically fibre ports are \nduplex\n ports but there is a growing use of BiDi optics meaning simplex ports. Our implementation treats all ports as simplex but you can mark it as duplex and set its partner port.\n\n\n\n\nDuplex Fibre Ports\n\n\nWe suggest adding fibre ports as two ports per duplex port. I.e. if your patch panel has 12 duplex ports, enter this as 24 ports. When allocating ports later, you can set it as a duplex port and select its \npartner / slave port\n. This will future proof your patch panels for the growing use of bidi optics and other simplex based xWDM fibre solutions.\n\n\nFrom our experience, duplex fibre ports are often identified as their individual strands. For example, \nduplex port 5\n would be referenced as \nF9/F10\n.\n\n\nYour mileage may vary on this but we need to allow this flexibility to cover both use-cases. You always have options however:\n\n\n\n\nyou can change the presentation of how these ports are referenced externally by \nskinning\n the templates.\n\n\nyou have the option to edit emails before they are sent to also present this as you wish.\n\n\nyou can chose to treat duplex ports as single ports rather than doubling them up.\n\n\nwhen you have duplex ports on a patch panel, IXP Manager will provide a duplex view by default with a CSS-based toggle to reveal the typical partner ports.\n\n\nif you think IXP Manager can make this easier, please talk to us. \nBut we cannot cover every use case programatically. We've opted to allow flexibility rather than dictate a particular format.\n\n\n\n\nAdding a Patch Panel\n\n\nThe following image shows a typical \nadd a new patch panel\n form (as of v4.3). You'll note that clicking \nHelp\n provides detailed context aware help messages.\n\n\n\n\nMost of this is self-explanatory but:\n\n\n\n\nBy default, we set the \nColocation Reference\n to the \nPatch Panel Name\n. We are not sure it's a good idea for IXPs to create a second name different to the co-location provider's but this option is available to you. \nSeriously, think about what you are doing here - more references means more confusion!\n The cabinet and cable type is displayed in the list of patch panels so even with obscure data centre references, it should be easy to find what you need.\n\n\nLocation Notes\n: Data centre / co-location providers do a lot of weird, wonderful and strange things! They provide multiple references for a single patch panel (IXP cabinet, MMR, etc.), they get taken over and re-reference everything or even provide no discernable reference. The field is a freetext field that will be included (and parsed as Markdown) in all emails generated by IXP Manager to help you help them identify a patch panel!\n\n\n\n\nIn addition to that, we will also use a cabinets \nU's are counted from top/bottom\n, and a patch panel's \nU position\n and \nmounted at front/rear\n to also create a location description.\n\n When setting the \nNumber of Ports\n, ensure you count duplex fibre ports as \ntwo ports\n. So 12 duplex fibre ports would be entered as 24. When editing a patch panel, this input field represents the number of additional ports you want to add to a patch panel and thus defaults to 0 in that situation.\n\n \nPort Name Prefix\n: This is an optional field intended for use on fibre patch panels. As an example, you may wish to prefix individual fibre strands in a duplex port with F which would mean the name of a duplex port would be displayed as F1/F2.\n* \nChargeable\n: Usually IXPs request their members to come to them and bear the costs of that. However, sometimes a co-location facility may charge the IXP for a half circuit or the IXP may need order and pay for the connection. Setting this only sets the default option when allocating ports to members later. The options are Yes / No / Half / Other.\n\n\nFiltering Patch Panel Ports\n\n\nQuite often, all you are looking for is a free in a particular location (data centre) or cabinet of a particular cable type (UTP / SMF / etc.).\n\n\nIXP Manager makes this easy from the \nPatch Panels\n page via the top right button labeled \nFilter Options\n. When clicked, this yields an advanced search as follows:\n\n\n\n\nCabinets auto-fills when you chose (or change) a location.\n\n\nPatch Panel Port States\n\n\nA patch panel port can have the following states:\n\n\n\n\nAvailable\n: The port is free and available for use.\n\n\nPrewired\n: This is equivalent to available but it means the port is prewired to a given switchport (you set the port when setting the prewired status). This is useful for IXPs that prewire a bunch of ports to avoid remote hands costs / data centre visits.\n\n\nAwaiting Xconnect\n: Port has been assigned to a member and we are awaiting the co-location provider to install the cross connect. In this state, context aware actions such as emailing connection requests, LoA generation and \nSet Connected\n are all available.\n\n\nConnected\n: Connected and in use.\n\n\nAwaiting Cease\n: This connection is no longer required and we are awaiting the end user / co-location provider to cease the connection.\n\n\nCeased\n: You will never see a ceased state. When a cross connect is marked as ceased, it's current state is archived (for history, include files) and the port is reset to \nAvailable\n. We do not revert to \nPrewired\n but an information message is shown to the user to hint this.\n\n\nReserved\n: Useful to mark particular ports as \noff limits\n for whatever reason.\n\n\nBroken\n\n\nOther\n\n\n\n\nFree / Available Ports\n\n\nIXP Manager will colour ports in the \nAvailable\n, \nPrewired\n and \nAwaiting Cease\n states are green allowing an easy visual indication of available ports.\n\n\nPatch Panel Port Lifecycle\n\n\nPatch panel ports start as either \navailable\n or \nprewired\n. The context menu in these states is:\n\n\n\n\n\n\nUnset Prewired\n is available as this port has a \nPrewired\n status. Clicking this reverts it to plain \nAvailable\n and disassociates it from the prewired port.\n\n\nEdit Note...\n is always available and provides a pop up to edit public and private notes associated with the port (current lifecycle - ceased ports have their notes at that time archived and cleared).\n\n\n\n\nThe main lifecycle option here is \nAllocate\n:\n\n\n\n\n\n\n\n\nDescription\n: A one line short description to be shown in the list of patch panel ports. Just enough to help explain the ports purpose. Detailed information should be placed in the notes section. Can also be used to explain a reserved / broken / other port. Note that this is parsed as Markdown. \nNB:\n A description is discouraged for customer ports connected to a switch. The customer name and switch port are the description.\n\n\n\n\n\n\nColocation Circuit Reference\n: this is the reference provided by the colocation provider to uniquely reference this cross connect.\n\n\n\n\n\n\nTicket Reference(s)\n: This is a free text field to be used by IXPs as they wish. The intended use is to enter helpdesk ticket references that relate to this cross connect order.\n\n\n\n\n\n\nDuplex connection?\n: Clicking this allows you to select the slave port for duplex connections.\n\n\n\n\n\n\nSwitch / Switch Port\n / \nCustomer\n: You have a number of options when allocating a port:\n\n\n\n\n\n\nIf the port is pre-wired then the switch / switch port will be set here.\n\n\n\n\nIf you chose a switch port which has been allocated to a customer, then this patch panel port will also be allocated to that customer. The backend logic will detect if this is the case and update the customer field.\n\n\nConversely, if you chose a customer first, the switch / switch port dropdowns will be populated with only that customer's assigned ports.\n\n\nSometimes you will get cross connects that are not intended to be connected to peering switches (e.g. connections to co-located customer equipment, IXP metro connections, etc.). In these cases, just select the customer (and if it's the IXP itself, select the IXP customer) and leave switch / switch port unselected.\n\n\n\n\nIf you need to reset these fields, just click either of the Reset button.\n\n\n\n\n\n\nPatch Panel Port Status\n: when allocating a port, this will allow you to set the state to \nAwaiting Xconnect\n or \nConnected\n.\n\n\n\n\n\n\nPhysical Interface Status\n: this is not depicted above. If the selected switch port has already been assigned to a customer by way of a physical interface, you will have the option to update this here also.\n\n\n\n\n\n\nPublic\n and \nPrivate Notes\n: Public notes are available to the customer. Both fields are interpreted as Markdown.\n\n\n\n\n\n\nChargeable\n: Usually IXPs request their members to come to them and bear the costs of that. However, sometimes a co-location facility may charge the IXP for a half circuit or the IXP may need order and pay for the connection. The options are Yes / No / Half / Other. How individual IXPs use this is up to them.\n\n\n\n\n\n\nInternal Use\n: Marks the port as used by the IXP itself. E.g. metro connections.\n\n\n\n\n\n\nOwned By\n: Useful indication for billing and cease requests. Should represent the contractural owner of the cross connect. One of: Customer, IXP, Service Provider, Data Centre, Other. \nService Provider\n might be a metro provider where they ordered the cross connect.\n\n\n\n\n\n\nOnce a port is allocated, it enters the \nAwaiting XConnect\n / \nConnected\n state and there are additional context menu options available:\n\n\n\n\nThe three lifecycle actions are:\n\n\n\n\nSet Connected\n: updates the status (and allows you to add public/private notes). You next action after this should be \nEmail - Connect\n.\n\n\nSet Awaiting Cease\n: mark the port and pending disconnection. Your next action after this should be \nEmail - Cease\n.\n\n\nSet Ceased\n: this is a \ntransitive state\n in that it doesn't \nstick\n. When you mark a patch panel as ceased, the existing details (including files and notes) are archived as part of the port's history and then port is then cleared and made available again.\n\n\n\n\nFile Attachments\n\n\nOver the lifetime of a cross connect - and particularly when it is being ordered, there may be files exchanges between you and your customers or the colocation provider. These can be added to the patch panel port via the \nAttach File...\n option.\n\n\nThe dialog will dynamically determine the maximum file upload size based on your PHP settings. To alter this, change the following in your server's appropriate \nphp.ini\n:\n\n\n; Maximum allowed size for uploaded files.\nupload_max_filesize = 40M\n\n; Must be greater than or equal to upload_max_filesize\npost_max_size = 40M\n\n\n\n\nPlease search the internet for further help as this is outside the scope of IXP Manager documentation.\n\n\nThe following features apply to file attachments:\n\n\n\n\nthey are archived along with the port history when a cross connect is ceased.\n\n\nthey are stored under \n$IXPROOT/storage/files/ppp\n.\n\n\ntwo files of the same name cannot be uploaded for a single patch panel port.\n\n\nthey can be marked as public or private:\n\n\npublic files are accessible to the customer through their own dashboard.\n\n\npublic files are attached to the \nEmail - Information\n email.\n\n\n\n\nLoA Generation\n\n\nMany co-location providers will not accept a cross connect order without a LoA \n(Letter of Agency/Authority)\n from the party to whom the cross connect is to be delivered (typically the IXP).\n\n\nIXP Manager will generate a PDF LoA to download or include in the emails it generates for you. Here is an example:\n\n\n\n\nYou will need to \nskin\n this yourself to change the legalese, address and contact details and potentially add a logo. See the version INEX uses \nhere\n (which includes and embedded PNG logo).\n\n\nNote that \nDompdf\n is used to turn the HTML template into a PDF and it has some restrictions.\n\n\nYou have two options for generating LoAs (without having IXP Manager email them):\n\n\n\n\nDownload PDF\n: downloads the PDF via your browser.\n\n\nView PDF\n: displays the PDF LoA in your browser (where browser supports it).\n\n\n\n\nLoA Verification\n\n\nThe stock LoA template (and INEX's version) includes a link that allows co-location browsers to click on to verify its veracity.\n\n\nOn successful verification, the end user sees:\n\n\n\n\nEmail Generation\n\n\nIXP Manager allows you to send four emails related to patch panels / cross connects (port status dependent). These are listed below. The Email editor looks as follows:\n\n\n\n\nNote that:\n\n\n\n\nthe option to attach a PDF LoA is a checkbox.\n\n\nthe email is written in Markdown with a preview available. The email is sent as both HTML (from the Markdown) and the plaintext version.\n\n\n\n\nThe four email templates available are:\n\n\n\n\nEmail - Connect\n: Email the customer a request to order a cross connect to the given demarcation points. A LoA is attached as a PDF by default unless you uncheck the box in the email editor.\n\n\nEmail - Cease\n: Email the customer a request to cease a cross connect.\n\n\nEmail - Information\n: Email the customer all details on file about a cross connect. We often get requests for this at INEX and this simplifies the process. The generated email includes:\n\n\nthe standard details regarding port and co-location reference;\n\n\npublic notes;\n\n\npublic files as attachments.\n\n\nEmail - LoA\n: Email a LoA to the customer as attached as a PDF. This is similar to \nEmail - Connect\n but it is more reflective of a typical response to a second request for a LoA.\n\n\n\n\nAll email templates can be \nskinned\n for your own needs. See INEX's example skins \nhere\n.\n\n\nViewing Patch Panel Details and Archives\n\n\nEach patch panel port row has the following button:\n\n\n\n\nThe number in the badge indicates how many historical records are available.\n\n\nClicking on the button yields the following view screen:\n\n\n\n\nDevelopment History\n\n\nThe Patch Panels functionality was developed during Q1 2017 and added in March 2017. This was made possible from sponsorship which enabled us to hire a new full time developer. We are especially grateful to our sponsors - \nplease see them here\n.", 
            "title": "Cross Connects"
        }, 
        {
            "location": "/features/patch-panels/#patch-panels-cross-connects", 
            "text": "One of the more difficult things for an IXP to manage is the sheer volume of patch panels / cross connects they need to manage. We have approached the issue a number of times in IXP Manger but abandoned the attempt every time. Typically our original solutions were over-engineered where all we really needed was something which could replace a spreadsheet per panel.  We believe we have now developed a feature complete and useful means of managing patch panels and associated cross connects.", 
            "title": "Patch Panels / Cross Connects"
        }, 
        {
            "location": "/features/patch-panels/#features", 
            "text": "Add / edit patch panels  (which includes cable and connector types).  List associated patch panel ports which includes:  their state (such as available / prewired, awaiting cross connect, connected, awaiting cease, reserved, broken).  associated customer and/or switchport.  co-location provider's circuit reference.  internal ticket references.  Transition ports from available / prewired to awaiting x-connect to connected to awaiting cease to ceased and then available again.  Customer view of their cross connects.  Public (visible to customers) and private notes per cross connect.  Attach public and private files to cross connects (such as test results, completion documents, order forms, etc).  Maintain complete history of a patch panel port.  Generate and email LoAs (as PDF) with a URL verification function for co-location providers.  Generate emails for connection and cease requests as well as an email providing full customer view of a cross connect.  Typically fibre ports are  duplex  ports but there is a growing use of BiDi optics meaning simplex ports. Our implementation treats all ports as simplex but you can mark it as duplex and set its partner port.", 
            "title": "Features"
        }, 
        {
            "location": "/features/patch-panels/#duplex-fibre-ports", 
            "text": "We suggest adding fibre ports as two ports per duplex port. I.e. if your patch panel has 12 duplex ports, enter this as 24 ports. When allocating ports later, you can set it as a duplex port and select its  partner / slave port . This will future proof your patch panels for the growing use of bidi optics and other simplex based xWDM fibre solutions.  From our experience, duplex fibre ports are often identified as their individual strands. For example,  duplex port 5  would be referenced as  F9/F10 .  Your mileage may vary on this but we need to allow this flexibility to cover both use-cases. You always have options however:   you can change the presentation of how these ports are referenced externally by  skinning  the templates.  you have the option to edit emails before they are sent to also present this as you wish.  you can chose to treat duplex ports as single ports rather than doubling them up.  when you have duplex ports on a patch panel, IXP Manager will provide a duplex view by default with a CSS-based toggle to reveal the typical partner ports.  if you think IXP Manager can make this easier, please talk to us.  But we cannot cover every use case programatically. We've opted to allow flexibility rather than dictate a particular format.", 
            "title": "Duplex Fibre Ports"
        }, 
        {
            "location": "/features/patch-panels/#adding-a-patch-panel", 
            "text": "The following image shows a typical  add a new patch panel  form (as of v4.3). You'll note that clicking  Help  provides detailed context aware help messages.   Most of this is self-explanatory but:   By default, we set the  Colocation Reference  to the  Patch Panel Name . We are not sure it's a good idea for IXPs to create a second name different to the co-location provider's but this option is available to you.  Seriously, think about what you are doing here - more references means more confusion!  The cabinet and cable type is displayed in the list of patch panels so even with obscure data centre references, it should be easy to find what you need.  Location Notes : Data centre / co-location providers do a lot of weird, wonderful and strange things! They provide multiple references for a single patch panel (IXP cabinet, MMR, etc.), they get taken over and re-reference everything or even provide no discernable reference. The field is a freetext field that will be included (and parsed as Markdown) in all emails generated by IXP Manager to help you help them identify a patch panel!   In addition to that, we will also use a cabinets  U's are counted from top/bottom , and a patch panel's  U position  and  mounted at front/rear  to also create a location description.  When setting the  Number of Ports , ensure you count duplex fibre ports as  two ports . So 12 duplex fibre ports would be entered as 24. When editing a patch panel, this input field represents the number of additional ports you want to add to a patch panel and thus defaults to 0 in that situation.   Port Name Prefix : This is an optional field intended for use on fibre patch panels. As an example, you may wish to prefix individual fibre strands in a duplex port with F which would mean the name of a duplex port would be displayed as F1/F2.\n*  Chargeable : Usually IXPs request their members to come to them and bear the costs of that. However, sometimes a co-location facility may charge the IXP for a half circuit or the IXP may need order and pay for the connection. Setting this only sets the default option when allocating ports to members later. The options are Yes / No / Half / Other.", 
            "title": "Adding a Patch Panel"
        }, 
        {
            "location": "/features/patch-panels/#filtering-patch-panel-ports", 
            "text": "Quite often, all you are looking for is a free in a particular location (data centre) or cabinet of a particular cable type (UTP / SMF / etc.).  IXP Manager makes this easy from the  Patch Panels  page via the top right button labeled  Filter Options . When clicked, this yields an advanced search as follows:   Cabinets auto-fills when you chose (or change) a location.", 
            "title": "Filtering Patch Panel Ports"
        }, 
        {
            "location": "/features/patch-panels/#patch-panel-port-states", 
            "text": "A patch panel port can have the following states:   Available : The port is free and available for use.  Prewired : This is equivalent to available but it means the port is prewired to a given switchport (you set the port when setting the prewired status). This is useful for IXPs that prewire a bunch of ports to avoid remote hands costs / data centre visits.  Awaiting Xconnect : Port has been assigned to a member and we are awaiting the co-location provider to install the cross connect. In this state, context aware actions such as emailing connection requests, LoA generation and  Set Connected  are all available.  Connected : Connected and in use.  Awaiting Cease : This connection is no longer required and we are awaiting the end user / co-location provider to cease the connection.  Ceased : You will never see a ceased state. When a cross connect is marked as ceased, it's current state is archived (for history, include files) and the port is reset to  Available . We do not revert to  Prewired  but an information message is shown to the user to hint this.  Reserved : Useful to mark particular ports as  off limits  for whatever reason.  Broken  Other", 
            "title": "Patch Panel Port States"
        }, 
        {
            "location": "/features/patch-panels/#free-available-ports", 
            "text": "IXP Manager will colour ports in the  Available ,  Prewired  and  Awaiting Cease  states are green allowing an easy visual indication of available ports.", 
            "title": "Free / Available Ports"
        }, 
        {
            "location": "/features/patch-panels/#patch-panel-port-lifecycle", 
            "text": "Patch panel ports start as either  available  or  prewired . The context menu in these states is:    Unset Prewired  is available as this port has a  Prewired  status. Clicking this reverts it to plain  Available  and disassociates it from the prewired port.  Edit Note...  is always available and provides a pop up to edit public and private notes associated with the port (current lifecycle - ceased ports have their notes at that time archived and cleared).   The main lifecycle option here is  Allocate :     Description : A one line short description to be shown in the list of patch panel ports. Just enough to help explain the ports purpose. Detailed information should be placed in the notes section. Can also be used to explain a reserved / broken / other port. Note that this is parsed as Markdown.  NB:  A description is discouraged for customer ports connected to a switch. The customer name and switch port are the description.    Colocation Circuit Reference : this is the reference provided by the colocation provider to uniquely reference this cross connect.    Ticket Reference(s) : This is a free text field to be used by IXPs as they wish. The intended use is to enter helpdesk ticket references that relate to this cross connect order.    Duplex connection? : Clicking this allows you to select the slave port for duplex connections.    Switch / Switch Port  /  Customer : You have a number of options when allocating a port:    If the port is pre-wired then the switch / switch port will be set here.   If you chose a switch port which has been allocated to a customer, then this patch panel port will also be allocated to that customer. The backend logic will detect if this is the case and update the customer field.  Conversely, if you chose a customer first, the switch / switch port dropdowns will be populated with only that customer's assigned ports.  Sometimes you will get cross connects that are not intended to be connected to peering switches (e.g. connections to co-located customer equipment, IXP metro connections, etc.). In these cases, just select the customer (and if it's the IXP itself, select the IXP customer) and leave switch / switch port unselected.   If you need to reset these fields, just click either of the Reset button.    Patch Panel Port Status : when allocating a port, this will allow you to set the state to  Awaiting Xconnect  or  Connected .    Physical Interface Status : this is not depicted above. If the selected switch port has already been assigned to a customer by way of a physical interface, you will have the option to update this here also.    Public  and  Private Notes : Public notes are available to the customer. Both fields are interpreted as Markdown.    Chargeable : Usually IXPs request their members to come to them and bear the costs of that. However, sometimes a co-location facility may charge the IXP for a half circuit or the IXP may need order and pay for the connection. The options are Yes / No / Half / Other. How individual IXPs use this is up to them.    Internal Use : Marks the port as used by the IXP itself. E.g. metro connections.    Owned By : Useful indication for billing and cease requests. Should represent the contractural owner of the cross connect. One of: Customer, IXP, Service Provider, Data Centre, Other.  Service Provider  might be a metro provider where they ordered the cross connect.    Once a port is allocated, it enters the  Awaiting XConnect  /  Connected  state and there are additional context menu options available:   The three lifecycle actions are:   Set Connected : updates the status (and allows you to add public/private notes). You next action after this should be  Email - Connect .  Set Awaiting Cease : mark the port and pending disconnection. Your next action after this should be  Email - Cease .  Set Ceased : this is a  transitive state  in that it doesn't  stick . When you mark a patch panel as ceased, the existing details (including files and notes) are archived as part of the port's history and then port is then cleared and made available again.", 
            "title": "Patch Panel Port Lifecycle"
        }, 
        {
            "location": "/features/patch-panels/#file-attachments", 
            "text": "Over the lifetime of a cross connect - and particularly when it is being ordered, there may be files exchanges between you and your customers or the colocation provider. These can be added to the patch panel port via the  Attach File...  option.  The dialog will dynamically determine the maximum file upload size based on your PHP settings. To alter this, change the following in your server's appropriate  php.ini :  ; Maximum allowed size for uploaded files.\nupload_max_filesize = 40M\n\n; Must be greater than or equal to upload_max_filesize\npost_max_size = 40M  Please search the internet for further help as this is outside the scope of IXP Manager documentation.  The following features apply to file attachments:   they are archived along with the port history when a cross connect is ceased.  they are stored under  $IXPROOT/storage/files/ppp .  two files of the same name cannot be uploaded for a single patch panel port.  they can be marked as public or private:  public files are accessible to the customer through their own dashboard.  public files are attached to the  Email - Information  email.", 
            "title": "File Attachments"
        }, 
        {
            "location": "/features/patch-panels/#loa-generation", 
            "text": "Many co-location providers will not accept a cross connect order without a LoA  (Letter of Agency/Authority)  from the party to whom the cross connect is to be delivered (typically the IXP).  IXP Manager will generate a PDF LoA to download or include in the emails it generates for you. Here is an example:   You will need to  skin  this yourself to change the legalese, address and contact details and potentially add a logo. See the version INEX uses  here  (which includes and embedded PNG logo).  Note that  Dompdf  is used to turn the HTML template into a PDF and it has some restrictions.  You have two options for generating LoAs (without having IXP Manager email them):   Download PDF : downloads the PDF via your browser.  View PDF : displays the PDF LoA in your browser (where browser supports it).", 
            "title": "LoA Generation"
        }, 
        {
            "location": "/features/patch-panels/#loa-verification", 
            "text": "The stock LoA template (and INEX's version) includes a link that allows co-location browsers to click on to verify its veracity.  On successful verification, the end user sees:", 
            "title": "LoA Verification"
        }, 
        {
            "location": "/features/patch-panels/#email-generation", 
            "text": "IXP Manager allows you to send four emails related to patch panels / cross connects (port status dependent). These are listed below. The Email editor looks as follows:   Note that:   the option to attach a PDF LoA is a checkbox.  the email is written in Markdown with a preview available. The email is sent as both HTML (from the Markdown) and the plaintext version.   The four email templates available are:   Email - Connect : Email the customer a request to order a cross connect to the given demarcation points. A LoA is attached as a PDF by default unless you uncheck the box in the email editor.  Email - Cease : Email the customer a request to cease a cross connect.  Email - Information : Email the customer all details on file about a cross connect. We often get requests for this at INEX and this simplifies the process. The generated email includes:  the standard details regarding port and co-location reference;  public notes;  public files as attachments.  Email - LoA : Email a LoA to the customer as attached as a PDF. This is similar to  Email - Connect  but it is more reflective of a typical response to a second request for a LoA.   All email templates can be  skinned  for your own needs. See INEX's example skins  here .", 
            "title": "Email Generation"
        }, 
        {
            "location": "/features/patch-panels/#viewing-patch-panel-details-and-archives", 
            "text": "Each patch panel port row has the following button:   The number in the badge indicates how many historical records are available.  Clicking on the button yields the following view screen:", 
            "title": "Viewing Patch Panel Details and Archives"
        }, 
        {
            "location": "/features/patch-panels/#development-history", 
            "text": "The Patch Panels functionality was developed during Q1 2017 and added in March 2017. This was made possible from sponsorship which enabled us to hire a new full time developer. We are especially grateful to our sponsors -  please see them here .", 
            "title": "Development History"
        }, 
        {
            "location": "/features/grapher/", 
            "text": "Grapher\n\n\nThe biggest new feature available at launch in IXP Manager v4 is a new graphing system called \nGrapher\n.\n\n\nGrapher\n is a complete rewrite of all previous graphing code and includes:\n\n\n\n\nAPI access to graphs and graph statistics\n\n\nmultiple backends (such as MRTG, sflow) with dynamic resolution of appropriate backend\n\n\nconfiguration generation where required\n\n\nconsistent and flexible OOP design\n\n\n\n\nTo date, we've developed three reference backend implementations:\n\n\n\n\ndummy\n - a dummy grapher that just provides a placeholder graph for all possible graph types;\n\n\nmrtg\n - MRTG graphing using either the log or rrd backend. Use cases for MRTG are L2 interface statistics for bits / packets / errors / discards / broadcasts per second. Aggregate graphs for customer LAGs, overall customer traffic, all traffic over a switch / infrastructure / the entire IXP are all supported.\n\n\nsflow\n - while the MRTG backend looks at layer 2 statistics, sflow is used to provide layer 3 statistics such as per protocol (IPv4/6) graphs and peer to peer graphs.\n\n\n\n\nIn a typical production environment, you'd implement both MRTG and sflow to provide the complete set of features.\n\n\nConfiguration\n\n\nThere is only a handful of configuration options required and these can be seen with documentation in \nconfig/grapher.php\n (remember to put your own local changes in \n.env\n rather than editing this file directly).\n\n\nThe only global (non-backend specific) options are:\n\n\n\n\nbackend\n - in a typical production environment this would be \n\"mrtg|sflow\"\n which means try the MRTG backend first and then sflow. We ship with this set as \n\"dummy\"\n so you can see sample graphs working out of the box.\n\n\ncache\n - as the industry standard is to graph at 5min intervals, the cache settings do not regenerate / reload / reprocess log / rrd / image files if we have cached them and they are less than 5mins old. This is enabled by default which is the recommended setting.\n\n\n\n\nBackend specific configuration and set-up instructions can be found in their own sections.\n\n\nGrapher Backends\n\n\nMrtg\n\n\nMRTG is a particularly efficient SNMP poller as, irrespective of how many times an interface is referenced for different graphs, it is only polled once per run.\n\n\nPer-second graphs are generated for bits, packets, errors, discards and broadcasts at 5min intervals. IXP Manager's Grapher system can use MRTG to poll switches and create traffic graphs for:\n\n\n\n\nAggregate IXP and Infrastructure Graphs\n\n\n\n\nThe MRTG script creates aggregate graphs for the entire IXP as well as per-infrastructure graphs. These graphs are available from the \nStatistics\n menu under \nOverall Peering Graphs\n. Also, the graphs on the admin dashboard are the monthly versions of these and will appear on the dashboard when configured as above.\n\n\n\n\nSwitch Aggregate Graphs\n\n\n\n\nThese are defined and built automatically from the switches you have defined. These graphs are the aggregate of all peering ports. These graphs are available from the \nStatistics\n menu under \nSwitch Aggregate Graphs\n.\n\n\n\n\nInter-Switch / Trunk Graphs\n\n\n\n\nIXP Manager does not currently support a frontend means of creating these definitions (but, as of March 2017, it is being worked on). For now, we do it manually via the \nIXP Manager v3 way\n.\n\n\nThese graphs will be available in the \nStatistics\n menu under \nInter-Switch / PoP Graphs\n.\n\n\n\n\nCustomer Graphs\n\n\n\n\nMRTG creates per port, per LAG and aggregate graphs for each member / customer.\n\n\nMRTG Setup and Configuration\n\n\nYou need to install some basic packages for MRTG to work - on Ubuntu for example, install:\n\n\napt-get install libconfig-general-perl libnetaddr-ip-perl mrtg\n\n\n\n\nYou also need a folder to store all MRTG files. For example:\n\n\nmkdir -p /srv/mrtg\n\n\n\n\nIn your `.env, you need to set the following options:\n\n\n# the database type to use - either log or rrd\nGRAPHER_BACKEND_MRTG_DBTYPE=\nrrd\n\n# where to store log/rrd/png files as created above. This is from the perspective\n# of the mrtg daemon so should also be local\nGRAPHER_BACKEND_MRTG_WORKDIR=\n/tmp\n\n# where to find the WORKDIR above from IXP Manager's perspective. This can be a\n# local directory or a URL to remote web server\nGRAPHER_BACKEND_MRTG_LOGDIR=\nhttp://collector.example.com/mrtg\n\n\n\n\n\nYou can now generate a MRTG configuration by executing a command such as:\n\n\n# output to stdout:\n./artisan grapher:generate-configuration -B mrtg\n# output to a named file\n./artisan grapher:generate-configuration -B mrtg -O /tmp/mrtg.cfg.candidate\n\n\n\n\nYou could also combine a syntax check before putting the resultant file live. Here's a complete example that could be run via cron:\n\n\n#! /bin/sh\n\nAPPLICATION_PATH=/srv/ixp\n\n# Synchronise configuration files\n${APPLICATION_PATH}/artisan grapher:generate-configuration -B mrtg -O /tmp/mrtg.cfg.candidate\n\n/usr/bin/mrtg --check /tmp/mrtg.cfg.candidate                 \\\n    \n /bin/mv /tmp/mrtg.cfg.candidate /etc/mrtg/mrtg.cfg\n\n\n\n\nIf your MRTG collector is on a different server, you could use a script such as the following to safely update MRTG:\n\n\n#! /bin/bash\n\ncurl --fail -s -H \nX-IXP-Manager-API-Key: your_api_key\n \\\n    https://ixp.example.com/api/v4/grapher/mrtg-config \n/etc/mrtg/mrtg.cfg.$$\n\nif [[ $? -ne 0 ]]; then\n    echo \nWARNING: COULD NOT FETCH UP TO DATE MRTG CONFIGURATION!\n\n    exit -1\nfi\n\ncd /etc/mrtg\n\ncat mrtg.cfg    | egrep -v '^#.*$' | egrep -v '^[ ]+Based on configuration last generated by.*$' \nmrtg.cfg.filtered\ncat mrtg.cfg.$$ | egrep -v '^#.*$' | egrep -v '^[ ]+Based on configuration last generated by.*$' \nmrtg.cfg.$$.filtered\ndiff mrtg.cfg.filtered mrtg.cfg.$$.filtered \n/dev/null\nDIFF=$?\n\nrm mrtg.cfg.filtered\nrm mrtg.cfg.$$.filtered\n\nif [[ $DIFF -eq 0 ]]; then\n    rm mrtg.cfg.$$\n    exit 0\nfi\n\n/usr/local/bin/mrtg --check /etc/mrtg/mrtg.cfg.$$                 \\\n    \n /bin/mv /etc/mrtg/mrtg.cfg.$$ /etc/mrtg/mrtg.cfg \\\n    \n /etc/rc.d/mrtg_daemon restart \n /dev/null 2\n1\n\n\n\n\nNote that our header template starts MRTG as a daemon. On FreeBSD, MRTG comes with an initd script by default and you can kick it off on boot with something like the following in rc.conf:\n\n\nmrtg_daemon_enable=\nYES\n\nmrtg_daemon_config=\n/etc/mrtg/mrtg.cfg\n\n\n\n\n\nHowever, on Ubuntu it does not but it comes with a /etc/cron.d/mrtg file which kicks it off every five minutes (it will daemonise the first time and further cron jobs will have no effect). If you use this method, you will need to have your periodic update script restart / stop the daemon when the configuration changes (as demonstrated in the above script).\n\n\nTo start and stop it via standard initd scripts on Ubuntu, use \nan initd script such as this\n  (\nsource\n:\n\n\ncp $APPLICATION_PATH/tools/runtime/mrtg/ubuntu-mrtg-initd /etc/init.d/mrtg\nchmod +x /etc/init.d/mrtg\nupdate-rc.d mrtg defaults\n/etc/init.d/mrtg start\n\n\n\n\nRemember to disable the default cron job for MRTG on Ubuntu!\n\n\nCustomising the Configuration\n\n\nAn example of how to customise the MRTG configuration \ncan be found in the skinning documenation\n.\n\n\nInserting Traffic Data Into the Database / Reporting Emails\n\n\nThe MRTG backend inserts daily summaries into MySQL for reporting. An example crontab for this is:\n\n\n\n0 2   * * *   www-data        /srv/ixpmanager/artisan grapher:upload-stats-to-db\n\n0 4   * * *   www-data        /srv/ixpmanager/artisan grapher:email-traffic-deltas --stddev=1.5 -v user1@example.com,user2@example.com\n\n30 10 * * tue www-data        /srv/ixpmanager/artisan grapher:email-port-utilisations --threshold=80 ops@inex.ie,barry.rhodes@inex.ie,eileen@inex.ie\n\n31 10 * * *   www-data        /srv/ixpmanager/artisan grapher:email-ports-with-counts --discards ops@inex.ie\n\n32 10 * * *   www-data        /srv/ixpmanager/artisan grapher:email-ports-with-counts --errors ops@inex.ie\n\n\n\n\nwhich, in the order above, do:\n\n\n\n\nOnce per day, upload \nyesterday's\n summary of MRTG statistics into the database.\n\n\nEmail a report of members whose average traffic has changed by more than 1.5 times their standard deviation to \nuser1@example.com\n and \nuser2@example.com\n.\n\n\nEmail a report of all ports with \n=80% utilisation yesterday.\n\n\nEmail a report of all ports with a non-zero discard count yesterday.\n\n\nEmail a report of all ports with a non-zero error count yesterday.", 
            "title": "Grapher"
        }, 
        {
            "location": "/features/grapher/#grapher", 
            "text": "The biggest new feature available at launch in IXP Manager v4 is a new graphing system called  Grapher .  Grapher  is a complete rewrite of all previous graphing code and includes:   API access to graphs and graph statistics  multiple backends (such as MRTG, sflow) with dynamic resolution of appropriate backend  configuration generation where required  consistent and flexible OOP design   To date, we've developed three reference backend implementations:   dummy  - a dummy grapher that just provides a placeholder graph for all possible graph types;  mrtg  - MRTG graphing using either the log or rrd backend. Use cases for MRTG are L2 interface statistics for bits / packets / errors / discards / broadcasts per second. Aggregate graphs for customer LAGs, overall customer traffic, all traffic over a switch / infrastructure / the entire IXP are all supported.  sflow  - while the MRTG backend looks at layer 2 statistics, sflow is used to provide layer 3 statistics such as per protocol (IPv4/6) graphs and peer to peer graphs.   In a typical production environment, you'd implement both MRTG and sflow to provide the complete set of features.", 
            "title": "Grapher"
        }, 
        {
            "location": "/features/grapher/#configuration", 
            "text": "There is only a handful of configuration options required and these can be seen with documentation in  config/grapher.php  (remember to put your own local changes in  .env  rather than editing this file directly).  The only global (non-backend specific) options are:   backend  - in a typical production environment this would be  \"mrtg|sflow\"  which means try the MRTG backend first and then sflow. We ship with this set as  \"dummy\"  so you can see sample graphs working out of the box.  cache  - as the industry standard is to graph at 5min intervals, the cache settings do not regenerate / reload / reprocess log / rrd / image files if we have cached them and they are less than 5mins old. This is enabled by default which is the recommended setting.   Backend specific configuration and set-up instructions can be found in their own sections.", 
            "title": "Configuration"
        }, 
        {
            "location": "/features/grapher/#grapher-backends", 
            "text": "", 
            "title": "Grapher Backends"
        }, 
        {
            "location": "/features/grapher/#mrtg", 
            "text": "MRTG is a particularly efficient SNMP poller as, irrespective of how many times an interface is referenced for different graphs, it is only polled once per run.  Per-second graphs are generated for bits, packets, errors, discards and broadcasts at 5min intervals. IXP Manager's Grapher system can use MRTG to poll switches and create traffic graphs for:   Aggregate IXP and Infrastructure Graphs   The MRTG script creates aggregate graphs for the entire IXP as well as per-infrastructure graphs. These graphs are available from the  Statistics  menu under  Overall Peering Graphs . Also, the graphs on the admin dashboard are the monthly versions of these and will appear on the dashboard when configured as above.   Switch Aggregate Graphs   These are defined and built automatically from the switches you have defined. These graphs are the aggregate of all peering ports. These graphs are available from the  Statistics  menu under  Switch Aggregate Graphs .   Inter-Switch / Trunk Graphs   IXP Manager does not currently support a frontend means of creating these definitions (but, as of March 2017, it is being worked on). For now, we do it manually via the  IXP Manager v3 way .  These graphs will be available in the  Statistics  menu under  Inter-Switch / PoP Graphs .   Customer Graphs   MRTG creates per port, per LAG and aggregate graphs for each member / customer.", 
            "title": "Mrtg"
        }, 
        {
            "location": "/features/grapher/#mrtg-setup-and-configuration", 
            "text": "You need to install some basic packages for MRTG to work - on Ubuntu for example, install:  apt-get install libconfig-general-perl libnetaddr-ip-perl mrtg  You also need a folder to store all MRTG files. For example:  mkdir -p /srv/mrtg  In your `.env, you need to set the following options:  # the database type to use - either log or rrd\nGRAPHER_BACKEND_MRTG_DBTYPE= rrd \n# where to store log/rrd/png files as created above. This is from the perspective\n# of the mrtg daemon so should also be local\nGRAPHER_BACKEND_MRTG_WORKDIR= /tmp \n# where to find the WORKDIR above from IXP Manager's perspective. This can be a\n# local directory or a URL to remote web server\nGRAPHER_BACKEND_MRTG_LOGDIR= http://collector.example.com/mrtg   You can now generate a MRTG configuration by executing a command such as:  # output to stdout:\n./artisan grapher:generate-configuration -B mrtg\n# output to a named file\n./artisan grapher:generate-configuration -B mrtg -O /tmp/mrtg.cfg.candidate  You could also combine a syntax check before putting the resultant file live. Here's a complete example that could be run via cron:  #! /bin/sh\n\nAPPLICATION_PATH=/srv/ixp\n\n# Synchronise configuration files\n${APPLICATION_PATH}/artisan grapher:generate-configuration -B mrtg -O /tmp/mrtg.cfg.candidate\n\n/usr/bin/mrtg --check /tmp/mrtg.cfg.candidate                 \\\n      /bin/mv /tmp/mrtg.cfg.candidate /etc/mrtg/mrtg.cfg  If your MRTG collector is on a different server, you could use a script such as the following to safely update MRTG:  #! /bin/bash\n\ncurl --fail -s -H  X-IXP-Manager-API-Key: your_api_key  \\\n    https://ixp.example.com/api/v4/grapher/mrtg-config  /etc/mrtg/mrtg.cfg.$$\n\nif [[ $? -ne 0 ]]; then\n    echo  WARNING: COULD NOT FETCH UP TO DATE MRTG CONFIGURATION! \n    exit -1\nfi\n\ncd /etc/mrtg\n\ncat mrtg.cfg    | egrep -v '^#.*$' | egrep -v '^[ ]+Based on configuration last generated by.*$'  mrtg.cfg.filtered\ncat mrtg.cfg.$$ | egrep -v '^#.*$' | egrep -v '^[ ]+Based on configuration last generated by.*$'  mrtg.cfg.$$.filtered\ndiff mrtg.cfg.filtered mrtg.cfg.$$.filtered  /dev/null\nDIFF=$?\n\nrm mrtg.cfg.filtered\nrm mrtg.cfg.$$.filtered\n\nif [[ $DIFF -eq 0 ]]; then\n    rm mrtg.cfg.$$\n    exit 0\nfi\n\n/usr/local/bin/mrtg --check /etc/mrtg/mrtg.cfg.$$                 \\\n      /bin/mv /etc/mrtg/mrtg.cfg.$$ /etc/mrtg/mrtg.cfg \\\n      /etc/rc.d/mrtg_daemon restart   /dev/null 2 1  Note that our header template starts MRTG as a daemon. On FreeBSD, MRTG comes with an initd script by default and you can kick it off on boot with something like the following in rc.conf:  mrtg_daemon_enable= YES \nmrtg_daemon_config= /etc/mrtg/mrtg.cfg   However, on Ubuntu it does not but it comes with a /etc/cron.d/mrtg file which kicks it off every five minutes (it will daemonise the first time and further cron jobs will have no effect). If you use this method, you will need to have your periodic update script restart / stop the daemon when the configuration changes (as demonstrated in the above script).  To start and stop it via standard initd scripts on Ubuntu, use  an initd script such as this   ( source :  cp $APPLICATION_PATH/tools/runtime/mrtg/ubuntu-mrtg-initd /etc/init.d/mrtg\nchmod +x /etc/init.d/mrtg\nupdate-rc.d mrtg defaults\n/etc/init.d/mrtg start  Remember to disable the default cron job for MRTG on Ubuntu!", 
            "title": "MRTG Setup and Configuration"
        }, 
        {
            "location": "/features/grapher/#customising-the-configuration", 
            "text": "An example of how to customise the MRTG configuration  can be found in the skinning documenation .", 
            "title": "Customising the Configuration"
        }, 
        {
            "location": "/features/grapher/#inserting-traffic-data-into-the-database-reporting-emails", 
            "text": "The MRTG backend inserts daily summaries into MySQL for reporting. An example crontab for this is:  \n0 2   * * *   www-data        /srv/ixpmanager/artisan grapher:upload-stats-to-db\n\n0 4   * * *   www-data        /srv/ixpmanager/artisan grapher:email-traffic-deltas --stddev=1.5 -v user1@example.com,user2@example.com\n\n30 10 * * tue www-data        /srv/ixpmanager/artisan grapher:email-port-utilisations --threshold=80 ops@inex.ie,barry.rhodes@inex.ie,eileen@inex.ie\n\n31 10 * * *   www-data        /srv/ixpmanager/artisan grapher:email-ports-with-counts --discards ops@inex.ie\n\n32 10 * * *   www-data        /srv/ixpmanager/artisan grapher:email-ports-with-counts --errors ops@inex.ie  which, in the order above, do:   Once per day, upload  yesterday's  summary of MRTG statistics into the database.  Email a report of members whose average traffic has changed by more than 1.5 times their standard deviation to  user1@example.com  and  user2@example.com .  Email a report of all ports with  =80% utilisation yesterday.  Email a report of all ports with a non-zero discard count yesterday.  Email a report of all ports with a non-zero error count yesterday.", 
            "title": "Inserting Traffic Data Into the Database / Reporting Emails"
        }, 
        {
            "location": "/features/helpdesk/", 
            "text": "Helpdesk Integration\n\n\n WORK IN PROGRESS - DEVELOPMENT NOTES \n\n\nAs an IXP scales, it will eventually have to replace email support via a simple alias / shared IMAP mailbox with a \nproper\n ticketing system. After extensive (and painful!) research, we at INEX chose \nZendesk\n as the system that most matched our budget and required features (1).\n\n\nWhile your mileage may vary on this - or you may already have something else - please note that the reference implementation for helpdesk integration on IXP Manager is Zendesk. So, if you haven't already chosen one, Zendesk will provide maximum integration with minimal pain.\n\n\n\n\nPlease do not open a feature request for other helpdesk implementations as the authors cannot undertake such additional work. If you wish to have integration with another helpdesk implemented, please consider \ncommercial support\n\n\n\n\nFeatures Supported\n\n\nIXP Manager currently supports:\n\n\n\n\ncreation and update of customers / organisations in Zendesk\n\n\ncreation and update of contacts / users in Zendesk\n\n\nfinding tickets by customer / organisation\n\n\n\n\nWork that is in progress includes:\n\n\n\n\nallow users to create, update and close tickets in IXP Manager\n\n\nlist all tickets per organisation (for admins and users)\n\n\n\n\nConfiguration\n\n\nAs Zendesk is the only implementation currently, this refers only to Zendesk.\n\n\nZendesk\n\n\nYou need to enable API access to Zendesk as follows:\n\n\n\n\nLog into your Zendesk account\n\n\nOn the bottom left, click the Settings icon\n\n\nUnder \nChannels\n select \nAPI\n\n\nEnable the API here and add a token\n\n\n\n\nWith your Zendesk login and the token from above, edit the \n.env\n file in the base directory of IXP Manager and set:\n\n\nHELPDESK_BACKEND=zendesk\nHELPDESK_ZENDESK_SUBDOMAIN=ixp\nHELPDESK_ZENDESK_TOKEN=yyy\nHELPDESK_ZENDESK_EMAIL=john.doe@example.com\n\n\n\n\nYou can now test that your settings are correct with: \nFIXME\n\n\nImplementation Development\n\n\nThe helpdesk implementation in IXP Manager is designed using contracts and service providers. I.e. it is done \nThe Right Way (tm)\n.\n\n\nThe reference implementation is for Zendesk but it's coded to a contract (interface) at \napp/Contracts/Helpdesk.php\n.\n\n\nThe actual Zendesk implementation can be found at: \napp/Services/Helpdesk/Zendesk.php\n.\n\n\nThe good news here is if you want another helpdesk supported, you just need to:\n\n\n\n\ncreate an implementation like the Zendesk one above\n\n\nupdate the \nswitch()\n statement in \napp/Providers/HelpdeskServiceProvider.php\n\n\nopen a pull request for IXP Manager and this documentation\n\n\n\n\n(1) Actually, Zendesk wasn't our first ticketing system. For a number of years we used \nCerb\n but it didn't stay current in terms of modern HTML UI/UX and it suffered from feature bloat. One requirement for our replacement was a decent API and with Zendesk's API we were able to migrate all our old tickets \nusing this script\n.", 
            "title": "Helpdesk Integration"
        }, 
        {
            "location": "/features/helpdesk/#helpdesk-integration", 
            "text": "WORK IN PROGRESS - DEVELOPMENT NOTES   As an IXP scales, it will eventually have to replace email support via a simple alias / shared IMAP mailbox with a  proper  ticketing system. After extensive (and painful!) research, we at INEX chose  Zendesk  as the system that most matched our budget and required features (1).  While your mileage may vary on this - or you may already have something else - please note that the reference implementation for helpdesk integration on IXP Manager is Zendesk. So, if you haven't already chosen one, Zendesk will provide maximum integration with minimal pain.   Please do not open a feature request for other helpdesk implementations as the authors cannot undertake such additional work. If you wish to have integration with another helpdesk implemented, please consider  commercial support", 
            "title": "Helpdesk Integration"
        }, 
        {
            "location": "/features/helpdesk/#features-supported", 
            "text": "IXP Manager currently supports:   creation and update of customers / organisations in Zendesk  creation and update of contacts / users in Zendesk  finding tickets by customer / organisation   Work that is in progress includes:   allow users to create, update and close tickets in IXP Manager  list all tickets per organisation (for admins and users)", 
            "title": "Features Supported"
        }, 
        {
            "location": "/features/helpdesk/#configuration", 
            "text": "As Zendesk is the only implementation currently, this refers only to Zendesk.", 
            "title": "Configuration"
        }, 
        {
            "location": "/features/helpdesk/#zendesk", 
            "text": "You need to enable API access to Zendesk as follows:   Log into your Zendesk account  On the bottom left, click the Settings icon  Under  Channels  select  API  Enable the API here and add a token   With your Zendesk login and the token from above, edit the  .env  file in the base directory of IXP Manager and set:  HELPDESK_BACKEND=zendesk\nHELPDESK_ZENDESK_SUBDOMAIN=ixp\nHELPDESK_ZENDESK_TOKEN=yyy\nHELPDESK_ZENDESK_EMAIL=john.doe@example.com  You can now test that your settings are correct with:  FIXME", 
            "title": "Zendesk"
        }, 
        {
            "location": "/features/helpdesk/#implementation-development", 
            "text": "The helpdesk implementation in IXP Manager is designed using contracts and service providers. I.e. it is done  The Right Way (tm) .  The reference implementation is for Zendesk but it's coded to a contract (interface) at  app/Contracts/Helpdesk.php .  The actual Zendesk implementation can be found at:  app/Services/Helpdesk/Zendesk.php .  The good news here is if you want another helpdesk supported, you just need to:   create an implementation like the Zendesk one above  update the  switch()  statement in  app/Providers/HelpdeskServiceProvider.php  open a pull request for IXP Manager and this documentation   (1) Actually, Zendesk wasn't our first ticketing system. For a number of years we used  Cerb  but it didn't stay current in terms of modern HTML UI/UX and it suffered from feature bloat. One requirement for our replacement was a decent API and with Zendesk's API we were able to migrate all our old tickets  using this script .", 
            "title": "Implementation Development"
        }, 
        {
            "location": "/features/routers/", 
            "text": "Routers\n\n\nNote that a number of pages redirect here where we have collated documentation on route collectors, route servers, AS112 servcies and IRRDB filtering.\n\n\nIXP Manager can generate router configuration for typical IXP services such as route collectors, route servers and AS112 services. How this is done has been changed significantly from v3 to v4.\n\n\n\n\nNote that until officially deprecated, the older v3 methods still work and the \nofficial v3 documentation\n should be referenced for that.\n\n\n\n\nConfiguration Overview\n\n\nThe basic elements of \na router\n are configured in \nconfigs/routers.php\n. This is an optional file that is not included in version control so the best way to start it is to copy from the template:\n\n\ncp config/routers.php.dist config/routers.php\n\n\n\n\nA typical entry of a sample router (in standard PHP associative array syntax) is:\n\n\n?php\n    'rc1-lan1-ipv4' =\n [\n        'vlan_id'    =\n 1,\n        'protocol'   =\n 4,\n        'type'       =\n 'RC',   // RC|RS|AS112?\n        'name'       =\n 'INEX LAN1 - Route Collector - IPv4',\n        'shortname'  =\n 'RC1 - LAN1 - IPv4',\n        'router_id'  =\n '192.0.2.8',\n        'peering_ip' =\n '192.0.2.8',\n        'asn'        =\n 65500,\n        'software'   =\n 'bird',\n        'mgmt_ip'    =\n '203.0.113.8',\n        'api'        =\n 'http://rc1-lan1-ipv4.mgmt.example.com/api',\n        'api_type'   =\n 'birdseye',\n        'lg_access'  =\n Entities\\User::AUTH_PUBLIC,\n        'quarantine' =\n false,\n        'bgp_lc'     =\n false,\n        'template'   =\n 'api/v4/router/collector/bird/standard',\n    ],\n\n\n\n\nwhere:\n\n\n\n\nrc1-lan1-ipv4\n is the \nhandle\n for this router to be used in API calls later (it's the key of the PHP associative array).\n\n\nvlan_id\n is not the VLAN 802.1q tag number but the \nvlan.id\n database column. You can get this, for example, by hovering over the edit action in the VLAN listing in IXP Manager and finding the number in the URL.\n\n\nprotocol\n is either \n4\n (IPv4) or \n6\n (IPv6). Any other value will lead to a runtime exception.\n\n\nwe have currently defined three types which are used for grouping routers in the UI and for other selection purposes:\n\n\nRC\n - route collector;\n\n\nRS\n - route server;\n\n\nAS112\n - an AS112 BGP peer (see \nINEX's AS112 documentation\n as an example).\n\n\nname\n - name / description of the router's purpose.\n\n\nshortname\n - used in dropdowns or other space constrained areas where \nname\n may be too long.\n\n\nrouter_id\n - the router's BGP ID (e.g. \n192.0.2.8\n).\n\n\npeering_ip\n - the IPv4/6 address that this router initiates BGP peering sessions from.\n\n\nasn\n - the router's AS number.\n\n\nsoftware\n - there is no specific use for this as yet.\n\n\nmgmt_ip\n - the IP to address this server / router at for management functions such as Nagios monitoring.\n\n\napi\n and \napi_type\n - the API end point for this server/router. The only use case for this so far is for the built-in \nlooking glass\n functionality via \nBirdseye\n.\n\n\nlg_access\n - who should be allow access the looking glass. One of:\n\n\nAUTH_PUBLIC\n - publicly available to all;\n\n\nAUTH_CUSTUSER\n - must be logged into IXP Manager as any user;\n\n\nAUTH_SUPERUSER\n - must be logged into IXP Manager as an administrator (no customer access).\n\n\nquarantine\n - a flag to indicate if this router is part of the IXP's quarantine / test infrastructure. For example, INEX runs two parallel route collectors: one quarantine and one production. When customers have issues or are being provisioned, they are placed in the quarantine LAN and we can examine BGP announcements safely on the non-production quarantine devices. When a router is marked as quarantine, it is only visible in looking glass dropdowns to customers who also have a port in quarantine (physical interface status).\n\n\nbgp_lc\n - a flag to indicate if the router supports \nRFC8092\n / \nlarge BGP communities\n.\n\n\ntemplate\n - the template to use to generate the configuration. See stock examples \nhere\n (and note that \nskinning\n is supported).\n\n\n\n\nTypically your \nrouters.php\n file would hold multiple such entries. It is our intention to move this into the UI and database.\n\n\nGeneration Overview\n\n\nThe simplest configuration to generate is the route collector configuration. A route collector is an IXP router which serves only to \naccept all routes and export no routes\n. It is used for problem diagnosis, to aid customer monitoring and for looking glasses (see \nINEX's here\n.\n\n\nThe \nstandard configuration\n simply pulls in a fairly standard header (sets up router ID, listening address and - for the collector at least - some unused filters) and creates a session for all customer routers on the given VLAN (see \nvlan_id\n above).\n\n\nIn the above example, the route handle is the array's associative key (\nrc1-lan1-ipv4\n) and - for the given router handle - the configuration can be generated via:\n\n\n# The key is generated in IXP Manager via the top right menu: *My Account -\n API Keys*\nKEY=\nyour-admin-ixp-manager-api-key\n\n# The base URL of your IXP Manager install plus: 'api/v4/router/gen_config'\nURL=\nhttps://ixp.example.com/api/v4/router/gen_config\n\n# The handle is the PHP associative key from `config/routers.php` as described above\nHANDLE=\nrc1-lan1-ipv4\n\n# Then the complete URL is formed as:\ncurl --fail -s -H \nX-IXP-Manager-API-Key: ${KEY}\n ${URL}/${HANDLE} \n${HANDLE}.conf\n\n\n\n\nConfigurations for the route server and AS112 templates can be configured just as easily. The stock templates for both are secure and well tested and can be used by setting the \ntemplate\n element of the router configuration above to the following:\n\n\n\n\nAS112: \n'api/v4/router/as112/bird/standard'\n\n\nRoute Server: \n'api/v4/router/server/bird/standard'\n\n\n\n\nWe also provide sample scripts for automating the re-configuration of these services by cron. See the \n-v4\n scripts \nin this directory\n. These are quite robust and have been in production for ~3 years at INEX (as of Jan 2017).\n\n\nRoute Servers\n\n\nNormally on a peering exchange, all connected parties will establish bilateral peering relationships with each other customer connected to the exchange. As the number of connected parties increases, it becomes increasingly more difficult to manage peering relationships with customers of the exchange.\n\n\nHowever, by using a route servers for peering relationships, the number of BGP sessions per router stays at two: one for each route server (assuming a resilient set up). Clearly this is a more sustainable way of maintaining IXP peering relationships with a large number of participants.\n\n\nYou will have learnt above how to automatically generate route server configurations. This section goes into a bit more specific detail on INEX's route server configuration (shipped with IXP Manager) and why it's safe to use.\n\n\nThe features of the route server configurations that we generate include:\n\n\n\n\nfull prefix filtering based on IRRDB entries (can be disabled on a per member basis if required);\n\n\nfull origin ASN filtering based on IRRDB entries (can be disabled on a per member basis if required);\n\n\nin all cases, prefix filtering for IPv4 and v6 based on the IANA special purpose registries (also known as bogon lists);\n\n\nensuring next hop is the neighbor address to ensure no next hop hijacking;\n\n\nmax prefix limits;\n\n\nmultiple VLAN interfaces for a single member supported;\n\n\nlarge BGP communities supported;\n\n\na decade of production use and experience.\n\n\n\n\nThere are \nsome old notes on route server testing here\n which may also be useful.\n\n\nIRRDB Prefixes and ASN Filtering\n\n\nIXP Manager can maintain a list of member route:/route6: prefixes and origin ASNs as registered in IRRDBs in its database and then use these to, for example, generate strict inbound filters on route servers.\n\n\nPrerequisite:\n you need to have set up some IRRDB sources (e.g. RIPE's whois service) under the \nIXP Admin Actions / IRRDB Configuration\n on the left hand side menu. There is a database seeder to install some to start you off via the following (but thius is typically done during installation):\n\n\n./artisan db:seed --class=IRRDBs\n\n\n\n\nBGPQ3 is a very easy and fast way of querying IRRDBs. You first need to install this on your system. Then configure the path to it in \nconfig/ixp_tools.php\n. If you have not used this file before, you'll need to create your own local copy as follows:\n\n\ncp config/config/ixp_tools.php.dist config/config/ixp_tools.php\n\n\n\n\nThen set the full call path for \nbgpq3\n in this file:\n\n\n?php\n\n  'irrdb' =\n [\n        'bgpq' =\n [\n            'path' =\n '/path/to/bgpq3',\n        ],\n    ],\n\n\n\n\nTo populate (and update) your local IRRDB, run the following commands (changing the path as appropriate):\n\n\n/srv/ixpmanager/artisan irrdb:update-prefix-db\n/srv/ixpmanager/artisan irrdb:update-asn-db\n\n\n\n\nThese should be added to cron to run ~once per day (using the --quiet flag).\n\n\nThere are four levels of verbosity:\n\n\n\n\n-quiet\n: no output unless there's an error / issue.\n\n\nno option: simple stats on each customer's update results.\n\n\n-vv\n: include per customer and overall timings (database, processing and network).\n\n\n-vvv\n (debug): show prefixes/ASNs added remove also.\n\n\n\n\nYou can also specify a specific customer to update (rather than all) with an additional free form parameter. The database is searched for a matching customer in the order: customer ASN; customer ID (database primary key); and customer shortname. E.g.:\n\n\n/srv/ixpmanager/artisan irrdb:update-prefix-db 64511\n\n\n\n\nThe IRRDB update commands will:\n\n\n\n\niterate over all route server client customers for IPv4 and IPv6 (unless a specific customer is specified);\n\n\nuse the appropriate AS macro or ASN;\n\n\nquery the RADB against the appropriate source set for that customer;\n\n\ncompare prefixes(/ASNs) in the database already (if any) against RADB and insert / delete as appropriate;\n\n\nvalidate the prefix for proper CIDR notation before database inserts;\n\n\nupdate the last_seen time for all prefixes(/ASNs) for that customer;\n\n\n\n\nWe use transactions to update the database so, even in the middle of a refresh, a full set of prefixes for all customers will still be available.\n\n\nNote that our current implementation only queries RADB as BGPQ3 does not support the RIPE whois protocol.\n Our version will however set the RADB source database according to the member's stated IRRDB database as set on the customer add / edit page - so, for customer's registered with the RIPE IRRDB, the RIPE database of RADB is queried.", 
            "title": "IRRDB"
        }, 
        {
            "location": "/features/routers/#routers", 
            "text": "Note that a number of pages redirect here where we have collated documentation on route collectors, route servers, AS112 servcies and IRRDB filtering.  IXP Manager can generate router configuration for typical IXP services such as route collectors, route servers and AS112 services. How this is done has been changed significantly from v3 to v4.   Note that until officially deprecated, the older v3 methods still work and the  official v3 documentation  should be referenced for that.", 
            "title": "Routers"
        }, 
        {
            "location": "/features/routers/#configuration-overview", 
            "text": "The basic elements of  a router  are configured in  configs/routers.php . This is an optional file that is not included in version control so the best way to start it is to copy from the template:  cp config/routers.php.dist config/routers.php  A typical entry of a sample router (in standard PHP associative array syntax) is:  ?php\n    'rc1-lan1-ipv4' =  [\n        'vlan_id'    =  1,\n        'protocol'   =  4,\n        'type'       =  'RC',   // RC|RS|AS112?\n        'name'       =  'INEX LAN1 - Route Collector - IPv4',\n        'shortname'  =  'RC1 - LAN1 - IPv4',\n        'router_id'  =  '192.0.2.8',\n        'peering_ip' =  '192.0.2.8',\n        'asn'        =  65500,\n        'software'   =  'bird',\n        'mgmt_ip'    =  '203.0.113.8',\n        'api'        =  'http://rc1-lan1-ipv4.mgmt.example.com/api',\n        'api_type'   =  'birdseye',\n        'lg_access'  =  Entities\\User::AUTH_PUBLIC,\n        'quarantine' =  false,\n        'bgp_lc'     =  false,\n        'template'   =  'api/v4/router/collector/bird/standard',\n    ],  where:   rc1-lan1-ipv4  is the  handle  for this router to be used in API calls later (it's the key of the PHP associative array).  vlan_id  is not the VLAN 802.1q tag number but the  vlan.id  database column. You can get this, for example, by hovering over the edit action in the VLAN listing in IXP Manager and finding the number in the URL.  protocol  is either  4  (IPv4) or  6  (IPv6). Any other value will lead to a runtime exception.  we have currently defined three types which are used for grouping routers in the UI and for other selection purposes:  RC  - route collector;  RS  - route server;  AS112  - an AS112 BGP peer (see  INEX's AS112 documentation  as an example).  name  - name / description of the router's purpose.  shortname  - used in dropdowns or other space constrained areas where  name  may be too long.  router_id  - the router's BGP ID (e.g.  192.0.2.8 ).  peering_ip  - the IPv4/6 address that this router initiates BGP peering sessions from.  asn  - the router's AS number.  software  - there is no specific use for this as yet.  mgmt_ip  - the IP to address this server / router at for management functions such as Nagios monitoring.  api  and  api_type  - the API end point for this server/router. The only use case for this so far is for the built-in  looking glass  functionality via  Birdseye .  lg_access  - who should be allow access the looking glass. One of:  AUTH_PUBLIC  - publicly available to all;  AUTH_CUSTUSER  - must be logged into IXP Manager as any user;  AUTH_SUPERUSER  - must be logged into IXP Manager as an administrator (no customer access).  quarantine  - a flag to indicate if this router is part of the IXP's quarantine / test infrastructure. For example, INEX runs two parallel route collectors: one quarantine and one production. When customers have issues or are being provisioned, they are placed in the quarantine LAN and we can examine BGP announcements safely on the non-production quarantine devices. When a router is marked as quarantine, it is only visible in looking glass dropdowns to customers who also have a port in quarantine (physical interface status).  bgp_lc  - a flag to indicate if the router supports  RFC8092  /  large BGP communities .  template  - the template to use to generate the configuration. See stock examples  here  (and note that  skinning  is supported).   Typically your  routers.php  file would hold multiple such entries. It is our intention to move this into the UI and database.", 
            "title": "Configuration Overview"
        }, 
        {
            "location": "/features/routers/#generation-overview", 
            "text": "The simplest configuration to generate is the route collector configuration. A route collector is an IXP router which serves only to  accept all routes and export no routes . It is used for problem diagnosis, to aid customer monitoring and for looking glasses (see  INEX's here .  The  standard configuration  simply pulls in a fairly standard header (sets up router ID, listening address and - for the collector at least - some unused filters) and creates a session for all customer routers on the given VLAN (see  vlan_id  above).  In the above example, the route handle is the array's associative key ( rc1-lan1-ipv4 ) and - for the given router handle - the configuration can be generated via:  # The key is generated in IXP Manager via the top right menu: *My Account -  API Keys*\nKEY= your-admin-ixp-manager-api-key \n# The base URL of your IXP Manager install plus: 'api/v4/router/gen_config'\nURL= https://ixp.example.com/api/v4/router/gen_config \n# The handle is the PHP associative key from `config/routers.php` as described above\nHANDLE= rc1-lan1-ipv4 \n# Then the complete URL is formed as:\ncurl --fail -s -H  X-IXP-Manager-API-Key: ${KEY}  ${URL}/${HANDLE}  ${HANDLE}.conf  Configurations for the route server and AS112 templates can be configured just as easily. The stock templates for both are secure and well tested and can be used by setting the  template  element of the router configuration above to the following:   AS112:  'api/v4/router/as112/bird/standard'  Route Server:  'api/v4/router/server/bird/standard'   We also provide sample scripts for automating the re-configuration of these services by cron. See the  -v4  scripts  in this directory . These are quite robust and have been in production for ~3 years at INEX (as of Jan 2017).", 
            "title": "Generation Overview"
        }, 
        {
            "location": "/features/routers/#route-servers", 
            "text": "Normally on a peering exchange, all connected parties will establish bilateral peering relationships with each other customer connected to the exchange. As the number of connected parties increases, it becomes increasingly more difficult to manage peering relationships with customers of the exchange.  However, by using a route servers for peering relationships, the number of BGP sessions per router stays at two: one for each route server (assuming a resilient set up). Clearly this is a more sustainable way of maintaining IXP peering relationships with a large number of participants.  You will have learnt above how to automatically generate route server configurations. This section goes into a bit more specific detail on INEX's route server configuration (shipped with IXP Manager) and why it's safe to use.  The features of the route server configurations that we generate include:   full prefix filtering based on IRRDB entries (can be disabled on a per member basis if required);  full origin ASN filtering based on IRRDB entries (can be disabled on a per member basis if required);  in all cases, prefix filtering for IPv4 and v6 based on the IANA special purpose registries (also known as bogon lists);  ensuring next hop is the neighbor address to ensure no next hop hijacking;  max prefix limits;  multiple VLAN interfaces for a single member supported;  large BGP communities supported;  a decade of production use and experience.   There are  some old notes on route server testing here  which may also be useful.", 
            "title": "Route Servers"
        }, 
        {
            "location": "/features/routers/#irrdb-prefixes-and-asn-filtering", 
            "text": "IXP Manager can maintain a list of member route:/route6: prefixes and origin ASNs as registered in IRRDBs in its database and then use these to, for example, generate strict inbound filters on route servers.  Prerequisite:  you need to have set up some IRRDB sources (e.g. RIPE's whois service) under the  IXP Admin Actions / IRRDB Configuration  on the left hand side menu. There is a database seeder to install some to start you off via the following (but thius is typically done during installation):  ./artisan db:seed --class=IRRDBs  BGPQ3 is a very easy and fast way of querying IRRDBs. You first need to install this on your system. Then configure the path to it in  config/ixp_tools.php . If you have not used this file before, you'll need to create your own local copy as follows:  cp config/config/ixp_tools.php.dist config/config/ixp_tools.php  Then set the full call path for  bgpq3  in this file:  ?php\n\n  'irrdb' =  [\n        'bgpq' =  [\n            'path' =  '/path/to/bgpq3',\n        ],\n    ],  To populate (and update) your local IRRDB, run the following commands (changing the path as appropriate):  /srv/ixpmanager/artisan irrdb:update-prefix-db\n/srv/ixpmanager/artisan irrdb:update-asn-db  These should be added to cron to run ~once per day (using the --quiet flag).  There are four levels of verbosity:   -quiet : no output unless there's an error / issue.  no option: simple stats on each customer's update results.  -vv : include per customer and overall timings (database, processing and network).  -vvv  (debug): show prefixes/ASNs added remove also.   You can also specify a specific customer to update (rather than all) with an additional free form parameter. The database is searched for a matching customer in the order: customer ASN; customer ID (database primary key); and customer shortname. E.g.:  /srv/ixpmanager/artisan irrdb:update-prefix-db 64511  The IRRDB update commands will:   iterate over all route server client customers for IPv4 and IPv6 (unless a specific customer is specified);  use the appropriate AS macro or ASN;  query the RADB against the appropriate source set for that customer;  compare prefixes(/ASNs) in the database already (if any) against RADB and insert / delete as appropriate;  validate the prefix for proper CIDR notation before database inserts;  update the last_seen time for all prefixes(/ASNs) for that customer;   We use transactions to update the database so, even in the middle of a refresh, a full set of prefixes for all customers will still be available.  Note that our current implementation only queries RADB as BGPQ3 does not support the RIPE whois protocol.  Our version will however set the RADB source database according to the member's stated IRRDB database as set on the customer add / edit page - so, for customer's registered with the RIPE IRRDB, the RIPE database of RADB is queried.", 
            "title": "IRRDB Prefixes and ASN Filtering"
        }, 
        {
            "location": "/features/looking-glass/", 
            "text": "Looking Glass\n\n\nIXP Manager supports full looking glass features when using the Bird BGP daemon and \nBirdseye\n \n(a simple secure micro service for querying Bird)\n.\n\n\nA fully working example of this can be seen \nhere on INEX's IXP Manager\n.\n\n\nEnabling the looking glass just requires:\n\n\n\n\nproperly configured \nrouter(s)\n.\n\n\nBirdseye\n installed on these.\n\n\nthe API endpoint must be accessible from the server running IXP Manager and this endpoint must be set correctly in the \nconfig/routers.php\n file (along with \nlg_access\n). Note that the Birdseye API end points do not need to be publicly accessible - just from the IXP Manager server.\n\n\nset the \n.env\n option: \nIXP_FE_FRONTEND_DISABLED_LOOKING_GLASS=false\n.", 
            "title": "Looking Glass"
        }, 
        {
            "location": "/features/looking-glass/#looking-glass", 
            "text": "IXP Manager supports full looking glass features when using the Bird BGP daemon and  Birdseye   (a simple secure micro service for querying Bird) .  A fully working example of this can be seen  here on INEX's IXP Manager .  Enabling the looking glass just requires:   properly configured  router(s) .  Birdseye  installed on these.  the API endpoint must be accessible from the server running IXP Manager and this endpoint must be set correctly in the  config/routers.php  file (along with  lg_access ). Note that the Birdseye API end points do not need to be publicly accessible - just from the IXP Manager server.  set the  .env  option:  IXP_FE_FRONTEND_DISABLED_LOOKING_GLASS=false .", 
            "title": "Looking Glass"
        }, 
        {
            "location": "/features/patch-panels/", 
            "text": "Patch Panels / Cross Connects\n\n\nOne of the more difficult things for an IXP to manage is the sheer volume of patch panels / cross connects they need to manage. We have approached the issue a number of times in IXP Manger but abandoned the attempt every time. Typically our original solutions were over-engineered where all we really needed was something which could replace a spreadsheet per panel.\n\n\nWe believe we have now developed a feature complete and useful means of managing patch panels and associated cross connects.\n\n\nFeatures\n\n\n\n\nAdd / edit patch panels  (which includes cable and connector types).\n\n\nList associated patch panel ports which includes:\n\n\ntheir state (such as available / prewired, awaiting cross connect, connected, awaiting cease, reserved, broken).\n\n\nassociated customer and/or switchport.\n\n\nco-location provider's circuit reference.\n\n\ninternal ticket references.\n\n\nTransition ports from available / prewired to awaiting x-connect to connected to awaiting cease to ceased and then available again.\n\n\nCustomer view of their cross connects.\n\n\nPublic (visible to customers) and private notes per cross connect.\n\n\nAttach public and private files to cross connects (such as test results, completion documents, order forms, etc).\n\n\nMaintain complete history of a patch panel port.\n\n\nGenerate and email LoAs (as PDF) with a URL verification function for co-location providers.\n\n\nGenerate emails for connection and cease requests as well as an email providing full customer view of a cross connect.\n\n\nTypically fibre ports are \nduplex\n ports but there is a growing use of BiDi optics meaning simplex ports. Our implementation treats all ports as simplex but you can mark it as duplex and set its partner port.\n\n\n\n\nDuplex Fibre Ports\n\n\nWe suggest adding fibre ports as two ports per duplex port. I.e. if your patch panel has 12 duplex ports, enter this as 24 ports. When allocating ports later, you can set it as a duplex port and select its \npartner / slave port\n. This will future proof your patch panels for the growing use of bidi optics and other simplex based xWDM fibre solutions.\n\n\nFrom our experience, duplex fibre ports are often identified as their individual strands. For example, \nduplex port 5\n would be referenced as \nF9/F10\n.\n\n\nYour mileage may vary on this but we need to allow this flexibility to cover both use-cases. You always have options however:\n\n\n\n\nyou can change the presentation of how these ports are referenced externally by \nskinning\n the templates.\n\n\nyou have the option to edit emails before they are sent to also present this as you wish.\n\n\nyou can chose to treat duplex ports as single ports rather than doubling them up.\n\n\nwhen you have duplex ports on a patch panel, IXP Manager will provide a duplex view by default with a CSS-based toggle to reveal the typical partner ports.\n\n\nif you think IXP Manager can make this easier, please talk to us. \nBut we cannot cover every use case programatically. We've opted to allow flexibility rather than dictate a particular format.\n\n\n\n\nAdding a Patch Panel\n\n\nThe following image shows a typical \nadd a new patch panel\n form (as of v4.3). You'll note that clicking \nHelp\n provides detailed context aware help messages.\n\n\n\n\nMost of this is self-explanatory but:\n\n\n\n\nBy default, we set the \nColocation Reference\n to the \nPatch Panel Name\n. We are not sure it's a good idea for IXPs to create a second name different to the co-location provider's but this option is available to you. \nSeriously, think about what you are doing here - more references means more confusion!\n The cabinet and cable type is displayed in the list of patch panels so even with obscure data centre references, it should be easy to find what you need.\n\n\nLocation Notes\n: Data centre / co-location providers do a lot of weird, wonderful and strange things! They provide multiple references for a single patch panel (IXP cabinet, MMR, etc.), they get taken over and re-reference everything or even provide no discernable reference. The field is a freetext field that will be included (and parsed as Markdown) in all emails generated by IXP Manager to help you help them identify a patch panel!\n\n\n\n\nIn addition to that, we will also use a cabinets \nU's are counted from top/bottom\n, and a patch panel's \nU position\n and \nmounted at front/rear\n to also create a location description.\n\n When setting the \nNumber of Ports\n, ensure you count duplex fibre ports as \ntwo ports\n. So 12 duplex fibre ports would be entered as 24. When editing a patch panel, this input field represents the number of additional ports you want to add to a patch panel and thus defaults to 0 in that situation.\n\n \nPort Name Prefix\n: This is an optional field intended for use on fibre patch panels. As an example, you may wish to prefix individual fibre strands in a duplex port with F which would mean the name of a duplex port would be displayed as F1/F2.\n* \nChargeable\n: Usually IXPs request their members to come to them and bear the costs of that. However, sometimes a co-location facility may charge the IXP for a half circuit or the IXP may need order and pay for the connection. Setting this only sets the default option when allocating ports to members later. The options are Yes / No / Half / Other.\n\n\nFiltering Patch Panel Ports\n\n\nQuite often, all you are looking for is a free in a particular location (data centre) or cabinet of a particular cable type (UTP / SMF / etc.).\n\n\nIXP Manager makes this easy from the \nPatch Panels\n page via the top right button labeled \nFilter Options\n. When clicked, this yields an advanced search as follows:\n\n\n\n\nCabinets auto-fills when you chose (or change) a location.\n\n\nPatch Panel Port States\n\n\nA patch panel port can have the following states:\n\n\n\n\nAvailable\n: The port is free and available for use.\n\n\nPrewired\n: This is equivalent to available but it means the port is prewired to a given switchport (you set the port when setting the prewired status). This is useful for IXPs that prewire a bunch of ports to avoid remote hands costs / data centre visits.\n\n\nAwaiting Xconnect\n: Port has been assigned to a member and we are awaiting the co-location provider to install the cross connect. In this state, context aware actions such as emailing connection requests, LoA generation and \nSet Connected\n are all available.\n\n\nConnected\n: Connected and in use.\n\n\nAwaiting Cease\n: This connection is no longer required and we are awaiting the end user / co-location provider to cease the connection.\n\n\nCeased\n: You will never see a ceased state. When a cross connect is marked as ceased, it's current state is archived (for history, include files) and the port is reset to \nAvailable\n. We do not revert to \nPrewired\n but an information message is shown to the user to hint this.\n\n\nReserved\n: Useful to mark particular ports as \noff limits\n for whatever reason.\n\n\nBroken\n\n\nOther\n\n\n\n\nFree / Available Ports\n\n\nIXP Manager will colour ports in the \nAvailable\n, \nPrewired\n and \nAwaiting Cease\n states are green allowing an easy visual indication of available ports.\n\n\nPatch Panel Port Lifecycle\n\n\nPatch panel ports start as either \navailable\n or \nprewired\n. The context menu in these states is:\n\n\n\n\n\n\nUnset Prewired\n is available as this port has a \nPrewired\n status. Clicking this reverts it to plain \nAvailable\n and disassociates it from the prewired port.\n\n\nEdit Note...\n is always available and provides a pop up to edit public and private notes associated with the port (current lifecycle - ceased ports have their notes at that time archived and cleared).\n\n\n\n\nThe main lifecycle option here is \nAllocate\n:\n\n\n\n\n\n\n\n\nDescription\n: A one line short description to be shown in the list of patch panel ports. Just enough to help explain the ports purpose. Detailed information should be placed in the notes section. Can also be used to explain a reserved / broken / other port. Note that this is parsed as Markdown. \nNB:\n A description is discouraged for customer ports connected to a switch. The customer name and switch port are the description.\n\n\n\n\n\n\nColocation Circuit Reference\n: this is the reference provided by the colocation provider to uniquely reference this cross connect.\n\n\n\n\n\n\nTicket Reference(s)\n: This is a free text field to be used by IXPs as they wish. The intended use is to enter helpdesk ticket references that relate to this cross connect order.\n\n\n\n\n\n\nDuplex connection?\n: Clicking this allows you to select the slave port for duplex connections.\n\n\n\n\n\n\nSwitch / Switch Port\n / \nCustomer\n: You have a number of options when allocating a port:\n\n\n\n\n\n\nIf the port is pre-wired then the switch / switch port will be set here.\n\n\n\n\nIf you chose a switch port which has been allocated to a customer, then this patch panel port will also be allocated to that customer. The backend logic will detect if this is the case and update the customer field.\n\n\nConversely, if you chose a customer first, the switch / switch port dropdowns will be populated with only that customer's assigned ports.\n\n\nSometimes you will get cross connects that are not intended to be connected to peering switches (e.g. connections to co-located customer equipment, IXP metro connections, etc.). In these cases, just select the customer (and if it's the IXP itself, select the IXP customer) and leave switch / switch port unselected.\n\n\n\n\nIf you need to reset these fields, just click either of the Reset button.\n\n\n\n\n\n\nPatch Panel Port Status\n: when allocating a port, this will allow you to set the state to \nAwaiting Xconnect\n or \nConnected\n.\n\n\n\n\n\n\nPhysical Interface Status\n: this is not depicted above. If the selected switch port has already been assigned to a customer by way of a physical interface, you will have the option to update this here also.\n\n\n\n\n\n\nPublic\n and \nPrivate Notes\n: Public notes are available to the customer. Both fields are interpreted as Markdown.\n\n\n\n\n\n\nChargeable\n: Usually IXPs request their members to come to them and bear the costs of that. However, sometimes a co-location facility may charge the IXP for a half circuit or the IXP may need order and pay for the connection. The options are Yes / No / Half / Other. How individual IXPs use this is up to them.\n\n\n\n\n\n\nInternal Use\n: Marks the port as used by the IXP itself. E.g. metro connections.\n\n\n\n\n\n\nOwned By\n: Useful indication for billing and cease requests. Should represent the contractural owner of the cross connect. One of: Customer, IXP, Service Provider, Data Centre, Other. \nService Provider\n might be a metro provider where they ordered the cross connect.\n\n\n\n\n\n\nOnce a port is allocated, it enters the \nAwaiting XConnect\n / \nConnected\n state and there are additional context menu options available:\n\n\n\n\nThe three lifecycle actions are:\n\n\n\n\nSet Connected\n: updates the status (and allows you to add public/private notes). You next action after this should be \nEmail - Connect\n.\n\n\nSet Awaiting Cease\n: mark the port and pending disconnection. Your next action after this should be \nEmail - Cease\n.\n\n\nSet Ceased\n: this is a \ntransitive state\n in that it doesn't \nstick\n. When you mark a patch panel as ceased, the existing details (including files and notes) are archived as part of the port's history and then port is then cleared and made available again.\n\n\n\n\nFile Attachments\n\n\nOver the lifetime of a cross connect - and particularly when it is being ordered, there may be files exchanges between you and your customers or the colocation provider. These can be added to the patch panel port via the \nAttach File...\n option.\n\n\nThe dialog will dynamically determine the maximum file upload size based on your PHP settings. To alter this, change the following in your server's appropriate \nphp.ini\n:\n\n\n; Maximum allowed size for uploaded files.\nupload_max_filesize = 40M\n\n; Must be greater than or equal to upload_max_filesize\npost_max_size = 40M\n\n\n\n\nPlease search the internet for further help as this is outside the scope of IXP Manager documentation.\n\n\nThe following features apply to file attachments:\n\n\n\n\nthey are archived along with the port history when a cross connect is ceased.\n\n\nthey are stored under \n$IXPROOT/storage/files/ppp\n.\n\n\ntwo files of the same name cannot be uploaded for a single patch panel port.\n\n\nthey can be marked as public or private:\n\n\npublic files are accessible to the customer through their own dashboard.\n\n\npublic files are attached to the \nEmail - Information\n email.\n\n\n\n\nLoA Generation\n\n\nMany co-location providers will not accept a cross connect order without a LoA \n(Letter of Agency/Authority)\n from the party to whom the cross connect is to be delivered (typically the IXP).\n\n\nIXP Manager will generate a PDF LoA to download or include in the emails it generates for you. Here is an example:\n\n\n\n\nYou will need to \nskin\n this yourself to change the legalese, address and contact details and potentially add a logo. See the version INEX uses \nhere\n (which includes and embedded PNG logo).\n\n\nNote that \nDompdf\n is used to turn the HTML template into a PDF and it has some restrictions.\n\n\nYou have two options for generating LoAs (without having IXP Manager email them):\n\n\n\n\nDownload PDF\n: downloads the PDF via your browser.\n\n\nView PDF\n: displays the PDF LoA in your browser (where browser supports it).\n\n\n\n\nLoA Verification\n\n\nThe stock LoA template (and INEX's version) includes a link that allows co-location browsers to click on to verify its veracity.\n\n\nOn successful verification, the end user sees:\n\n\n\n\nEmail Generation\n\n\nIXP Manager allows you to send four emails related to patch panels / cross connects (port status dependent). These are listed below. The Email editor looks as follows:\n\n\n\n\nNote that:\n\n\n\n\nthe option to attach a PDF LoA is a checkbox.\n\n\nthe email is written in Markdown with a preview available. The email is sent as both HTML (from the Markdown) and the plaintext version.\n\n\n\n\nThe four email templates available are:\n\n\n\n\nEmail - Connect\n: Email the customer a request to order a cross connect to the given demarcation points. A LoA is attached as a PDF by default unless you uncheck the box in the email editor.\n\n\nEmail - Cease\n: Email the customer a request to cease a cross connect.\n\n\nEmail - Information\n: Email the customer all details on file about a cross connect. We often get requests for this at INEX and this simplifies the process. The generated email includes:\n\n\nthe standard details regarding port and co-location reference;\n\n\npublic notes;\n\n\npublic files as attachments.\n\n\nEmail - LoA\n: Email a LoA to the customer as attached as a PDF. This is similar to \nEmail - Connect\n but it is more reflective of a typical response to a second request for a LoA.\n\n\n\n\nAll email templates can be \nskinned\n for your own needs. See INEX's example skins \nhere\n.\n\n\nViewing Patch Panel Details and Archives\n\n\nEach patch panel port row has the following button:\n\n\n\n\nThe number in the badge indicates how many historical records are available.\n\n\nClicking on the button yields the following view screen:\n\n\n\n\nDevelopment History\n\n\nThe Patch Panels functionality was developed during Q1 2017 and added in March 2017. This was made possible from sponsorship which enabled us to hire a new full time developer. We are especially grateful to our sponsors - \nplease see them here\n.", 
            "title": "Patch Panels"
        }, 
        {
            "location": "/features/patch-panels/#patch-panels-cross-connects", 
            "text": "One of the more difficult things for an IXP to manage is the sheer volume of patch panels / cross connects they need to manage. We have approached the issue a number of times in IXP Manger but abandoned the attempt every time. Typically our original solutions were over-engineered where all we really needed was something which could replace a spreadsheet per panel.  We believe we have now developed a feature complete and useful means of managing patch panels and associated cross connects.", 
            "title": "Patch Panels / Cross Connects"
        }, 
        {
            "location": "/features/patch-panels/#features", 
            "text": "Add / edit patch panels  (which includes cable and connector types).  List associated patch panel ports which includes:  their state (such as available / prewired, awaiting cross connect, connected, awaiting cease, reserved, broken).  associated customer and/or switchport.  co-location provider's circuit reference.  internal ticket references.  Transition ports from available / prewired to awaiting x-connect to connected to awaiting cease to ceased and then available again.  Customer view of their cross connects.  Public (visible to customers) and private notes per cross connect.  Attach public and private files to cross connects (such as test results, completion documents, order forms, etc).  Maintain complete history of a patch panel port.  Generate and email LoAs (as PDF) with a URL verification function for co-location providers.  Generate emails for connection and cease requests as well as an email providing full customer view of a cross connect.  Typically fibre ports are  duplex  ports but there is a growing use of BiDi optics meaning simplex ports. Our implementation treats all ports as simplex but you can mark it as duplex and set its partner port.", 
            "title": "Features"
        }, 
        {
            "location": "/features/patch-panels/#duplex-fibre-ports", 
            "text": "We suggest adding fibre ports as two ports per duplex port. I.e. if your patch panel has 12 duplex ports, enter this as 24 ports. When allocating ports later, you can set it as a duplex port and select its  partner / slave port . This will future proof your patch panels for the growing use of bidi optics and other simplex based xWDM fibre solutions.  From our experience, duplex fibre ports are often identified as their individual strands. For example,  duplex port 5  would be referenced as  F9/F10 .  Your mileage may vary on this but we need to allow this flexibility to cover both use-cases. You always have options however:   you can change the presentation of how these ports are referenced externally by  skinning  the templates.  you have the option to edit emails before they are sent to also present this as you wish.  you can chose to treat duplex ports as single ports rather than doubling them up.  when you have duplex ports on a patch panel, IXP Manager will provide a duplex view by default with a CSS-based toggle to reveal the typical partner ports.  if you think IXP Manager can make this easier, please talk to us.  But we cannot cover every use case programatically. We've opted to allow flexibility rather than dictate a particular format.", 
            "title": "Duplex Fibre Ports"
        }, 
        {
            "location": "/features/patch-panels/#adding-a-patch-panel", 
            "text": "The following image shows a typical  add a new patch panel  form (as of v4.3). You'll note that clicking  Help  provides detailed context aware help messages.   Most of this is self-explanatory but:   By default, we set the  Colocation Reference  to the  Patch Panel Name . We are not sure it's a good idea for IXPs to create a second name different to the co-location provider's but this option is available to you.  Seriously, think about what you are doing here - more references means more confusion!  The cabinet and cable type is displayed in the list of patch panels so even with obscure data centre references, it should be easy to find what you need.  Location Notes : Data centre / co-location providers do a lot of weird, wonderful and strange things! They provide multiple references for a single patch panel (IXP cabinet, MMR, etc.), they get taken over and re-reference everything or even provide no discernable reference. The field is a freetext field that will be included (and parsed as Markdown) in all emails generated by IXP Manager to help you help them identify a patch panel!   In addition to that, we will also use a cabinets  U's are counted from top/bottom , and a patch panel's  U position  and  mounted at front/rear  to also create a location description.  When setting the  Number of Ports , ensure you count duplex fibre ports as  two ports . So 12 duplex fibre ports would be entered as 24. When editing a patch panel, this input field represents the number of additional ports you want to add to a patch panel and thus defaults to 0 in that situation.   Port Name Prefix : This is an optional field intended for use on fibre patch panels. As an example, you may wish to prefix individual fibre strands in a duplex port with F which would mean the name of a duplex port would be displayed as F1/F2.\n*  Chargeable : Usually IXPs request their members to come to them and bear the costs of that. However, sometimes a co-location facility may charge the IXP for a half circuit or the IXP may need order and pay for the connection. Setting this only sets the default option when allocating ports to members later. The options are Yes / No / Half / Other.", 
            "title": "Adding a Patch Panel"
        }, 
        {
            "location": "/features/patch-panels/#filtering-patch-panel-ports", 
            "text": "Quite often, all you are looking for is a free in a particular location (data centre) or cabinet of a particular cable type (UTP / SMF / etc.).  IXP Manager makes this easy from the  Patch Panels  page via the top right button labeled  Filter Options . When clicked, this yields an advanced search as follows:   Cabinets auto-fills when you chose (or change) a location.", 
            "title": "Filtering Patch Panel Ports"
        }, 
        {
            "location": "/features/patch-panels/#patch-panel-port-states", 
            "text": "A patch panel port can have the following states:   Available : The port is free and available for use.  Prewired : This is equivalent to available but it means the port is prewired to a given switchport (you set the port when setting the prewired status). This is useful for IXPs that prewire a bunch of ports to avoid remote hands costs / data centre visits.  Awaiting Xconnect : Port has been assigned to a member and we are awaiting the co-location provider to install the cross connect. In this state, context aware actions such as emailing connection requests, LoA generation and  Set Connected  are all available.  Connected : Connected and in use.  Awaiting Cease : This connection is no longer required and we are awaiting the end user / co-location provider to cease the connection.  Ceased : You will never see a ceased state. When a cross connect is marked as ceased, it's current state is archived (for history, include files) and the port is reset to  Available . We do not revert to  Prewired  but an information message is shown to the user to hint this.  Reserved : Useful to mark particular ports as  off limits  for whatever reason.  Broken  Other", 
            "title": "Patch Panel Port States"
        }, 
        {
            "location": "/features/patch-panels/#free-available-ports", 
            "text": "IXP Manager will colour ports in the  Available ,  Prewired  and  Awaiting Cease  states are green allowing an easy visual indication of available ports.", 
            "title": "Free / Available Ports"
        }, 
        {
            "location": "/features/patch-panels/#patch-panel-port-lifecycle", 
            "text": "Patch panel ports start as either  available  or  prewired . The context menu in these states is:    Unset Prewired  is available as this port has a  Prewired  status. Clicking this reverts it to plain  Available  and disassociates it from the prewired port.  Edit Note...  is always available and provides a pop up to edit public and private notes associated with the port (current lifecycle - ceased ports have their notes at that time archived and cleared).   The main lifecycle option here is  Allocate :     Description : A one line short description to be shown in the list of patch panel ports. Just enough to help explain the ports purpose. Detailed information should be placed in the notes section. Can also be used to explain a reserved / broken / other port. Note that this is parsed as Markdown.  NB:  A description is discouraged for customer ports connected to a switch. The customer name and switch port are the description.    Colocation Circuit Reference : this is the reference provided by the colocation provider to uniquely reference this cross connect.    Ticket Reference(s) : This is a free text field to be used by IXPs as they wish. The intended use is to enter helpdesk ticket references that relate to this cross connect order.    Duplex connection? : Clicking this allows you to select the slave port for duplex connections.    Switch / Switch Port  /  Customer : You have a number of options when allocating a port:    If the port is pre-wired then the switch / switch port will be set here.   If you chose a switch port which has been allocated to a customer, then this patch panel port will also be allocated to that customer. The backend logic will detect if this is the case and update the customer field.  Conversely, if you chose a customer first, the switch / switch port dropdowns will be populated with only that customer's assigned ports.  Sometimes you will get cross connects that are not intended to be connected to peering switches (e.g. connections to co-located customer equipment, IXP metro connections, etc.). In these cases, just select the customer (and if it's the IXP itself, select the IXP customer) and leave switch / switch port unselected.   If you need to reset these fields, just click either of the Reset button.    Patch Panel Port Status : when allocating a port, this will allow you to set the state to  Awaiting Xconnect  or  Connected .    Physical Interface Status : this is not depicted above. If the selected switch port has already been assigned to a customer by way of a physical interface, you will have the option to update this here also.    Public  and  Private Notes : Public notes are available to the customer. Both fields are interpreted as Markdown.    Chargeable : Usually IXPs request their members to come to them and bear the costs of that. However, sometimes a co-location facility may charge the IXP for a half circuit or the IXP may need order and pay for the connection. The options are Yes / No / Half / Other. How individual IXPs use this is up to them.    Internal Use : Marks the port as used by the IXP itself. E.g. metro connections.    Owned By : Useful indication for billing and cease requests. Should represent the contractural owner of the cross connect. One of: Customer, IXP, Service Provider, Data Centre, Other.  Service Provider  might be a metro provider where they ordered the cross connect.    Once a port is allocated, it enters the  Awaiting XConnect  /  Connected  state and there are additional context menu options available:   The three lifecycle actions are:   Set Connected : updates the status (and allows you to add public/private notes). You next action after this should be  Email - Connect .  Set Awaiting Cease : mark the port and pending disconnection. Your next action after this should be  Email - Cease .  Set Ceased : this is a  transitive state  in that it doesn't  stick . When you mark a patch panel as ceased, the existing details (including files and notes) are archived as part of the port's history and then port is then cleared and made available again.", 
            "title": "Patch Panel Port Lifecycle"
        }, 
        {
            "location": "/features/patch-panels/#file-attachments", 
            "text": "Over the lifetime of a cross connect - and particularly when it is being ordered, there may be files exchanges between you and your customers or the colocation provider. These can be added to the patch panel port via the  Attach File...  option.  The dialog will dynamically determine the maximum file upload size based on your PHP settings. To alter this, change the following in your server's appropriate  php.ini :  ; Maximum allowed size for uploaded files.\nupload_max_filesize = 40M\n\n; Must be greater than or equal to upload_max_filesize\npost_max_size = 40M  Please search the internet for further help as this is outside the scope of IXP Manager documentation.  The following features apply to file attachments:   they are archived along with the port history when a cross connect is ceased.  they are stored under  $IXPROOT/storage/files/ppp .  two files of the same name cannot be uploaded for a single patch panel port.  they can be marked as public or private:  public files are accessible to the customer through their own dashboard.  public files are attached to the  Email - Information  email.", 
            "title": "File Attachments"
        }, 
        {
            "location": "/features/patch-panels/#loa-generation", 
            "text": "Many co-location providers will not accept a cross connect order without a LoA  (Letter of Agency/Authority)  from the party to whom the cross connect is to be delivered (typically the IXP).  IXP Manager will generate a PDF LoA to download or include in the emails it generates for you. Here is an example:   You will need to  skin  this yourself to change the legalese, address and contact details and potentially add a logo. See the version INEX uses  here  (which includes and embedded PNG logo).  Note that  Dompdf  is used to turn the HTML template into a PDF and it has some restrictions.  You have two options for generating LoAs (without having IXP Manager email them):   Download PDF : downloads the PDF via your browser.  View PDF : displays the PDF LoA in your browser (where browser supports it).", 
            "title": "LoA Generation"
        }, 
        {
            "location": "/features/patch-panels/#loa-verification", 
            "text": "The stock LoA template (and INEX's version) includes a link that allows co-location browsers to click on to verify its veracity.  On successful verification, the end user sees:", 
            "title": "LoA Verification"
        }, 
        {
            "location": "/features/patch-panels/#email-generation", 
            "text": "IXP Manager allows you to send four emails related to patch panels / cross connects (port status dependent). These are listed below. The Email editor looks as follows:   Note that:   the option to attach a PDF LoA is a checkbox.  the email is written in Markdown with a preview available. The email is sent as both HTML (from the Markdown) and the plaintext version.   The four email templates available are:   Email - Connect : Email the customer a request to order a cross connect to the given demarcation points. A LoA is attached as a PDF by default unless you uncheck the box in the email editor.  Email - Cease : Email the customer a request to cease a cross connect.  Email - Information : Email the customer all details on file about a cross connect. We often get requests for this at INEX and this simplifies the process. The generated email includes:  the standard details regarding port and co-location reference;  public notes;  public files as attachments.  Email - LoA : Email a LoA to the customer as attached as a PDF. This is similar to  Email - Connect  but it is more reflective of a typical response to a second request for a LoA.   All email templates can be  skinned  for your own needs. See INEX's example skins  here .", 
            "title": "Email Generation"
        }, 
        {
            "location": "/features/patch-panels/#viewing-patch-panel-details-and-archives", 
            "text": "Each patch panel port row has the following button:   The number in the badge indicates how many historical records are available.  Clicking on the button yields the following view screen:", 
            "title": "Viewing Patch Panel Details and Archives"
        }, 
        {
            "location": "/features/patch-panels/#development-history", 
            "text": "The Patch Panels functionality was developed during Q1 2017 and added in March 2017. This was made possible from sponsorship which enabled us to hire a new full time developer. We are especially grateful to our sponsors -  please see them here .", 
            "title": "Development History"
        }, 
        {
            "location": "/features/routers/", 
            "text": "Routers\n\n\nNote that a number of pages redirect here where we have collated documentation on route collectors, route servers, AS112 servcies and IRRDB filtering.\n\n\nIXP Manager can generate router configuration for typical IXP services such as route collectors, route servers and AS112 services. How this is done has been changed significantly from v3 to v4.\n\n\n\n\nNote that until officially deprecated, the older v3 methods still work and the \nofficial v3 documentation\n should be referenced for that.\n\n\n\n\nConfiguration Overview\n\n\nThe basic elements of \na router\n are configured in \nconfigs/routers.php\n. This is an optional file that is not included in version control so the best way to start it is to copy from the template:\n\n\ncp config/routers.php.dist config/routers.php\n\n\n\n\nA typical entry of a sample router (in standard PHP associative array syntax) is:\n\n\n?php\n    'rc1-lan1-ipv4' =\n [\n        'vlan_id'    =\n 1,\n        'protocol'   =\n 4,\n        'type'       =\n 'RC',   // RC|RS|AS112?\n        'name'       =\n 'INEX LAN1 - Route Collector - IPv4',\n        'shortname'  =\n 'RC1 - LAN1 - IPv4',\n        'router_id'  =\n '192.0.2.8',\n        'peering_ip' =\n '192.0.2.8',\n        'asn'        =\n 65500,\n        'software'   =\n 'bird',\n        'mgmt_ip'    =\n '203.0.113.8',\n        'api'        =\n 'http://rc1-lan1-ipv4.mgmt.example.com/api',\n        'api_type'   =\n 'birdseye',\n        'lg_access'  =\n Entities\\User::AUTH_PUBLIC,\n        'quarantine' =\n false,\n        'bgp_lc'     =\n false,\n        'template'   =\n 'api/v4/router/collector/bird/standard',\n    ],\n\n\n\n\nwhere:\n\n\n\n\nrc1-lan1-ipv4\n is the \nhandle\n for this router to be used in API calls later (it's the key of the PHP associative array).\n\n\nvlan_id\n is not the VLAN 802.1q tag number but the \nvlan.id\n database column. You can get this, for example, by hovering over the edit action in the VLAN listing in IXP Manager and finding the number in the URL.\n\n\nprotocol\n is either \n4\n (IPv4) or \n6\n (IPv6). Any other value will lead to a runtime exception.\n\n\nwe have currently defined three types which are used for grouping routers in the UI and for other selection purposes:\n\n\nRC\n - route collector;\n\n\nRS\n - route server;\n\n\nAS112\n - an AS112 BGP peer (see \nINEX's AS112 documentation\n as an example).\n\n\nname\n - name / description of the router's purpose.\n\n\nshortname\n - used in dropdowns or other space constrained areas where \nname\n may be too long.\n\n\nrouter_id\n - the router's BGP ID (e.g. \n192.0.2.8\n).\n\n\npeering_ip\n - the IPv4/6 address that this router initiates BGP peering sessions from.\n\n\nasn\n - the router's AS number.\n\n\nsoftware\n - there is no specific use for this as yet.\n\n\nmgmt_ip\n - the IP to address this server / router at for management functions such as Nagios monitoring.\n\n\napi\n and \napi_type\n - the API end point for this server/router. The only use case for this so far is for the built-in \nlooking glass\n functionality via \nBirdseye\n.\n\n\nlg_access\n - who should be allow access the looking glass. One of:\n\n\nAUTH_PUBLIC\n - publicly available to all;\n\n\nAUTH_CUSTUSER\n - must be logged into IXP Manager as any user;\n\n\nAUTH_SUPERUSER\n - must be logged into IXP Manager as an administrator (no customer access).\n\n\nquarantine\n - a flag to indicate if this router is part of the IXP's quarantine / test infrastructure. For example, INEX runs two parallel route collectors: one quarantine and one production. When customers have issues or are being provisioned, they are placed in the quarantine LAN and we can examine BGP announcements safely on the non-production quarantine devices. When a router is marked as quarantine, it is only visible in looking glass dropdowns to customers who also have a port in quarantine (physical interface status).\n\n\nbgp_lc\n - a flag to indicate if the router supports \nRFC8092\n / \nlarge BGP communities\n.\n\n\ntemplate\n - the template to use to generate the configuration. See stock examples \nhere\n (and note that \nskinning\n is supported).\n\n\n\n\nTypically your \nrouters.php\n file would hold multiple such entries. It is our intention to move this into the UI and database.\n\n\nGeneration Overview\n\n\nThe simplest configuration to generate is the route collector configuration. A route collector is an IXP router which serves only to \naccept all routes and export no routes\n. It is used for problem diagnosis, to aid customer monitoring and for looking glasses (see \nINEX's here\n.\n\n\nThe \nstandard configuration\n simply pulls in a fairly standard header (sets up router ID, listening address and - for the collector at least - some unused filters) and creates a session for all customer routers on the given VLAN (see \nvlan_id\n above).\n\n\nIn the above example, the route handle is the array's associative key (\nrc1-lan1-ipv4\n) and - for the given router handle - the configuration can be generated via:\n\n\n# The key is generated in IXP Manager via the top right menu: *My Account -\n API Keys*\nKEY=\nyour-admin-ixp-manager-api-key\n\n# The base URL of your IXP Manager install plus: 'api/v4/router/gen_config'\nURL=\nhttps://ixp.example.com/api/v4/router/gen_config\n\n# The handle is the PHP associative key from `config/routers.php` as described above\nHANDLE=\nrc1-lan1-ipv4\n\n# Then the complete URL is formed as:\ncurl --fail -s -H \nX-IXP-Manager-API-Key: ${KEY}\n ${URL}/${HANDLE} \n${HANDLE}.conf\n\n\n\n\nConfigurations for the route server and AS112 templates can be configured just as easily. The stock templates for both are secure and well tested and can be used by setting the \ntemplate\n element of the router configuration above to the following:\n\n\n\n\nAS112: \n'api/v4/router/as112/bird/standard'\n\n\nRoute Server: \n'api/v4/router/server/bird/standard'\n\n\n\n\nWe also provide sample scripts for automating the re-configuration of these services by cron. See the \n-v4\n scripts \nin this directory\n. These are quite robust and have been in production for ~3 years at INEX (as of Jan 2017).\n\n\nRoute Servers\n\n\nNormally on a peering exchange, all connected parties will establish bilateral peering relationships with each other customer connected to the exchange. As the number of connected parties increases, it becomes increasingly more difficult to manage peering relationships with customers of the exchange.\n\n\nHowever, by using a route servers for peering relationships, the number of BGP sessions per router stays at two: one for each route server (assuming a resilient set up). Clearly this is a more sustainable way of maintaining IXP peering relationships with a large number of participants.\n\n\nYou will have learnt above how to automatically generate route server configurations. This section goes into a bit more specific detail on INEX's route server configuration (shipped with IXP Manager) and why it's safe to use.\n\n\nThe features of the route server configurations that we generate include:\n\n\n\n\nfull prefix filtering based on IRRDB entries (can be disabled on a per member basis if required);\n\n\nfull origin ASN filtering based on IRRDB entries (can be disabled on a per member basis if required);\n\n\nin all cases, prefix filtering for IPv4 and v6 based on the IANA special purpose registries (also known as bogon lists);\n\n\nensuring next hop is the neighbor address to ensure no next hop hijacking;\n\n\nmax prefix limits;\n\n\nmultiple VLAN interfaces for a single member supported;\n\n\nlarge BGP communities supported;\n\n\na decade of production use and experience.\n\n\n\n\nThere are \nsome old notes on route server testing here\n which may also be useful.\n\n\nIRRDB Prefixes and ASN Filtering\n\n\nIXP Manager can maintain a list of member route:/route6: prefixes and origin ASNs as registered in IRRDBs in its database and then use these to, for example, generate strict inbound filters on route servers.\n\n\nPrerequisite:\n you need to have set up some IRRDB sources (e.g. RIPE's whois service) under the \nIXP Admin Actions / IRRDB Configuration\n on the left hand side menu. There is a database seeder to install some to start you off via the following (but thius is typically done during installation):\n\n\n./artisan db:seed --class=IRRDBs\n\n\n\n\nBGPQ3 is a very easy and fast way of querying IRRDBs. You first need to install this on your system. Then configure the path to it in \nconfig/ixp_tools.php\n. If you have not used this file before, you'll need to create your own local copy as follows:\n\n\ncp config/config/ixp_tools.php.dist config/config/ixp_tools.php\n\n\n\n\nThen set the full call path for \nbgpq3\n in this file:\n\n\n?php\n\n  'irrdb' =\n [\n        'bgpq' =\n [\n            'path' =\n '/path/to/bgpq3',\n        ],\n    ],\n\n\n\n\nTo populate (and update) your local IRRDB, run the following commands (changing the path as appropriate):\n\n\n/srv/ixpmanager/artisan irrdb:update-prefix-db\n/srv/ixpmanager/artisan irrdb:update-asn-db\n\n\n\n\nThese should be added to cron to run ~once per day (using the --quiet flag).\n\n\nThere are four levels of verbosity:\n\n\n\n\n-quiet\n: no output unless there's an error / issue.\n\n\nno option: simple stats on each customer's update results.\n\n\n-vv\n: include per customer and overall timings (database, processing and network).\n\n\n-vvv\n (debug): show prefixes/ASNs added remove also.\n\n\n\n\nYou can also specify a specific customer to update (rather than all) with an additional free form parameter. The database is searched for a matching customer in the order: customer ASN; customer ID (database primary key); and customer shortname. E.g.:\n\n\n/srv/ixpmanager/artisan irrdb:update-prefix-db 64511\n\n\n\n\nThe IRRDB update commands will:\n\n\n\n\niterate over all route server client customers for IPv4 and IPv6 (unless a specific customer is specified);\n\n\nuse the appropriate AS macro or ASN;\n\n\nquery the RADB against the appropriate source set for that customer;\n\n\ncompare prefixes(/ASNs) in the database already (if any) against RADB and insert / delete as appropriate;\n\n\nvalidate the prefix for proper CIDR notation before database inserts;\n\n\nupdate the last_seen time for all prefixes(/ASNs) for that customer;\n\n\n\n\nWe use transactions to update the database so, even in the middle of a refresh, a full set of prefixes for all customers will still be available.\n\n\nNote that our current implementation only queries RADB as BGPQ3 does not support the RIPE whois protocol.\n Our version will however set the RADB source database according to the member's stated IRRDB database as set on the customer add / edit page - so, for customer's registered with the RIPE IRRDB, the RIPE database of RADB is queried.", 
            "title": "Route Collector"
        }, 
        {
            "location": "/features/routers/#routers", 
            "text": "Note that a number of pages redirect here where we have collated documentation on route collectors, route servers, AS112 servcies and IRRDB filtering.  IXP Manager can generate router configuration for typical IXP services such as route collectors, route servers and AS112 services. How this is done has been changed significantly from v3 to v4.   Note that until officially deprecated, the older v3 methods still work and the  official v3 documentation  should be referenced for that.", 
            "title": "Routers"
        }, 
        {
            "location": "/features/routers/#configuration-overview", 
            "text": "The basic elements of  a router  are configured in  configs/routers.php . This is an optional file that is not included in version control so the best way to start it is to copy from the template:  cp config/routers.php.dist config/routers.php  A typical entry of a sample router (in standard PHP associative array syntax) is:  ?php\n    'rc1-lan1-ipv4' =  [\n        'vlan_id'    =  1,\n        'protocol'   =  4,\n        'type'       =  'RC',   // RC|RS|AS112?\n        'name'       =  'INEX LAN1 - Route Collector - IPv4',\n        'shortname'  =  'RC1 - LAN1 - IPv4',\n        'router_id'  =  '192.0.2.8',\n        'peering_ip' =  '192.0.2.8',\n        'asn'        =  65500,\n        'software'   =  'bird',\n        'mgmt_ip'    =  '203.0.113.8',\n        'api'        =  'http://rc1-lan1-ipv4.mgmt.example.com/api',\n        'api_type'   =  'birdseye',\n        'lg_access'  =  Entities\\User::AUTH_PUBLIC,\n        'quarantine' =  false,\n        'bgp_lc'     =  false,\n        'template'   =  'api/v4/router/collector/bird/standard',\n    ],  where:   rc1-lan1-ipv4  is the  handle  for this router to be used in API calls later (it's the key of the PHP associative array).  vlan_id  is not the VLAN 802.1q tag number but the  vlan.id  database column. You can get this, for example, by hovering over the edit action in the VLAN listing in IXP Manager and finding the number in the URL.  protocol  is either  4  (IPv4) or  6  (IPv6). Any other value will lead to a runtime exception.  we have currently defined three types which are used for grouping routers in the UI and for other selection purposes:  RC  - route collector;  RS  - route server;  AS112  - an AS112 BGP peer (see  INEX's AS112 documentation  as an example).  name  - name / description of the router's purpose.  shortname  - used in dropdowns or other space constrained areas where  name  may be too long.  router_id  - the router's BGP ID (e.g.  192.0.2.8 ).  peering_ip  - the IPv4/6 address that this router initiates BGP peering sessions from.  asn  - the router's AS number.  software  - there is no specific use for this as yet.  mgmt_ip  - the IP to address this server / router at for management functions such as Nagios monitoring.  api  and  api_type  - the API end point for this server/router. The only use case for this so far is for the built-in  looking glass  functionality via  Birdseye .  lg_access  - who should be allow access the looking glass. One of:  AUTH_PUBLIC  - publicly available to all;  AUTH_CUSTUSER  - must be logged into IXP Manager as any user;  AUTH_SUPERUSER  - must be logged into IXP Manager as an administrator (no customer access).  quarantine  - a flag to indicate if this router is part of the IXP's quarantine / test infrastructure. For example, INEX runs two parallel route collectors: one quarantine and one production. When customers have issues or are being provisioned, they are placed in the quarantine LAN and we can examine BGP announcements safely on the non-production quarantine devices. When a router is marked as quarantine, it is only visible in looking glass dropdowns to customers who also have a port in quarantine (physical interface status).  bgp_lc  - a flag to indicate if the router supports  RFC8092  /  large BGP communities .  template  - the template to use to generate the configuration. See stock examples  here  (and note that  skinning  is supported).   Typically your  routers.php  file would hold multiple such entries. It is our intention to move this into the UI and database.", 
            "title": "Configuration Overview"
        }, 
        {
            "location": "/features/routers/#generation-overview", 
            "text": "The simplest configuration to generate is the route collector configuration. A route collector is an IXP router which serves only to  accept all routes and export no routes . It is used for problem diagnosis, to aid customer monitoring and for looking glasses (see  INEX's here .  The  standard configuration  simply pulls in a fairly standard header (sets up router ID, listening address and - for the collector at least - some unused filters) and creates a session for all customer routers on the given VLAN (see  vlan_id  above).  In the above example, the route handle is the array's associative key ( rc1-lan1-ipv4 ) and - for the given router handle - the configuration can be generated via:  # The key is generated in IXP Manager via the top right menu: *My Account -  API Keys*\nKEY= your-admin-ixp-manager-api-key \n# The base URL of your IXP Manager install plus: 'api/v4/router/gen_config'\nURL= https://ixp.example.com/api/v4/router/gen_config \n# The handle is the PHP associative key from `config/routers.php` as described above\nHANDLE= rc1-lan1-ipv4 \n# Then the complete URL is formed as:\ncurl --fail -s -H  X-IXP-Manager-API-Key: ${KEY}  ${URL}/${HANDLE}  ${HANDLE}.conf  Configurations for the route server and AS112 templates can be configured just as easily. The stock templates for both are secure and well tested and can be used by setting the  template  element of the router configuration above to the following:   AS112:  'api/v4/router/as112/bird/standard'  Route Server:  'api/v4/router/server/bird/standard'   We also provide sample scripts for automating the re-configuration of these services by cron. See the  -v4  scripts  in this directory . These are quite robust and have been in production for ~3 years at INEX (as of Jan 2017).", 
            "title": "Generation Overview"
        }, 
        {
            "location": "/features/routers/#route-servers", 
            "text": "Normally on a peering exchange, all connected parties will establish bilateral peering relationships with each other customer connected to the exchange. As the number of connected parties increases, it becomes increasingly more difficult to manage peering relationships with customers of the exchange.  However, by using a route servers for peering relationships, the number of BGP sessions per router stays at two: one for each route server (assuming a resilient set up). Clearly this is a more sustainable way of maintaining IXP peering relationships with a large number of participants.  You will have learnt above how to automatically generate route server configurations. This section goes into a bit more specific detail on INEX's route server configuration (shipped with IXP Manager) and why it's safe to use.  The features of the route server configurations that we generate include:   full prefix filtering based on IRRDB entries (can be disabled on a per member basis if required);  full origin ASN filtering based on IRRDB entries (can be disabled on a per member basis if required);  in all cases, prefix filtering for IPv4 and v6 based on the IANA special purpose registries (also known as bogon lists);  ensuring next hop is the neighbor address to ensure no next hop hijacking;  max prefix limits;  multiple VLAN interfaces for a single member supported;  large BGP communities supported;  a decade of production use and experience.   There are  some old notes on route server testing here  which may also be useful.", 
            "title": "Route Servers"
        }, 
        {
            "location": "/features/routers/#irrdb-prefixes-and-asn-filtering", 
            "text": "IXP Manager can maintain a list of member route:/route6: prefixes and origin ASNs as registered in IRRDBs in its database and then use these to, for example, generate strict inbound filters on route servers.  Prerequisite:  you need to have set up some IRRDB sources (e.g. RIPE's whois service) under the  IXP Admin Actions / IRRDB Configuration  on the left hand side menu. There is a database seeder to install some to start you off via the following (but thius is typically done during installation):  ./artisan db:seed --class=IRRDBs  BGPQ3 is a very easy and fast way of querying IRRDBs. You first need to install this on your system. Then configure the path to it in  config/ixp_tools.php . If you have not used this file before, you'll need to create your own local copy as follows:  cp config/config/ixp_tools.php.dist config/config/ixp_tools.php  Then set the full call path for  bgpq3  in this file:  ?php\n\n  'irrdb' =  [\n        'bgpq' =  [\n            'path' =  '/path/to/bgpq3',\n        ],\n    ],  To populate (and update) your local IRRDB, run the following commands (changing the path as appropriate):  /srv/ixpmanager/artisan irrdb:update-prefix-db\n/srv/ixpmanager/artisan irrdb:update-asn-db  These should be added to cron to run ~once per day (using the --quiet flag).  There are four levels of verbosity:   -quiet : no output unless there's an error / issue.  no option: simple stats on each customer's update results.  -vv : include per customer and overall timings (database, processing and network).  -vvv  (debug): show prefixes/ASNs added remove also.   You can also specify a specific customer to update (rather than all) with an additional free form parameter. The database is searched for a matching customer in the order: customer ASN; customer ID (database primary key); and customer shortname. E.g.:  /srv/ixpmanager/artisan irrdb:update-prefix-db 64511  The IRRDB update commands will:   iterate over all route server client customers for IPv4 and IPv6 (unless a specific customer is specified);  use the appropriate AS macro or ASN;  query the RADB against the appropriate source set for that customer;  compare prefixes(/ASNs) in the database already (if any) against RADB and insert / delete as appropriate;  validate the prefix for proper CIDR notation before database inserts;  update the last_seen time for all prefixes(/ASNs) for that customer;   We use transactions to update the database so, even in the middle of a refresh, a full set of prefixes for all customers will still be available.  Note that our current implementation only queries RADB as BGPQ3 does not support the RIPE whois protocol.  Our version will however set the RADB source database according to the member's stated IRRDB database as set on the customer add / edit page - so, for customer's registered with the RIPE IRRDB, the RIPE database of RADB is queried.", 
            "title": "IRRDB Prefixes and ASN Filtering"
        }, 
        {
            "location": "/features/routers/", 
            "text": "Routers\n\n\nNote that a number of pages redirect here where we have collated documentation on route collectors, route servers, AS112 servcies and IRRDB filtering.\n\n\nIXP Manager can generate router configuration for typical IXP services such as route collectors, route servers and AS112 services. How this is done has been changed significantly from v3 to v4.\n\n\n\n\nNote that until officially deprecated, the older v3 methods still work and the \nofficial v3 documentation\n should be referenced for that.\n\n\n\n\nConfiguration Overview\n\n\nThe basic elements of \na router\n are configured in \nconfigs/routers.php\n. This is an optional file that is not included in version control so the best way to start it is to copy from the template:\n\n\ncp config/routers.php.dist config/routers.php\n\n\n\n\nA typical entry of a sample router (in standard PHP associative array syntax) is:\n\n\n?php\n    'rc1-lan1-ipv4' =\n [\n        'vlan_id'    =\n 1,\n        'protocol'   =\n 4,\n        'type'       =\n 'RC',   // RC|RS|AS112?\n        'name'       =\n 'INEX LAN1 - Route Collector - IPv4',\n        'shortname'  =\n 'RC1 - LAN1 - IPv4',\n        'router_id'  =\n '192.0.2.8',\n        'peering_ip' =\n '192.0.2.8',\n        'asn'        =\n 65500,\n        'software'   =\n 'bird',\n        'mgmt_ip'    =\n '203.0.113.8',\n        'api'        =\n 'http://rc1-lan1-ipv4.mgmt.example.com/api',\n        'api_type'   =\n 'birdseye',\n        'lg_access'  =\n Entities\\User::AUTH_PUBLIC,\n        'quarantine' =\n false,\n        'bgp_lc'     =\n false,\n        'template'   =\n 'api/v4/router/collector/bird/standard',\n    ],\n\n\n\n\nwhere:\n\n\n\n\nrc1-lan1-ipv4\n is the \nhandle\n for this router to be used in API calls later (it's the key of the PHP associative array).\n\n\nvlan_id\n is not the VLAN 802.1q tag number but the \nvlan.id\n database column. You can get this, for example, by hovering over the edit action in the VLAN listing in IXP Manager and finding the number in the URL.\n\n\nprotocol\n is either \n4\n (IPv4) or \n6\n (IPv6). Any other value will lead to a runtime exception.\n\n\nwe have currently defined three types which are used for grouping routers in the UI and for other selection purposes:\n\n\nRC\n - route collector;\n\n\nRS\n - route server;\n\n\nAS112\n - an AS112 BGP peer (see \nINEX's AS112 documentation\n as an example).\n\n\nname\n - name / description of the router's purpose.\n\n\nshortname\n - used in dropdowns or other space constrained areas where \nname\n may be too long.\n\n\nrouter_id\n - the router's BGP ID (e.g. \n192.0.2.8\n).\n\n\npeering_ip\n - the IPv4/6 address that this router initiates BGP peering sessions from.\n\n\nasn\n - the router's AS number.\n\n\nsoftware\n - there is no specific use for this as yet.\n\n\nmgmt_ip\n - the IP to address this server / router at for management functions such as Nagios monitoring.\n\n\napi\n and \napi_type\n - the API end point for this server/router. The only use case for this so far is for the built-in \nlooking glass\n functionality via \nBirdseye\n.\n\n\nlg_access\n - who should be allow access the looking glass. One of:\n\n\nAUTH_PUBLIC\n - publicly available to all;\n\n\nAUTH_CUSTUSER\n - must be logged into IXP Manager as any user;\n\n\nAUTH_SUPERUSER\n - must be logged into IXP Manager as an administrator (no customer access).\n\n\nquarantine\n - a flag to indicate if this router is part of the IXP's quarantine / test infrastructure. For example, INEX runs two parallel route collectors: one quarantine and one production. When customers have issues or are being provisioned, they are placed in the quarantine LAN and we can examine BGP announcements safely on the non-production quarantine devices. When a router is marked as quarantine, it is only visible in looking glass dropdowns to customers who also have a port in quarantine (physical interface status).\n\n\nbgp_lc\n - a flag to indicate if the router supports \nRFC8092\n / \nlarge BGP communities\n.\n\n\ntemplate\n - the template to use to generate the configuration. See stock examples \nhere\n (and note that \nskinning\n is supported).\n\n\n\n\nTypically your \nrouters.php\n file would hold multiple such entries. It is our intention to move this into the UI and database.\n\n\nGeneration Overview\n\n\nThe simplest configuration to generate is the route collector configuration. A route collector is an IXP router which serves only to \naccept all routes and export no routes\n. It is used for problem diagnosis, to aid customer monitoring and for looking glasses (see \nINEX's here\n.\n\n\nThe \nstandard configuration\n simply pulls in a fairly standard header (sets up router ID, listening address and - for the collector at least - some unused filters) and creates a session for all customer routers on the given VLAN (see \nvlan_id\n above).\n\n\nIn the above example, the route handle is the array's associative key (\nrc1-lan1-ipv4\n) and - for the given router handle - the configuration can be generated via:\n\n\n# The key is generated in IXP Manager via the top right menu: *My Account -\n API Keys*\nKEY=\nyour-admin-ixp-manager-api-key\n\n# The base URL of your IXP Manager install plus: 'api/v4/router/gen_config'\nURL=\nhttps://ixp.example.com/api/v4/router/gen_config\n\n# The handle is the PHP associative key from `config/routers.php` as described above\nHANDLE=\nrc1-lan1-ipv4\n\n# Then the complete URL is formed as:\ncurl --fail -s -H \nX-IXP-Manager-API-Key: ${KEY}\n ${URL}/${HANDLE} \n${HANDLE}.conf\n\n\n\n\nConfigurations for the route server and AS112 templates can be configured just as easily. The stock templates for both are secure and well tested and can be used by setting the \ntemplate\n element of the router configuration above to the following:\n\n\n\n\nAS112: \n'api/v4/router/as112/bird/standard'\n\n\nRoute Server: \n'api/v4/router/server/bird/standard'\n\n\n\n\nWe also provide sample scripts for automating the re-configuration of these services by cron. See the \n-v4\n scripts \nin this directory\n. These are quite robust and have been in production for ~3 years at INEX (as of Jan 2017).\n\n\nRoute Servers\n\n\nNormally on a peering exchange, all connected parties will establish bilateral peering relationships with each other customer connected to the exchange. As the number of connected parties increases, it becomes increasingly more difficult to manage peering relationships with customers of the exchange.\n\n\nHowever, by using a route servers for peering relationships, the number of BGP sessions per router stays at two: one for each route server (assuming a resilient set up). Clearly this is a more sustainable way of maintaining IXP peering relationships with a large number of participants.\n\n\nYou will have learnt above how to automatically generate route server configurations. This section goes into a bit more specific detail on INEX's route server configuration (shipped with IXP Manager) and why it's safe to use.\n\n\nThe features of the route server configurations that we generate include:\n\n\n\n\nfull prefix filtering based on IRRDB entries (can be disabled on a per member basis if required);\n\n\nfull origin ASN filtering based on IRRDB entries (can be disabled on a per member basis if required);\n\n\nin all cases, prefix filtering for IPv4 and v6 based on the IANA special purpose registries (also known as bogon lists);\n\n\nensuring next hop is the neighbor address to ensure no next hop hijacking;\n\n\nmax prefix limits;\n\n\nmultiple VLAN interfaces for a single member supported;\n\n\nlarge BGP communities supported;\n\n\na decade of production use and experience.\n\n\n\n\nThere are \nsome old notes on route server testing here\n which may also be useful.\n\n\nIRRDB Prefixes and ASN Filtering\n\n\nIXP Manager can maintain a list of member route:/route6: prefixes and origin ASNs as registered in IRRDBs in its database and then use these to, for example, generate strict inbound filters on route servers.\n\n\nPrerequisite:\n you need to have set up some IRRDB sources (e.g. RIPE's whois service) under the \nIXP Admin Actions / IRRDB Configuration\n on the left hand side menu. There is a database seeder to install some to start you off via the following (but thius is typically done during installation):\n\n\n./artisan db:seed --class=IRRDBs\n\n\n\n\nBGPQ3 is a very easy and fast way of querying IRRDBs. You first need to install this on your system. Then configure the path to it in \nconfig/ixp_tools.php\n. If you have not used this file before, you'll need to create your own local copy as follows:\n\n\ncp config/config/ixp_tools.php.dist config/config/ixp_tools.php\n\n\n\n\nThen set the full call path for \nbgpq3\n in this file:\n\n\n?php\n\n  'irrdb' =\n [\n        'bgpq' =\n [\n            'path' =\n '/path/to/bgpq3',\n        ],\n    ],\n\n\n\n\nTo populate (and update) your local IRRDB, run the following commands (changing the path as appropriate):\n\n\n/srv/ixpmanager/artisan irrdb:update-prefix-db\n/srv/ixpmanager/artisan irrdb:update-asn-db\n\n\n\n\nThese should be added to cron to run ~once per day (using the --quiet flag).\n\n\nThere are four levels of verbosity:\n\n\n\n\n-quiet\n: no output unless there's an error / issue.\n\n\nno option: simple stats on each customer's update results.\n\n\n-vv\n: include per customer and overall timings (database, processing and network).\n\n\n-vvv\n (debug): show prefixes/ASNs added remove also.\n\n\n\n\nYou can also specify a specific customer to update (rather than all) with an additional free form parameter. The database is searched for a matching customer in the order: customer ASN; customer ID (database primary key); and customer shortname. E.g.:\n\n\n/srv/ixpmanager/artisan irrdb:update-prefix-db 64511\n\n\n\n\nThe IRRDB update commands will:\n\n\n\n\niterate over all route server client customers for IPv4 and IPv6 (unless a specific customer is specified);\n\n\nuse the appropriate AS macro or ASN;\n\n\nquery the RADB against the appropriate source set for that customer;\n\n\ncompare prefixes(/ASNs) in the database already (if any) against RADB and insert / delete as appropriate;\n\n\nvalidate the prefix for proper CIDR notation before database inserts;\n\n\nupdate the last_seen time for all prefixes(/ASNs) for that customer;\n\n\n\n\nWe use transactions to update the database so, even in the middle of a refresh, a full set of prefixes for all customers will still be available.\n\n\nNote that our current implementation only queries RADB as BGPQ3 does not support the RIPE whois protocol.\n Our version will however set the RADB source database according to the member's stated IRRDB database as set on the customer add / edit page - so, for customer's registered with the RIPE IRRDB, the RIPE database of RADB is queried.", 
            "title": "Route Server"
        }, 
        {
            "location": "/features/routers/#routers", 
            "text": "Note that a number of pages redirect here where we have collated documentation on route collectors, route servers, AS112 servcies and IRRDB filtering.  IXP Manager can generate router configuration for typical IXP services such as route collectors, route servers and AS112 services. How this is done has been changed significantly from v3 to v4.   Note that until officially deprecated, the older v3 methods still work and the  official v3 documentation  should be referenced for that.", 
            "title": "Routers"
        }, 
        {
            "location": "/features/routers/#configuration-overview", 
            "text": "The basic elements of  a router  are configured in  configs/routers.php . This is an optional file that is not included in version control so the best way to start it is to copy from the template:  cp config/routers.php.dist config/routers.php  A typical entry of a sample router (in standard PHP associative array syntax) is:  ?php\n    'rc1-lan1-ipv4' =  [\n        'vlan_id'    =  1,\n        'protocol'   =  4,\n        'type'       =  'RC',   // RC|RS|AS112?\n        'name'       =  'INEX LAN1 - Route Collector - IPv4',\n        'shortname'  =  'RC1 - LAN1 - IPv4',\n        'router_id'  =  '192.0.2.8',\n        'peering_ip' =  '192.0.2.8',\n        'asn'        =  65500,\n        'software'   =  'bird',\n        'mgmt_ip'    =  '203.0.113.8',\n        'api'        =  'http://rc1-lan1-ipv4.mgmt.example.com/api',\n        'api_type'   =  'birdseye',\n        'lg_access'  =  Entities\\User::AUTH_PUBLIC,\n        'quarantine' =  false,\n        'bgp_lc'     =  false,\n        'template'   =  'api/v4/router/collector/bird/standard',\n    ],  where:   rc1-lan1-ipv4  is the  handle  for this router to be used in API calls later (it's the key of the PHP associative array).  vlan_id  is not the VLAN 802.1q tag number but the  vlan.id  database column. You can get this, for example, by hovering over the edit action in the VLAN listing in IXP Manager and finding the number in the URL.  protocol  is either  4  (IPv4) or  6  (IPv6). Any other value will lead to a runtime exception.  we have currently defined three types which are used for grouping routers in the UI and for other selection purposes:  RC  - route collector;  RS  - route server;  AS112  - an AS112 BGP peer (see  INEX's AS112 documentation  as an example).  name  - name / description of the router's purpose.  shortname  - used in dropdowns or other space constrained areas where  name  may be too long.  router_id  - the router's BGP ID (e.g.  192.0.2.8 ).  peering_ip  - the IPv4/6 address that this router initiates BGP peering sessions from.  asn  - the router's AS number.  software  - there is no specific use for this as yet.  mgmt_ip  - the IP to address this server / router at for management functions such as Nagios monitoring.  api  and  api_type  - the API end point for this server/router. The only use case for this so far is for the built-in  looking glass  functionality via  Birdseye .  lg_access  - who should be allow access the looking glass. One of:  AUTH_PUBLIC  - publicly available to all;  AUTH_CUSTUSER  - must be logged into IXP Manager as any user;  AUTH_SUPERUSER  - must be logged into IXP Manager as an administrator (no customer access).  quarantine  - a flag to indicate if this router is part of the IXP's quarantine / test infrastructure. For example, INEX runs two parallel route collectors: one quarantine and one production. When customers have issues or are being provisioned, they are placed in the quarantine LAN and we can examine BGP announcements safely on the non-production quarantine devices. When a router is marked as quarantine, it is only visible in looking glass dropdowns to customers who also have a port in quarantine (physical interface status).  bgp_lc  - a flag to indicate if the router supports  RFC8092  /  large BGP communities .  template  - the template to use to generate the configuration. See stock examples  here  (and note that  skinning  is supported).   Typically your  routers.php  file would hold multiple such entries. It is our intention to move this into the UI and database.", 
            "title": "Configuration Overview"
        }, 
        {
            "location": "/features/routers/#generation-overview", 
            "text": "The simplest configuration to generate is the route collector configuration. A route collector is an IXP router which serves only to  accept all routes and export no routes . It is used for problem diagnosis, to aid customer monitoring and for looking glasses (see  INEX's here .  The  standard configuration  simply pulls in a fairly standard header (sets up router ID, listening address and - for the collector at least - some unused filters) and creates a session for all customer routers on the given VLAN (see  vlan_id  above).  In the above example, the route handle is the array's associative key ( rc1-lan1-ipv4 ) and - for the given router handle - the configuration can be generated via:  # The key is generated in IXP Manager via the top right menu: *My Account -  API Keys*\nKEY= your-admin-ixp-manager-api-key \n# The base URL of your IXP Manager install plus: 'api/v4/router/gen_config'\nURL= https://ixp.example.com/api/v4/router/gen_config \n# The handle is the PHP associative key from `config/routers.php` as described above\nHANDLE= rc1-lan1-ipv4 \n# Then the complete URL is formed as:\ncurl --fail -s -H  X-IXP-Manager-API-Key: ${KEY}  ${URL}/${HANDLE}  ${HANDLE}.conf  Configurations for the route server and AS112 templates can be configured just as easily. The stock templates for both are secure and well tested and can be used by setting the  template  element of the router configuration above to the following:   AS112:  'api/v4/router/as112/bird/standard'  Route Server:  'api/v4/router/server/bird/standard'   We also provide sample scripts for automating the re-configuration of these services by cron. See the  -v4  scripts  in this directory . These are quite robust and have been in production for ~3 years at INEX (as of Jan 2017).", 
            "title": "Generation Overview"
        }, 
        {
            "location": "/features/routers/#route-servers", 
            "text": "Normally on a peering exchange, all connected parties will establish bilateral peering relationships with each other customer connected to the exchange. As the number of connected parties increases, it becomes increasingly more difficult to manage peering relationships with customers of the exchange.  However, by using a route servers for peering relationships, the number of BGP sessions per router stays at two: one for each route server (assuming a resilient set up). Clearly this is a more sustainable way of maintaining IXP peering relationships with a large number of participants.  You will have learnt above how to automatically generate route server configurations. This section goes into a bit more specific detail on INEX's route server configuration (shipped with IXP Manager) and why it's safe to use.  The features of the route server configurations that we generate include:   full prefix filtering based on IRRDB entries (can be disabled on a per member basis if required);  full origin ASN filtering based on IRRDB entries (can be disabled on a per member basis if required);  in all cases, prefix filtering for IPv4 and v6 based on the IANA special purpose registries (also known as bogon lists);  ensuring next hop is the neighbor address to ensure no next hop hijacking;  max prefix limits;  multiple VLAN interfaces for a single member supported;  large BGP communities supported;  a decade of production use and experience.   There are  some old notes on route server testing here  which may also be useful.", 
            "title": "Route Servers"
        }, 
        {
            "location": "/features/routers/#irrdb-prefixes-and-asn-filtering", 
            "text": "IXP Manager can maintain a list of member route:/route6: prefixes and origin ASNs as registered in IRRDBs in its database and then use these to, for example, generate strict inbound filters on route servers.  Prerequisite:  you need to have set up some IRRDB sources (e.g. RIPE's whois service) under the  IXP Admin Actions / IRRDB Configuration  on the left hand side menu. There is a database seeder to install some to start you off via the following (but thius is typically done during installation):  ./artisan db:seed --class=IRRDBs  BGPQ3 is a very easy and fast way of querying IRRDBs. You first need to install this on your system. Then configure the path to it in  config/ixp_tools.php . If you have not used this file before, you'll need to create your own local copy as follows:  cp config/config/ixp_tools.php.dist config/config/ixp_tools.php  Then set the full call path for  bgpq3  in this file:  ?php\n\n  'irrdb' =  [\n        'bgpq' =  [\n            'path' =  '/path/to/bgpq3',\n        ],\n    ],  To populate (and update) your local IRRDB, run the following commands (changing the path as appropriate):  /srv/ixpmanager/artisan irrdb:update-prefix-db\n/srv/ixpmanager/artisan irrdb:update-asn-db  These should be added to cron to run ~once per day (using the --quiet flag).  There are four levels of verbosity:   -quiet : no output unless there's an error / issue.  no option: simple stats on each customer's update results.  -vv : include per customer and overall timings (database, processing and network).  -vvv  (debug): show prefixes/ASNs added remove also.   You can also specify a specific customer to update (rather than all) with an additional free form parameter. The database is searched for a matching customer in the order: customer ASN; customer ID (database primary key); and customer shortname. E.g.:  /srv/ixpmanager/artisan irrdb:update-prefix-db 64511  The IRRDB update commands will:   iterate over all route server client customers for IPv4 and IPv6 (unless a specific customer is specified);  use the appropriate AS macro or ASN;  query the RADB against the appropriate source set for that customer;  compare prefixes(/ASNs) in the database already (if any) against RADB and insert / delete as appropriate;  validate the prefix for proper CIDR notation before database inserts;  update the last_seen time for all prefixes(/ASNs) for that customer;   We use transactions to update the database so, even in the middle of a refresh, a full set of prefixes for all customers will still be available.  Note that our current implementation only queries RADB as BGPQ3 does not support the RIPE whois protocol.  Our version will however set the RADB source database according to the member's stated IRRDB database as set on the customer add / edit page - so, for customer's registered with the RIPE IRRDB, the RIPE database of RADB is queried.", 
            "title": "IRRDB Prefixes and ASN Filtering"
        }, 
        {
            "location": "/features/routers/", 
            "text": "Routers\n\n\nNote that a number of pages redirect here where we have collated documentation on route collectors, route servers, AS112 servcies and IRRDB filtering.\n\n\nIXP Manager can generate router configuration for typical IXP services such as route collectors, route servers and AS112 services. How this is done has been changed significantly from v3 to v4.\n\n\n\n\nNote that until officially deprecated, the older v3 methods still work and the \nofficial v3 documentation\n should be referenced for that.\n\n\n\n\nConfiguration Overview\n\n\nThe basic elements of \na router\n are configured in \nconfigs/routers.php\n. This is an optional file that is not included in version control so the best way to start it is to copy from the template:\n\n\ncp config/routers.php.dist config/routers.php\n\n\n\n\nA typical entry of a sample router (in standard PHP associative array syntax) is:\n\n\n?php\n    'rc1-lan1-ipv4' =\n [\n        'vlan_id'    =\n 1,\n        'protocol'   =\n 4,\n        'type'       =\n 'RC',   // RC|RS|AS112?\n        'name'       =\n 'INEX LAN1 - Route Collector - IPv4',\n        'shortname'  =\n 'RC1 - LAN1 - IPv4',\n        'router_id'  =\n '192.0.2.8',\n        'peering_ip' =\n '192.0.2.8',\n        'asn'        =\n 65500,\n        'software'   =\n 'bird',\n        'mgmt_ip'    =\n '203.0.113.8',\n        'api'        =\n 'http://rc1-lan1-ipv4.mgmt.example.com/api',\n        'api_type'   =\n 'birdseye',\n        'lg_access'  =\n Entities\\User::AUTH_PUBLIC,\n        'quarantine' =\n false,\n        'bgp_lc'     =\n false,\n        'template'   =\n 'api/v4/router/collector/bird/standard',\n    ],\n\n\n\n\nwhere:\n\n\n\n\nrc1-lan1-ipv4\n is the \nhandle\n for this router to be used in API calls later (it's the key of the PHP associative array).\n\n\nvlan_id\n is not the VLAN 802.1q tag number but the \nvlan.id\n database column. You can get this, for example, by hovering over the edit action in the VLAN listing in IXP Manager and finding the number in the URL.\n\n\nprotocol\n is either \n4\n (IPv4) or \n6\n (IPv6). Any other value will lead to a runtime exception.\n\n\nwe have currently defined three types which are used for grouping routers in the UI and for other selection purposes:\n\n\nRC\n - route collector;\n\n\nRS\n - route server;\n\n\nAS112\n - an AS112 BGP peer (see \nINEX's AS112 documentation\n as an example).\n\n\nname\n - name / description of the router's purpose.\n\n\nshortname\n - used in dropdowns or other space constrained areas where \nname\n may be too long.\n\n\nrouter_id\n - the router's BGP ID (e.g. \n192.0.2.8\n).\n\n\npeering_ip\n - the IPv4/6 address that this router initiates BGP peering sessions from.\n\n\nasn\n - the router's AS number.\n\n\nsoftware\n - there is no specific use for this as yet.\n\n\nmgmt_ip\n - the IP to address this server / router at for management functions such as Nagios monitoring.\n\n\napi\n and \napi_type\n - the API end point for this server/router. The only use case for this so far is for the built-in \nlooking glass\n functionality via \nBirdseye\n.\n\n\nlg_access\n - who should be allow access the looking glass. One of:\n\n\nAUTH_PUBLIC\n - publicly available to all;\n\n\nAUTH_CUSTUSER\n - must be logged into IXP Manager as any user;\n\n\nAUTH_SUPERUSER\n - must be logged into IXP Manager as an administrator (no customer access).\n\n\nquarantine\n - a flag to indicate if this router is part of the IXP's quarantine / test infrastructure. For example, INEX runs two parallel route collectors: one quarantine and one production. When customers have issues or are being provisioned, they are placed in the quarantine LAN and we can examine BGP announcements safely on the non-production quarantine devices. When a router is marked as quarantine, it is only visible in looking glass dropdowns to customers who also have a port in quarantine (physical interface status).\n\n\nbgp_lc\n - a flag to indicate if the router supports \nRFC8092\n / \nlarge BGP communities\n.\n\n\ntemplate\n - the template to use to generate the configuration. See stock examples \nhere\n (and note that \nskinning\n is supported).\n\n\n\n\nTypically your \nrouters.php\n file would hold multiple such entries. It is our intention to move this into the UI and database.\n\n\nGeneration Overview\n\n\nThe simplest configuration to generate is the route collector configuration. A route collector is an IXP router which serves only to \naccept all routes and export no routes\n. It is used for problem diagnosis, to aid customer monitoring and for looking glasses (see \nINEX's here\n.\n\n\nThe \nstandard configuration\n simply pulls in a fairly standard header (sets up router ID, listening address and - for the collector at least - some unused filters) and creates a session for all customer routers on the given VLAN (see \nvlan_id\n above).\n\n\nIn the above example, the route handle is the array's associative key (\nrc1-lan1-ipv4\n) and - for the given router handle - the configuration can be generated via:\n\n\n# The key is generated in IXP Manager via the top right menu: *My Account -\n API Keys*\nKEY=\nyour-admin-ixp-manager-api-key\n\n# The base URL of your IXP Manager install plus: 'api/v4/router/gen_config'\nURL=\nhttps://ixp.example.com/api/v4/router/gen_config\n\n# The handle is the PHP associative key from `config/routers.php` as described above\nHANDLE=\nrc1-lan1-ipv4\n\n# Then the complete URL is formed as:\ncurl --fail -s -H \nX-IXP-Manager-API-Key: ${KEY}\n ${URL}/${HANDLE} \n${HANDLE}.conf\n\n\n\n\nConfigurations for the route server and AS112 templates can be configured just as easily. The stock templates for both are secure and well tested and can be used by setting the \ntemplate\n element of the router configuration above to the following:\n\n\n\n\nAS112: \n'api/v4/router/as112/bird/standard'\n\n\nRoute Server: \n'api/v4/router/server/bird/standard'\n\n\n\n\nWe also provide sample scripts for automating the re-configuration of these services by cron. See the \n-v4\n scripts \nin this directory\n. These are quite robust and have been in production for ~3 years at INEX (as of Jan 2017).\n\n\nRoute Servers\n\n\nNormally on a peering exchange, all connected parties will establish bilateral peering relationships with each other customer connected to the exchange. As the number of connected parties increases, it becomes increasingly more difficult to manage peering relationships with customers of the exchange.\n\n\nHowever, by using a route servers for peering relationships, the number of BGP sessions per router stays at two: one for each route server (assuming a resilient set up). Clearly this is a more sustainable way of maintaining IXP peering relationships with a large number of participants.\n\n\nYou will have learnt above how to automatically generate route server configurations. This section goes into a bit more specific detail on INEX's route server configuration (shipped with IXP Manager) and why it's safe to use.\n\n\nThe features of the route server configurations that we generate include:\n\n\n\n\nfull prefix filtering based on IRRDB entries (can be disabled on a per member basis if required);\n\n\nfull origin ASN filtering based on IRRDB entries (can be disabled on a per member basis if required);\n\n\nin all cases, prefix filtering for IPv4 and v6 based on the IANA special purpose registries (also known as bogon lists);\n\n\nensuring next hop is the neighbor address to ensure no next hop hijacking;\n\n\nmax prefix limits;\n\n\nmultiple VLAN interfaces for a single member supported;\n\n\nlarge BGP communities supported;\n\n\na decade of production use and experience.\n\n\n\n\nThere are \nsome old notes on route server testing here\n which may also be useful.\n\n\nIRRDB Prefixes and ASN Filtering\n\n\nIXP Manager can maintain a list of member route:/route6: prefixes and origin ASNs as registered in IRRDBs in its database and then use these to, for example, generate strict inbound filters on route servers.\n\n\nPrerequisite:\n you need to have set up some IRRDB sources (e.g. RIPE's whois service) under the \nIXP Admin Actions / IRRDB Configuration\n on the left hand side menu. There is a database seeder to install some to start you off via the following (but thius is typically done during installation):\n\n\n./artisan db:seed --class=IRRDBs\n\n\n\n\nBGPQ3 is a very easy and fast way of querying IRRDBs. You first need to install this on your system. Then configure the path to it in \nconfig/ixp_tools.php\n. If you have not used this file before, you'll need to create your own local copy as follows:\n\n\ncp config/config/ixp_tools.php.dist config/config/ixp_tools.php\n\n\n\n\nThen set the full call path for \nbgpq3\n in this file:\n\n\n?php\n\n  'irrdb' =\n [\n        'bgpq' =\n [\n            'path' =\n '/path/to/bgpq3',\n        ],\n    ],\n\n\n\n\nTo populate (and update) your local IRRDB, run the following commands (changing the path as appropriate):\n\n\n/srv/ixpmanager/artisan irrdb:update-prefix-db\n/srv/ixpmanager/artisan irrdb:update-asn-db\n\n\n\n\nThese should be added to cron to run ~once per day (using the --quiet flag).\n\n\nThere are four levels of verbosity:\n\n\n\n\n-quiet\n: no output unless there's an error / issue.\n\n\nno option: simple stats on each customer's update results.\n\n\n-vv\n: include per customer and overall timings (database, processing and network).\n\n\n-vvv\n (debug): show prefixes/ASNs added remove also.\n\n\n\n\nYou can also specify a specific customer to update (rather than all) with an additional free form parameter. The database is searched for a matching customer in the order: customer ASN; customer ID (database primary key); and customer shortname. E.g.:\n\n\n/srv/ixpmanager/artisan irrdb:update-prefix-db 64511\n\n\n\n\nThe IRRDB update commands will:\n\n\n\n\niterate over all route server client customers for IPv4 and IPv6 (unless a specific customer is specified);\n\n\nuse the appropriate AS macro or ASN;\n\n\nquery the RADB against the appropriate source set for that customer;\n\n\ncompare prefixes(/ASNs) in the database already (if any) against RADB and insert / delete as appropriate;\n\n\nvalidate the prefix for proper CIDR notation before database inserts;\n\n\nupdate the last_seen time for all prefixes(/ASNs) for that customer;\n\n\n\n\nWe use transactions to update the database so, even in the middle of a refresh, a full set of prefixes for all customers will still be available.\n\n\nNote that our current implementation only queries RADB as BGPQ3 does not support the RIPE whois protocol.\n Our version will however set the RADB source database according to the member's stated IRRDB database as set on the customer add / edit page - so, for customer's registered with the RIPE IRRDB, the RIPE database of RADB is queried.", 
            "title": "Routers"
        }, 
        {
            "location": "/features/routers/#routers", 
            "text": "Note that a number of pages redirect here where we have collated documentation on route collectors, route servers, AS112 servcies and IRRDB filtering.  IXP Manager can generate router configuration for typical IXP services such as route collectors, route servers and AS112 services. How this is done has been changed significantly from v3 to v4.   Note that until officially deprecated, the older v3 methods still work and the  official v3 documentation  should be referenced for that.", 
            "title": "Routers"
        }, 
        {
            "location": "/features/routers/#configuration-overview", 
            "text": "The basic elements of  a router  are configured in  configs/routers.php . This is an optional file that is not included in version control so the best way to start it is to copy from the template:  cp config/routers.php.dist config/routers.php  A typical entry of a sample router (in standard PHP associative array syntax) is:  ?php\n    'rc1-lan1-ipv4' =  [\n        'vlan_id'    =  1,\n        'protocol'   =  4,\n        'type'       =  'RC',   // RC|RS|AS112?\n        'name'       =  'INEX LAN1 - Route Collector - IPv4',\n        'shortname'  =  'RC1 - LAN1 - IPv4',\n        'router_id'  =  '192.0.2.8',\n        'peering_ip' =  '192.0.2.8',\n        'asn'        =  65500,\n        'software'   =  'bird',\n        'mgmt_ip'    =  '203.0.113.8',\n        'api'        =  'http://rc1-lan1-ipv4.mgmt.example.com/api',\n        'api_type'   =  'birdseye',\n        'lg_access'  =  Entities\\User::AUTH_PUBLIC,\n        'quarantine' =  false,\n        'bgp_lc'     =  false,\n        'template'   =  'api/v4/router/collector/bird/standard',\n    ],  where:   rc1-lan1-ipv4  is the  handle  for this router to be used in API calls later (it's the key of the PHP associative array).  vlan_id  is not the VLAN 802.1q tag number but the  vlan.id  database column. You can get this, for example, by hovering over the edit action in the VLAN listing in IXP Manager and finding the number in the URL.  protocol  is either  4  (IPv4) or  6  (IPv6). Any other value will lead to a runtime exception.  we have currently defined three types which are used for grouping routers in the UI and for other selection purposes:  RC  - route collector;  RS  - route server;  AS112  - an AS112 BGP peer (see  INEX's AS112 documentation  as an example).  name  - name / description of the router's purpose.  shortname  - used in dropdowns or other space constrained areas where  name  may be too long.  router_id  - the router's BGP ID (e.g.  192.0.2.8 ).  peering_ip  - the IPv4/6 address that this router initiates BGP peering sessions from.  asn  - the router's AS number.  software  - there is no specific use for this as yet.  mgmt_ip  - the IP to address this server / router at for management functions such as Nagios monitoring.  api  and  api_type  - the API end point for this server/router. The only use case for this so far is for the built-in  looking glass  functionality via  Birdseye .  lg_access  - who should be allow access the looking glass. One of:  AUTH_PUBLIC  - publicly available to all;  AUTH_CUSTUSER  - must be logged into IXP Manager as any user;  AUTH_SUPERUSER  - must be logged into IXP Manager as an administrator (no customer access).  quarantine  - a flag to indicate if this router is part of the IXP's quarantine / test infrastructure. For example, INEX runs two parallel route collectors: one quarantine and one production. When customers have issues or are being provisioned, they are placed in the quarantine LAN and we can examine BGP announcements safely on the non-production quarantine devices. When a router is marked as quarantine, it is only visible in looking glass dropdowns to customers who also have a port in quarantine (physical interface status).  bgp_lc  - a flag to indicate if the router supports  RFC8092  /  large BGP communities .  template  - the template to use to generate the configuration. See stock examples  here  (and note that  skinning  is supported).   Typically your  routers.php  file would hold multiple such entries. It is our intention to move this into the UI and database.", 
            "title": "Configuration Overview"
        }, 
        {
            "location": "/features/routers/#generation-overview", 
            "text": "The simplest configuration to generate is the route collector configuration. A route collector is an IXP router which serves only to  accept all routes and export no routes . It is used for problem diagnosis, to aid customer monitoring and for looking glasses (see  INEX's here .  The  standard configuration  simply pulls in a fairly standard header (sets up router ID, listening address and - for the collector at least - some unused filters) and creates a session for all customer routers on the given VLAN (see  vlan_id  above).  In the above example, the route handle is the array's associative key ( rc1-lan1-ipv4 ) and - for the given router handle - the configuration can be generated via:  # The key is generated in IXP Manager via the top right menu: *My Account -  API Keys*\nKEY= your-admin-ixp-manager-api-key \n# The base URL of your IXP Manager install plus: 'api/v4/router/gen_config'\nURL= https://ixp.example.com/api/v4/router/gen_config \n# The handle is the PHP associative key from `config/routers.php` as described above\nHANDLE= rc1-lan1-ipv4 \n# Then the complete URL is formed as:\ncurl --fail -s -H  X-IXP-Manager-API-Key: ${KEY}  ${URL}/${HANDLE}  ${HANDLE}.conf  Configurations for the route server and AS112 templates can be configured just as easily. The stock templates for both are secure and well tested and can be used by setting the  template  element of the router configuration above to the following:   AS112:  'api/v4/router/as112/bird/standard'  Route Server:  'api/v4/router/server/bird/standard'   We also provide sample scripts for automating the re-configuration of these services by cron. See the  -v4  scripts  in this directory . These are quite robust and have been in production for ~3 years at INEX (as of Jan 2017).", 
            "title": "Generation Overview"
        }, 
        {
            "location": "/features/routers/#route-servers", 
            "text": "Normally on a peering exchange, all connected parties will establish bilateral peering relationships with each other customer connected to the exchange. As the number of connected parties increases, it becomes increasingly more difficult to manage peering relationships with customers of the exchange.  However, by using a route servers for peering relationships, the number of BGP sessions per router stays at two: one for each route server (assuming a resilient set up). Clearly this is a more sustainable way of maintaining IXP peering relationships with a large number of participants.  You will have learnt above how to automatically generate route server configurations. This section goes into a bit more specific detail on INEX's route server configuration (shipped with IXP Manager) and why it's safe to use.  The features of the route server configurations that we generate include:   full prefix filtering based on IRRDB entries (can be disabled on a per member basis if required);  full origin ASN filtering based on IRRDB entries (can be disabled on a per member basis if required);  in all cases, prefix filtering for IPv4 and v6 based on the IANA special purpose registries (also known as bogon lists);  ensuring next hop is the neighbor address to ensure no next hop hijacking;  max prefix limits;  multiple VLAN interfaces for a single member supported;  large BGP communities supported;  a decade of production use and experience.   There are  some old notes on route server testing here  which may also be useful.", 
            "title": "Route Servers"
        }, 
        {
            "location": "/features/routers/#irrdb-prefixes-and-asn-filtering", 
            "text": "IXP Manager can maintain a list of member route:/route6: prefixes and origin ASNs as registered in IRRDBs in its database and then use these to, for example, generate strict inbound filters on route servers.  Prerequisite:  you need to have set up some IRRDB sources (e.g. RIPE's whois service) under the  IXP Admin Actions / IRRDB Configuration  on the left hand side menu. There is a database seeder to install some to start you off via the following (but thius is typically done during installation):  ./artisan db:seed --class=IRRDBs  BGPQ3 is a very easy and fast way of querying IRRDBs. You first need to install this on your system. Then configure the path to it in  config/ixp_tools.php . If you have not used this file before, you'll need to create your own local copy as follows:  cp config/config/ixp_tools.php.dist config/config/ixp_tools.php  Then set the full call path for  bgpq3  in this file:  ?php\n\n  'irrdb' =  [\n        'bgpq' =  [\n            'path' =  '/path/to/bgpq3',\n        ],\n    ],  To populate (and update) your local IRRDB, run the following commands (changing the path as appropriate):  /srv/ixpmanager/artisan irrdb:update-prefix-db\n/srv/ixpmanager/artisan irrdb:update-asn-db  These should be added to cron to run ~once per day (using the --quiet flag).  There are four levels of verbosity:   -quiet : no output unless there's an error / issue.  no option: simple stats on each customer's update results.  -vv : include per customer and overall timings (database, processing and network).  -vvv  (debug): show prefixes/ASNs added remove also.   You can also specify a specific customer to update (rather than all) with an additional free form parameter. The database is searched for a matching customer in the order: customer ASN; customer ID (database primary key); and customer shortname. E.g.:  /srv/ixpmanager/artisan irrdb:update-prefix-db 64511  The IRRDB update commands will:   iterate over all route server client customers for IPv4 and IPv6 (unless a specific customer is specified);  use the appropriate AS macro or ASN;  query the RADB against the appropriate source set for that customer;  compare prefixes(/ASNs) in the database already (if any) against RADB and insert / delete as appropriate;  validate the prefix for proper CIDR notation before database inserts;  update the last_seen time for all prefixes(/ASNs) for that customer;   We use transactions to update the database so, even in the middle of a refresh, a full set of prefixes for all customers will still be available.  Note that our current implementation only queries RADB as BGPQ3 does not support the RIPE whois protocol.  Our version will however set the RADB source database according to the member's stated IRRDB database as set on the customer add / edit page - so, for customer's registered with the RIPE IRRDB, the RIPE database of RADB is queried.", 
            "title": "IRRDB Prefixes and ASN Filtering"
        }, 
        {
            "location": "/features/skinning/", 
            "text": "Templates \n Skinning\n\n\n\n\nRemember that v4 is a transition version of \nIXP Manager\n from Zend Framework / Smarty to Laravel and so much of the frontend / templating still uses v3 templates and code. As such, how to skin a page will depend on whether the template is found in \nresources/views\n (v4) or \napplication/[modules/xxx/]views\n (v3). Both are covered here.\n\n\n\n\nIXP Manager\n supports template/view skinning allowing users to substitute any of their own templates in place of the default ones shipped with IXP Manager.\n\n\nSkinning in Version 4+\n\n\nFirst, set the following parameter in \n.env\n:\n\n\nVIEW_SKIN=\nexample\n\n\n\n\n\nSkins should then be placed in the \nresources/skins/example\n directory (\nexample\n should be substituted for whatever you want to call your own skin). The default templates can be found in \nresources/views\n directory. INEX bundles its own skinned templates in \nresources/skins/inex\n as an example.\n\n\nOnce a skin is enabled from \n.env\n, then any templates found in the skin directory \n(using the same directory structure as found under \nresouces/views\n)\n will take precedence over the default template file. This means you do not need to recreate / copy all the default files - just replace the ones you want.\n\n\nIn previous versions of \nIXP Manager\n, we used Smarty as the templating engine. This meant that if someone wanted to help improve \nIXP Manager\n then they would need to become familiar with PHP \nand\n Smarty. In v4 we dropped Smarty and, rather than using another compiled templating engine, we have decided to go with native PHP templates.\n\n\nFor this, we are using \nFoil\n - \nFoil brings all the flexibility and power of modern template engines to native PHP templates. Write simple, clean and concise templates with nothing more than PHP.\n Also, simulaneously supported are Lavael's own \nBlade templates\n which we sometimes use for simple pages.\n\n\nExample\n\n\nThe \ngraphing\n MRTG configuration generator allows for custom configuration content at the top and bottom of the file. In order to have your custom configuration enabled, you need to skin two files.\n\n\nHere's an example:\n\n\n# position ourselves in the IXP Manager root directory\ncd /path/to/ixp4\n\n# make the skin directory\nmkdir resources/skins/example\n\n# create the full path required for the MRTG configuration files:\nmkdir -p resources/skins/example/services/grapher/mrtg\n\n# copy over the customisation files:\ncp views/services/grapher/mrtg/custom-header.foil.php resources/skins/example/services/grapher/mrtg\ncp views/services/grapher/mrtg/custom-footer.foil.php resources/skins/example/services/grapher/mrtg\n\n# edit the above files as required\nvi resources/skins/example/services/grapher/mrtg/custom-header.plates.php\nvi resources/skins/example/services/grapher/mrtg/custom-footer.plates.php\n\n\n\n\nThen, finally, edit \n.env\n and set the skin to use:\n\n\nVIEW_SKINS=\nexample\n\n\n\n\n\nYou can of course skin any file including the non-custom MRTG files as suits your needs.\n\n\nCustom Variables / Configuration Options\n\n\nWhen you are skinning your own templates, you may find you need to create custom configuration options for values you do not want to store directly in your own templates. For this, we have a configuration file which is excluded from Git. Initiate it via::\n\n\ncp config/custom.php.dist config/custom.php\n\n\n\n\nThis is \nLaravel's standard configuration file format\n (which is an associative PHP array). You can also use Laravel's dotenv variables here too.\n\n\nAs an example, if you were to create a configuration option:\n\n\n?php\n'example' =\n [\n    'key' =\n 'my own config value',\n],\n\n\n\n\nthen in code this would be accessible as:\n\n\n?php\nconfig( \ncustom.example.key\n, \ndefault value if not set|null\n )\n\n\n\n\nwhere the second parameter is a default option if the requested configuration setting has not been defined (which defaults to \nnull\n). In templates, this can be accessed the same way or rendered in the template with::\n\n\n?= config( \ncustom.example.key\n, \ndefault\n ) ?\n\n\n\n\n\nSkinning Old Templates\n\n\nThis is still important as \nIXP Manager\n v4 still uses most of the previous templates.\n\n\nTo skin files found under \napplication/[modules/xxx/]views\n, proceed as follows:\n\n\n\n\n\n\nset a skin name in \n.env\n:\n   \nVIEW_SMARTY_SKIN=\"myskin\"\n\n\n\n\n\n\ncreate a directory with a matching name: \napplication/views/_skins/myskin\n.\n\n\n\n\n\n\nOnce the above \n.env\n option is set, then any pages in its skin directory (using the same directory structure as \napplication/views\n will take precedence over the default template files. This means you do not need to recreate / copy all the default files - just replace the ones you want.", 
            "title": "Skinning"
        }, 
        {
            "location": "/features/skinning/#templates-skinning", 
            "text": "Remember that v4 is a transition version of  IXP Manager  from Zend Framework / Smarty to Laravel and so much of the frontend / templating still uses v3 templates and code. As such, how to skin a page will depend on whether the template is found in  resources/views  (v4) or  application/[modules/xxx/]views  (v3). Both are covered here.   IXP Manager  supports template/view skinning allowing users to substitute any of their own templates in place of the default ones shipped with IXP Manager.", 
            "title": "Templates &amp; Skinning"
        }, 
        {
            "location": "/features/skinning/#skinning-in-version-4", 
            "text": "First, set the following parameter in  .env :  VIEW_SKIN= example   Skins should then be placed in the  resources/skins/example  directory ( example  should be substituted for whatever you want to call your own skin). The default templates can be found in  resources/views  directory. INEX bundles its own skinned templates in  resources/skins/inex  as an example.  Once a skin is enabled from  .env , then any templates found in the skin directory  (using the same directory structure as found under  resouces/views )  will take precedence over the default template file. This means you do not need to recreate / copy all the default files - just replace the ones you want.  In previous versions of  IXP Manager , we used Smarty as the templating engine. This meant that if someone wanted to help improve  IXP Manager  then they would need to become familiar with PHP  and  Smarty. In v4 we dropped Smarty and, rather than using another compiled templating engine, we have decided to go with native PHP templates.  For this, we are using  Foil  -  Foil brings all the flexibility and power of modern template engines to native PHP templates. Write simple, clean and concise templates with nothing more than PHP.  Also, simulaneously supported are Lavael's own  Blade templates  which we sometimes use for simple pages.", 
            "title": "Skinning in Version 4+"
        }, 
        {
            "location": "/features/skinning/#example", 
            "text": "The  graphing  MRTG configuration generator allows for custom configuration content at the top and bottom of the file. In order to have your custom configuration enabled, you need to skin two files.  Here's an example:  # position ourselves in the IXP Manager root directory\ncd /path/to/ixp4\n\n# make the skin directory\nmkdir resources/skins/example\n\n# create the full path required for the MRTG configuration files:\nmkdir -p resources/skins/example/services/grapher/mrtg\n\n# copy over the customisation files:\ncp views/services/grapher/mrtg/custom-header.foil.php resources/skins/example/services/grapher/mrtg\ncp views/services/grapher/mrtg/custom-footer.foil.php resources/skins/example/services/grapher/mrtg\n\n# edit the above files as required\nvi resources/skins/example/services/grapher/mrtg/custom-header.plates.php\nvi resources/skins/example/services/grapher/mrtg/custom-footer.plates.php  Then, finally, edit  .env  and set the skin to use:  VIEW_SKINS= example   You can of course skin any file including the non-custom MRTG files as suits your needs.", 
            "title": "Example"
        }, 
        {
            "location": "/features/skinning/#custom-variables-configuration-options", 
            "text": "When you are skinning your own templates, you may find you need to create custom configuration options for values you do not want to store directly in your own templates. For this, we have a configuration file which is excluded from Git. Initiate it via::  cp config/custom.php.dist config/custom.php  This is  Laravel's standard configuration file format  (which is an associative PHP array). You can also use Laravel's dotenv variables here too.  As an example, if you were to create a configuration option:  ?php\n'example' =  [\n    'key' =  'my own config value',\n],  then in code this would be accessible as:  ?php\nconfig(  custom.example.key ,  default value if not set|null  )  where the second parameter is a default option if the requested configuration setting has not been defined (which defaults to  null ). In templates, this can be accessed the same way or rendered in the template with::  ?= config(  custom.example.key ,  default  ) ?", 
            "title": "Custom Variables / Configuration Options"
        }, 
        {
            "location": "/features/skinning/#skinning-old-templates", 
            "text": "This is still important as  IXP Manager  v4 still uses most of the previous templates.  To skin files found under  application/[modules/xxx/]views , proceed as follows:    set a skin name in  .env :\n    VIEW_SMARTY_SKIN=\"myskin\"    create a directory with a matching name:  application/views/_skins/myskin .    Once the above  .env  option is set, then any pages in its skin directory (using the same directory structure as  application/views  will take precedence over the default template files. This means you do not need to recreate / copy all the default files - just replace the ones you want.", 
            "title": "Skinning Old Templates"
        }, 
        {
            "location": "/dev/api/", 
            "text": "API\n\n\nYou'll find API documentation when logged into IXP manager under \nMy Account / API Keys\n.", 
            "title": "API"
        }, 
        {
            "location": "/dev/api/#api", 
            "text": "You'll find API documentation when logged into IXP manager under  My Account / API Keys .", 
            "title": "API"
        }, 
        {
            "location": "/dev/docs/", 
            "text": "Documentation\n\n\nFrom v4 onwards, we use  \nRead the Docs\n with \nMkDocs\n to build the documentation and host it on\n\nGitHub\n.\n\n\nBuilding Locally\n\n\nIf you haven't already, install MkDocs:\n\n\npip install mkdocs\n\n\n\n\nThe documentation can then be built locally as follows:\n\n\ngit clone https://github.com/inex/ixp-manager-docs-md.git\ncd ixp-manager-docs-md\nmkdocs build\nmkdocs serve", 
            "title": "Documentation"
        }, 
        {
            "location": "/dev/docs/#documentation", 
            "text": "From v4 onwards, we use   Read the Docs  with  MkDocs  to build the documentation and host it on GitHub .", 
            "title": "Documentation"
        }, 
        {
            "location": "/dev/docs/#building-locally", 
            "text": "If you haven't already, install MkDocs:  pip install mkdocs  The documentation can then be built locally as follows:  git clone https://github.com/inex/ixp-manager-docs-md.git\ncd ixp-manager-docs-md\nmkdocs build\nmkdocs serve", 
            "title": "Building Locally"
        }, 
        {
            "location": "/dev/grapher/", 
            "text": "Grapher\n\n\nOutline of Adding a New Graph Type\n\n\nThis is a quick write up as I commit a new graph type. To be fleshed out.\n\n\nOur new graphing backend, \nGrapher\n, supports different graph types from different backends. To add a new graph type - let's call it \nExample\n - you need to do the following:\n\n\n\n\nCreate a graph class for this new type called \napp/Services/Grapher/Graph/Example.php\n. This must extend the abstract class \napp/Services/Grapher/Graph.php\n.\n\n\nAdd an \nexample()\n function to \napp/Services/Grapher.php\n which instantiates the above graph object.\n\n\nUpdate the appropriate backend file(s) (\napp/Services/Grapher/Backend/xxx\n) to handle this new graph file. I.e. create the actual implementation for getting the data to process this graph.\n\n\nAdd your graph to the \nsupports()\n function in the appropriate backends (and the \napp/Services/Grapher/Backend/Dummy\n backend).\n\n\n\n\nTo serve this graph over HTTP:\n\n\n\n\n\n\nCreate a GET route in \napp/Providers/GrapherServiceProvider.php\n\n\n\n\nCreate a function to handle the GET request in \napp/Http/Controllers/Services/Grapher.php\n\n\nAdd functionality to the middleware to process a graph request: \napp/Http/Middleware/Services/Grapher.php\n\n\n\n\nHere's a great example from a \nGithub commit\n.\n\n\nAdding a New MRTG Graph\n\n\nHere is an example of adding \nbroadcast graphs\n to MRTG.", 
            "title": "Grapher"
        }, 
        {
            "location": "/dev/grapher/#grapher", 
            "text": "", 
            "title": "Grapher"
        }, 
        {
            "location": "/dev/grapher/#outline-of-adding-a-new-graph-type", 
            "text": "This is a quick write up as I commit a new graph type. To be fleshed out.  Our new graphing backend,  Grapher , supports different graph types from different backends. To add a new graph type - let's call it  Example  - you need to do the following:   Create a graph class for this new type called  app/Services/Grapher/Graph/Example.php . This must extend the abstract class  app/Services/Grapher/Graph.php .  Add an  example()  function to  app/Services/Grapher.php  which instantiates the above graph object.  Update the appropriate backend file(s) ( app/Services/Grapher/Backend/xxx ) to handle this new graph file. I.e. create the actual implementation for getting the data to process this graph.  Add your graph to the  supports()  function in the appropriate backends (and the  app/Services/Grapher/Backend/Dummy  backend).   To serve this graph over HTTP:    Create a GET route in  app/Providers/GrapherServiceProvider.php   Create a function to handle the GET request in  app/Http/Controllers/Services/Grapher.php  Add functionality to the middleware to process a graph request:  app/Http/Middleware/Services/Grapher.php   Here's a great example from a  Github commit .", 
            "title": "Outline of Adding a New Graph Type"
        }, 
        {
            "location": "/dev/grapher/#adding-a-new-mrtg-graph", 
            "text": "Here is an example of adding  broadcast graphs  to MRTG.", 
            "title": "Adding a New MRTG Graph"
        }, 
        {
            "location": "/dev/helpders/", 
            "text": "Helpers\n\n\nVarious helpers we use within IXP Manager.\n\n\nAlerts\n\n\nTo show Bootstrap-styled alerts on view (Foil) templates, add them in your controllers as follows:\n\n\n?php\n    use IXP\\Utils\\View\\Alert\\Container as AlertContainer;\n    use IXP\\Utils\\View\\Alert\\Alert;\n\n    ...\n\n    AlertContainer::push( '\nb\nExample:\n/b\n This is a success alert!, Alert::SUCCESS );\n\n\n\n\nwhere the types available are: \nSUCCESS, INFO (default), DANGER, WARNING\n.\n\n\nTo then display (all) the alerts, in your foil template add:\n\n\n?= $t-\nalerts() ?\n\n\n\n\n\nThese alerts are HTML-safe as they display the message using HTML Purifier's ''clean()''.", 
            "title": "Helpers"
        }, 
        {
            "location": "/dev/helpders/#helpers", 
            "text": "Various helpers we use within IXP Manager.", 
            "title": "Helpers"
        }, 
        {
            "location": "/dev/helpders/#alerts", 
            "text": "To show Bootstrap-styled alerts on view (Foil) templates, add them in your controllers as follows:  ?php\n    use IXP\\Utils\\View\\Alert\\Container as AlertContainer;\n    use IXP\\Utils\\View\\Alert\\Alert;\n\n    ...\n\n    AlertContainer::push( ' b Example: /b  This is a success alert!, Alert::SUCCESS );  where the types available are:  SUCCESS, INFO (default), DANGER, WARNING .  To then display (all) the alerts, in your foil template add:  ?= $t- alerts() ?   These alerts are HTML-safe as they display the message using HTML Purifier's ''clean()''.", 
            "title": "Alerts"
        }, 
        {
            "location": "/dev/vagrant/", 
            "text": "Vagrant\n\n\nTo aid development (as well as allowing easier evaluation), we use \nVagrant\n from v4 onwards.\n\n\nQuick Vagrant\n\n\n\n\nTemporary issue:\n Ubuntu Xenial has a known issue and a couple extra steps are required right now (in the \nnf-graphs-decix\n branch): https://github.com/inex/IXP-Manager/commit/dd8d256712ec2564eee29aab7cc2eabdf33466d6\n\n\n\n\nIf you want to get IXP Manager with Vagrant up and running quickly, follow these steps:\n\n\n\n\nInstall Vagrant (see: http://docs.vagrantup.com/v2/installation/index.html)\n\n\nInstall VirtualBox (see: https://www.virtualbox.org/)\n\n\n\n\nClone IXP Manager to a directory:\n\n\nsh\ngit clone https://github.com/inex/IXP-Manager.git ixpmanager\ncd ixpmanager\n\n\n\n\n\n\nSpin up a Vagrant virtual machine:\n\n\nvagrant up\n\n\n\n\n\n\nAccess IXP Manager on: http://localhost:8088/\n\n\n\n\n\n\nLog in with one of the following username / passwords:\n\n\n\n\n\n\nAdmin user: \nvagrant / vagrant1\n\n\n\n\nCustomer Admin: \nas112 / as112as112\n\n\nCustomer User: \nasii2user / as112as112\n\n\n\n\nPlease see Vagrant's own documentation for a full description of how to use it fully. To access the virtual machine that the above has spun up, just run the following from the \nixpmanager\n directory:\n\n\nvagrant ssh\n\n\n\n\nYou'll find the \nixpmanager\n directory mounted under \n/vagrant\n, you can \nsudo su -\n and you can access MySQL via:\n\n\nmysql -u root -ppassword ixp\n\n\n\n\nIf you prefer to use phpMyAdmin, you'll find it at http://localhost:8088/phpmyadmin and you can log in with \nroot / password\n.\n\n\nDatabase Details\n\n\nSpinning up Vagrant in the above manner loads a sample database from \nixpmanager/database/vagrant-base.sql\n. If you have a preferred development database, place a bzip'd copy of it at \nixpmanager/ixpmanager-preferred.sql.bz2\n before step 5 above.", 
            "title": "Vagrant"
        }, 
        {
            "location": "/dev/vagrant/#vagrant", 
            "text": "To aid development (as well as allowing easier evaluation), we use  Vagrant  from v4 onwards.", 
            "title": "Vagrant"
        }, 
        {
            "location": "/dev/vagrant/#quick-vagrant", 
            "text": "Temporary issue:  Ubuntu Xenial has a known issue and a couple extra steps are required right now (in the  nf-graphs-decix  branch): https://github.com/inex/IXP-Manager/commit/dd8d256712ec2564eee29aab7cc2eabdf33466d6   If you want to get IXP Manager with Vagrant up and running quickly, follow these steps:   Install Vagrant (see: http://docs.vagrantup.com/v2/installation/index.html)  Install VirtualBox (see: https://www.virtualbox.org/)   Clone IXP Manager to a directory:  sh\ngit clone https://github.com/inex/IXP-Manager.git ixpmanager\ncd ixpmanager    Spin up a Vagrant virtual machine:  vagrant up    Access IXP Manager on: http://localhost:8088/    Log in with one of the following username / passwords:    Admin user:  vagrant / vagrant1   Customer Admin:  as112 / as112as112  Customer User:  asii2user / as112as112   Please see Vagrant's own documentation for a full description of how to use it fully. To access the virtual machine that the above has spun up, just run the following from the  ixpmanager  directory:  vagrant ssh  You'll find the  ixpmanager  directory mounted under  /vagrant , you can  sudo su -  and you can access MySQL via:  mysql -u root -ppassword ixp  If you prefer to use phpMyAdmin, you'll find it at http://localhost:8088/phpmyadmin and you can log in with  root / password .", 
            "title": "Quick Vagrant"
        }, 
        {
            "location": "/dev/vagrant/#database-details", 
            "text": "Spinning up Vagrant in the above manner loads a sample database from  ixpmanager/database/vagrant-base.sql . If you have a preferred development database, place a bzip'd copy of it at  ixpmanager/ixpmanager-preferred.sql.bz2  before step 5 above.", 
            "title": "Database Details"
        }
    ]
}